{"ast":null,"code":"'use strict';\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar HistogramAggregationBase = require('./histogram-aggregation-base');\n/**\n * A multi-bucket values source based aggregation that can be applied on\n * numeric values extracted from the documents. It dynamically builds fixed\n * size (a.k.a. interval) buckets over the values.\n *\n * [Elasticsearch reference](https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-histogram-aggregation.html)\n *\n * @param {string} name The name which will be used to refer to this aggregation.\n * @param {string=} field The field to aggregate on\n * @param {number=} interval Interval to generate histogram over.\n *\n * @example\n * const agg = esb.histogramAggregation('prices', 'price', 50);\n *\n * @example\n * const agg = esb.histogramAggregation('prices', 'price', 50).minDocCount(1);\n *\n * @example\n * const agg = esb.histogramAggregation('prices', 'price', 50)\n *     .extendedBounds(0, 500);\n *\n * @example\n * const agg = esb.histogramAggregation('quantity', 'quantity', 10).missing(0);\n *\n * @extends HistogramAggregationBase\n */\n\n\nvar HistogramAggregation = function (_HistogramAggregation) {\n  (0, _inherits3.default)(HistogramAggregation, _HistogramAggregation); // eslint-disable-next-line require-jsdoc\n\n  function HistogramAggregation(name, field, interval) {\n    (0, _classCallCheck3.default)(this, HistogramAggregation);\n    return (0, _possibleConstructorReturn3.default)(this, (HistogramAggregation.__proto__ || Object.getPrototypeOf(HistogramAggregation)).call(this, name, 'histogram', field, interval));\n  }\n\n  return HistogramAggregation;\n}(HistogramAggregationBase);\n\nmodule.exports = HistogramAggregation;","map":null,"metadata":{},"sourceType":"script"}