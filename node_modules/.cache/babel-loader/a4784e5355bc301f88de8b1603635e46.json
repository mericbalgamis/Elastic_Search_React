{"ast":null,"code":"'use strict';\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar SpanLittleBigQueryBase = require('./span-little-big-query-base');\n/**\n * Returns matches which are enclosed inside another span query. The span within\n * query maps to Lucene `SpanWithinQuery`.\n *\n * Matching spans from `little` that are enclosed within `big` are returned.\n *\n * [Elasticsearch reference](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-span-containing-query.html)\n *\n * @example\n * const spanQry = esb.spanWithinQuery()\n *     .little(esb.spanTermQuery('field1', 'foo'))\n *     .big(esb.spanNearQuery()\n *         .clauses([\n *             esb.spanTermQuery('field1', 'bar'),\n *             esb.spanTermQuery('field1', 'baz')\n *         ])\n *         .slop(5)\n *         .inOrder(true));\n *\n * @extends SpanLittleBigQueryBase\n */\n\n\nvar SpanWithinQuery = function (_SpanLittleBigQueryBa) {\n  (0, _inherits3.default)(SpanWithinQuery, _SpanLittleBigQueryBa); // eslint-disable-next-line require-jsdoc\n\n  function SpanWithinQuery() {\n    (0, _classCallCheck3.default)(this, SpanWithinQuery);\n    return (0, _possibleConstructorReturn3.default)(this, (SpanWithinQuery.__proto__ || Object.getPrototypeOf(SpanWithinQuery)).call(this, 'span_within'));\n  }\n\n  return SpanWithinQuery;\n}(SpanLittleBigQueryBase);\n\nmodule.exports = SpanWithinQuery;","map":null,"metadata":{},"sourceType":"script"}