{"ast":null,"code":"'use strict';\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar PipelineAggregationBase = require('./pipeline-aggregation-base');\n\nvar ES_REF_URL = 'https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-pipeline-serialdiff-aggregation.html';\n/**\n * Serial differencing is a technique where values in a time series are\n * subtracted from itself at different time lags or periods.\n *\n * Serial differences are built by first specifying a `histogram` or `date_histogram` over a field.\n *\n * [Elasticsearch reference](https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-pipeline-serialdiff-aggregation.html)\n *\n * @example\n * const reqBody = esb.requestBodySearch()\n *     .agg(\n *         esb.dateHistogramAggregation('my_date_histo', 'timestamp')\n *             .interval('day')\n *             .agg(esb.sumAggregation('the_sum', 'lemmings'))\n *             .agg(\n *                 esb.serialDifferencingAggregation(\n *                     'thirtieth_difference',\n *                     'the_sum'\n *                 ).lag(30)\n *             )\n *     )\n *     .size(0);\n *\n * @param {string} name The name which will be used to refer to this aggregation.\n * @param {string=} bucketsPath The relative path of metric to aggregate over\n *\n * @extends PipelineAggregationBase\n */\n\nvar SerialDifferencingAggregation = function (_PipelineAggregationB) {\n  (0, _inherits3.default)(SerialDifferencingAggregation, _PipelineAggregationB); // eslint-disable-next-line require-jsdoc\n\n  function SerialDifferencingAggregation(name, bucketsPath) {\n    (0, _classCallCheck3.default)(this, SerialDifferencingAggregation);\n    return (0, _possibleConstructorReturn3.default)(this, (SerialDifferencingAggregation.__proto__ || Object.getPrototypeOf(SerialDifferencingAggregation)).call(this, name, 'serial_diff', ES_REF_URL, bucketsPath));\n  }\n  /**\n   * The historical bucket to subtract from the current value.\n   * Optional.\n   *\n   * @param {number} lag Default is 1.\n   * @returns {SerialDifferencingAggregation} returns `this` so that calls can be chained\n   */\n\n\n  (0, _createClass3.default)(SerialDifferencingAggregation, [{\n    key: 'lag',\n    value: function lag(_lag) {\n      this._aggsDef.lag = _lag;\n      return this;\n    }\n  }]);\n  return SerialDifferencingAggregation;\n}(PipelineAggregationBase);\n\nmodule.exports = SerialDifferencingAggregation;","map":null,"metadata":{},"sourceType":"script"}