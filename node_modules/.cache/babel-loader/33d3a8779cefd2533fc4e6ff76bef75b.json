{"ast":null,"code":"var _jsxFileName = \"/home/meric/elastic/src/App.js\";\nimport React, { Component } from \"react\";\nimport './App.css';\nimport SplitterLayout from 'react-splitter-layout';\nimport 'react-splitter-layout/lib/index.css';\nimport Panel from 'muicss/lib/react/panel';\nimport DynamicForm from './components/dynamicForm/dynamicForm';\nimport myJson from './datatypes.json';\nimport txt from './datatypes.txt';\nimport json from './config/simple.json';\nvar formJson = {\n  \"name\": \"ABCz Form\",\n  \"fields\": []\n};\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.submitHandler = event => {\n      let json = JSON.stringify(event, null, 4);\n      console.log(json);\n    };\n\n    this.state = {\n      form: formJson\n    };\n  }\n\n  componentWillMount() {\n    fetch(txt).then(r => r.text()).then(text => {\n      let myarray = text.split('\\n');\n      myarray.map((element, i) => {\n        var array = element.split(' ');\n\n        if (array.length === 4) {\n          let name = array[0];\n          name = name.replace(/_/g, ' ');\n          let type = array[1];\n          let options = array[2];\n          options = options.replace(/\\)/g, '');\n          options = options.replace(/\\(/g, '');\n          let optionsArray = options.split(',');\n          var optionData = {\n            \"options\": []\n          };\n          var data = {};\n          optionsArray.map((option, i) => {\n            optionData.options.push({\n              \"display\": option\n            });\n          });\n          data = {\n            \"id\": name,\n            \"label\": name,\n            \"description\": \"\",\n            \"type\": type,\n            \"value\": \"\",\n            \"required\": \"false\",\n            \"placeholder\": \"\",\n            \"definition\": optionData.options\n          };\n        } else if (array.length === 3) {\n          let name = array[0];\n          name = name.replace(/_/g, ' ');\n          let type = array[1];\n          data = {\n            \"id\": name,\n            \"label\": name,\n            \"description\": \"\",\n            \"type\": type,\n            \"value\": \"\",\n            \"required\": \"false\",\n            \"placeholder\": \"\"\n          };\n        } //console.log(data);\n\n\n        formJson.fields.push(data); //console.log(formJson);\n      });\n      this.setState({\n        form: formJson\n      });\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(SplitterLayout, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, \"Build a Query !\", React.createElement(DynamicForm, {\n      id: \"form\",\n      config: this.state.form,\n      onSubmit: event => this.submitHandler(event),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(Panel, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, \"sdknsdjsk\"))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/meric/elastic/src/App.js"],"names":["React","Component","SplitterLayout","Panel","DynamicForm","myJson","txt","json","formJson","App","constructor","props","submitHandler","event","JSON","stringify","console","log","state","form","componentWillMount","fetch","then","r","text","myarray","split","map","element","i","array","length","name","replace","type","options","optionsArray","optionData","data","option","push","fields","setState","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport './App.css';\nimport SplitterLayout from 'react-splitter-layout';\nimport 'react-splitter-layout/lib/index.css';\nimport Panel from 'muicss/lib/react/panel';\nimport DynamicForm from './components/dynamicForm/dynamicForm';\nimport myJson from './datatypes.json';\nimport txt from './datatypes.txt';\nimport json from './config/simple.json'\n\n\n\nvar formJson = {\n  \"name\": \"ABCz Form\",\n  \"fields\": []\n};\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {form: formJson};\n\n  };\n\n\nsubmitHandler = (event) => {\n  let json = JSON.stringify(event, null, 4);\n  console.log(json);\n}\n\ncomponentWillMount() {\n\n  fetch(txt)\n    .then((r) => r.text())\n    .then(text => {\n      let myarray = text.split('\\n');\n\n      myarray.map((element, i) => {\n\n        var array = element.split(' ');\n\n        if (array.length === 4) {\n\n          let name = array[0];\n          name = name.replace(/_/g, ' ');\n          let type = array[1];\n          let options = array[2];\n          options = options.replace(/\\)/g, '');\n          options = options.replace(/\\(/g, '');\n          let optionsArray = options.split(',');\n\n          var optionData = { \"options\": [] };\n          var data = {};\n          optionsArray.map((option, i) => {\n            optionData.options.push({ \"display\": option });\n          })\n\n          data = {\n            \"id\": name,\n            \"label\": name,\n            \"description\": \"\",\n            \"type\": type,\n            \"value\": \"\",\n            \"required\": \"false\",\n            \"placeholder\": \"\",\n            \"definition\": optionData.options\n          };\n        }\n\n        else if (array.length === 3) {\n          let name = array[0];\n          name = name.replace(/_/g, ' ');\n          let type = array[1];\n\n          data = {\n            \"id\": name,\n            \"label\": name,\n            \"description\": \"\",\n            \"type\": type,\n            \"value\": \"\",\n            \"required\": \"false\",\n            \"placeholder\": \"\"\n          };\n        }\n\n        //console.log(data);\n        formJson.fields.push(data);\n        //console.log(formJson);\n\n      })\n\n      this.setState({form : formJson});\n    })\n}\n\nrender() {\n  return (\n    <div className=\"App\">\n\n      <SplitterLayout>\n        <div>Build a Query !\n            <DynamicForm id=\"form\" config={this.state.form} onSubmit={(event) => this.submitHandler(event)}></DynamicForm>\n        </div>\n        <div>\n          <Panel>\n            {\"sdknsdjsk\"}\n          </Panel>\n        </div>\n      </SplitterLayout>\n\n    </div>\n  );\n}\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}