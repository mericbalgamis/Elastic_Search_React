{"ast":null,"code":"'use strict';\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar _require = require('../../core'),\n    Query = _require.Query;\n/**\n * Interface-like class used to group and identify various implementations of Span queries.\n *\n * **NOTE:** Instantiating this directly should not be required.\n * However, if you wish to add a custom implementation for whatever reason,\n * this class could be extended.\n *\n * @extends Query\n */\n\n\nvar SpanQueryBase = function (_Query) {\n  (0, _inherits3.default)(SpanQueryBase, _Query);\n\n  function SpanQueryBase() {\n    (0, _classCallCheck3.default)(this, SpanQueryBase);\n    return (0, _possibleConstructorReturn3.default)(this, (SpanQueryBase.__proto__ || Object.getPrototypeOf(SpanQueryBase)).apply(this, arguments));\n  }\n\n  return SpanQueryBase;\n}(Query);\n\nmodule.exports = SpanQueryBase;","map":null,"metadata":{},"sourceType":"script"}