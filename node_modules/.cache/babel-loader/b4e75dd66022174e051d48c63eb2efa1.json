{"ast":null,"code":"'use strict';\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar isObject = require('lodash.isobject');\n\nvar isNil = require('lodash.isnil');\n\nvar _require = require('./util'),\n    checkType = _require.checkType;\n/**\n * A `GeoPoint` object that can be used in queries and filters that\n * take a `GeoPoint`.  `GeoPoint` supports various input formats.\n *\n * [Elasticsearch reference](https://www.elastic.co/guide/en/elasticsearch/reference/current/geo-point.html)\n */\n\n\nvar GeoPoint = function () {\n  // eslint-disable-next-line require-jsdoc\n  function GeoPoint() {\n    (0, _classCallCheck3.default)(this, GeoPoint); // Take optional parameter and call appropriate method?\n    // Will have to check for string, object and array.\n    // this will be set depending on subsequent method called\n\n    this._point = null;\n  }\n  /**\n   * Print warning message to console namespaced by class name.\n   *\n   * @param {string} msg\n   * @private\n   */\n\n\n  (0, _createClass3.default)(GeoPoint, [{\n    key: '_warn',\n    value: function _warn(msg) {\n      console.warn('[GeoPoint] ' + msg);\n    }\n    /**\n     * Print warning messages to not mix Geo Point representations\n     * @private\n     */\n\n  }, {\n    key: '_warnMixedRepr',\n    value: function _warnMixedRepr() {\n      this._warn('Do not mix with other representation!');\n\n      this._warn('Overwriting.');\n    }\n    /**\n     * Check the instance for object representation of Geo Point.\n     * If representation is null, new object is initialised.\n     * If it is not null, warning is logged and point is overwritten.\n     * @private\n     */\n\n  }, {\n    key: '_checkObjRepr',\n    value: function _checkObjRepr() {\n      if (isNil(this._point)) this._point = {};else if (!isObject(this._point)) {\n        this._warnMixedRepr();\n\n        this._point = {};\n      }\n    }\n    /**\n     * Sets the latitude for the object representation.\n     *\n     * @param {number} lat Latitude\n     * @returns {GeoPoint} returns `this` so that calls can be chained\n     */\n\n  }, {\n    key: 'lat',\n    value: function lat(_lat) {\n      this._checkObjRepr();\n\n      this._point.lat = _lat;\n      return this;\n    }\n    /**\n     * Sets the longitude for the object representation.\n     *\n     * @param {number} lon Longitude\n     * @returns {GeoPoint} returns `this` so that calls can be chained\n     */\n\n  }, {\n    key: 'lon',\n    value: function lon(_lon) {\n      this._checkObjRepr();\n\n      this._point.lon = _lon;\n      return this;\n    }\n    /**\n     * Sets the Geo Point value expressed as an object,\n     * with `lat` and `lon` keys.\n     *\n     * @param {Object} point\n     * @returns {GeoPoint} returns `this` so that calls can be chained\n     * @throws {TypeError} If `point` is not an instance of object\n     */\n\n  }, {\n    key: 'object',\n    value: function object(point) {\n      checkType(point, Object);\n      !isNil(this._point) && this._warnMixedRepr();\n      this._point = point;\n      return this; // This doesn't make much sense. What else are you gonna call?\n    }\n    /**\n     * Sets the Geo Point value expressed as an array\n     * with the format: `[ lon, lat ]`.\n     *\n     * @param {Array<number>} point Array in format `[ lon, lat ]`(`GeoJson` standard)\n     * @returns {GeoPoint} returns `this` so that calls can be chained\n     * @throws {TypeError} If `point` is not an instance of Array\n     */\n\n  }, {\n    key: 'array',\n    value: function array(point) {\n      checkType(point, Array);\n      !isNil(this._point) && this._warnMixedRepr();\n      this._point = point;\n      return this; // This doesn't make much sense. What else are you gonna call?\n    }\n    /**\n     * Sets Geo-point expressed as a string with the format: `\"lat,lon\"`\n     * or as a geo hash\n     *\n     * @param {string} point\n     * @returns {GeoPoint} returns `this` so that calls can be chained\n     */\n\n  }, {\n    key: 'string',\n    value: function string(point) {\n      !isNil(this._point) && this._warnMixedRepr();\n      this._point = point;\n      return this;\n    }\n    /**\n     * Override default `toJSON` to return DSL representation for the `GeoPoint`\n     *\n     * @override\n     * @returns {Object} returns an Object which maps to the elasticsearch query DSL\n     */\n\n  }, {\n    key: 'toJSON',\n    value: function toJSON() {\n      return this._point;\n    }\n  }]);\n  return GeoPoint;\n}();\n\nmodule.exports = GeoPoint;","map":null,"metadata":{},"sourceType":"script"}