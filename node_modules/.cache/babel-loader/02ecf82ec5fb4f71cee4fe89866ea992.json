{"ast":null,"code":"import _objectSpread from \"/home/meric/elastic/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/home/meric/elastic/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/meric/elastic/src/components/dynamicField/dynamicField.jsx\";\nimport React, { useReducer } from 'react';\nimport PropTypes from 'prop-types';\n\nconst DynamicField = props => {\n  // eslint-disable-next-line\n  const _useReducer = useReducer((state, newState) => _objectSpread({}, state, newState), {}),\n        _useReducer2 = _slicedToArray(_useReducer, 2),\n        InputValue = _useReducer2[0],\n        setInputValue = _useReducer2[1];\n\n  const onChange = event => {\n    const target = event.target,\n          name = event.name;\n    let value = undefined;\n\n    switch (target.type) {\n      case 'checkbox':\n        value = target.checked;\n        break;\n\n      case 'select-multiple':\n        value = [...target.selectedOptions].map(x => x.value);\n        break;\n\n      default:\n        value = target.value;\n        break;\n    }\n\n    setInputValue({\n      [name]: value\n    });\n    props.onChange(value);\n  };\n\n  const fieldSelector = props => {\n    switch (props.type) {\n      case 'text':\n        return React.createElement(\"label\", {\n          htmlFor: props.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 32\n          },\n          __self: this\n        }, props.label, React.createElement(\"input\", {\n          name: props.id,\n          type: props.type,\n          onChange: onChange,\n          className: \"form-control\",\n          \"aria-describedby\": props.id,\n          placeholder: props.placeholder,\n          required: props.required === \"true\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 33\n          },\n          __self: this\n        }), React.createElement(\"small\", {\n          id: props.id,\n          className: \"form-text text-muted\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 41\n          },\n          __self: this\n        }, props.description));\n\n      case 'date':\n      case 'datetime-local':\n      case 'time':\n      case 'number':\n      default:\n        return React.createElement(\"label\", {\n          htmlFor: props.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50\n          },\n          __self: this\n        }, props.label, React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 51\n          },\n          __self: this\n        }, React.createElement(\"input\", {\n          name: props.id,\n          type: props.type,\n          onChange: onChange,\n          className: \"form-control1\",\n          \"aria-describedby\": props.id,\n          placeholder: props.placeholder,\n          required: props.required === \"true\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 52\n          },\n          __self: this\n        }), React.createElement(\"small\", {\n          id: props.id,\n          className: \"form-text text-muted\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60\n          },\n          __self: this\n        }, props.description), React.createElement(\"input\", {\n          name: props.id,\n          type: props.type,\n          onChange: onChange,\n          className: \"form-control2\",\n          \"aria-describedby\": props.id,\n          placeholder: props.placeholder,\n          required: props.required === \"true\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 61\n          },\n          __self: this\n        }), React.createElement(\"small\", {\n          id: props.id,\n          className: \"form-text text-muted\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 69\n          },\n          __self: this\n        }, props.description)));\n\n      case 'checkbox':\n        return React.createElement(\"div\", {\n          className: \"form-check\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77\n          },\n          __self: this\n        }, React.createElement(\"input\", {\n          type: \"checkbox\",\n          className: \"form-check-input\",\n          name: props.id,\n          required: props.required === \"true\",\n          onChange: onChange,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78\n          },\n          __self: this\n        }), React.createElement(\"label\", {\n          className: \"form-check-label\",\n          htmlFor: props.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 79\n          },\n          __self: this\n        }, props.label));\n\n      case 'array':\n        return React.createElement(\"label\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 84\n          },\n          __self: this\n        }, props.label, React.createElement(\"select\", {\n          className: \"form-control\",\n          name: props.id,\n          required: props.required === \"true\",\n          onChange: onChange,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86\n          },\n          __self: this\n        }, React.createElement(\"option\", {\n          value: \"0\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 87\n          },\n          __self: this\n        }), props.definition.options.map((option, i) => {\n          return React.createElement(\"option\", {\n            key: i,\n            value: option.id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 89\n            },\n            __self: this\n          }, option.display);\n        })), React.createElement(\"small\", {\n          id: props.id,\n          className: \"form-text text-muted\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92\n          },\n          __self: this\n        }, props.description));\n\n      case 'multi-array':\n        return React.createElement(\"label\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97\n          },\n          __self: this\n        }, props.label, React.createElement(\"select\", {\n          multiple: true,\n          className: \"form-control\",\n          required: props.required === \"true\",\n          name: props.id,\n          onChange: onChange,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99\n          },\n          __self: this\n        }, props.definition.options.map((option, i) => {\n          return React.createElement(\"option\", {\n            key: i,\n            value: option.id,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 101\n            },\n            __self: this\n          }, option.display);\n        })), React.createElement(\"small\", {\n          id: props.id,\n          className: \"form-text text-muted\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 104\n          },\n          __self: this\n        }, props.description));\n    }\n  };\n\n  return React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, fieldSelector(props));\n};\n\nDynamicField.propTypes = {\n  id: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n  definition: PropTypes.object,\n  required: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n  label: PropTypes.string.isRequired,\n  placeHolder: PropTypes.string\n};\nexport default DynamicField;","map":{"version":3,"sources":["/home/meric/elastic/src/components/dynamicField/dynamicField.jsx"],"names":["React","useReducer","PropTypes","DynamicField","props","state","newState","InputValue","setInputValue","onChange","event","target","name","value","undefined","type","checked","selectedOptions","map","x","fieldSelector","id","label","placeholder","required","description","definition","options","option","i","display","propTypes","string","isRequired","object","oneOfType","bool","placeHolder"],"mappings":"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","sourcesContent":["import React, {useReducer} from 'react';\nimport PropTypes from 'prop-types';\n\nconst DynamicField = props => {\n    // eslint-disable-next-line\n    const [InputValue, setInputValue] = useReducer((state, newState) => ({...state, ...newState}), {});\n\n    const onChange = event => {\n        const { target, name } = event;\n\n        let value = undefined;\n        switch (target.type) {\n            case 'checkbox':\n                value = target.checked\n                break;\n            case 'select-multiple':\n                value = [...target.selectedOptions].map(x => x.value)\n                break;\n            default:\n                value = target.value;\n                break;\n        }\n        \n        setInputValue({[name]: value});\n        props.onChange(value);\n    }\n\n    const fieldSelector = props => {\n        switch (props.type) {\n            case 'text':\n                    return (\n                        <label htmlFor={props.id}>{props.label}\n                            <input\n                                name={props.id}\n                                type={props.type}\n                                onChange={onChange}\n                                className=\"form-control\"\n                                aria-describedby={props.id}\n                                placeholder={props.placeholder}\n                                required={props.required === \"true\"} />\n                            <small id={props.id} className=\"form-text text-muted\">{props.description}</small>\n                            </label>\n                )\n            case 'date':\n            case 'datetime-local':\n            case 'time':\n            case 'number':\n            default:\n                    return (\n                        <label htmlFor={props.id}>{props.label}\n                        <div>\n                            <input\n                                name={props.id}\n                                type={props.type}\n                                onChange={onChange}\n                                className=\"form-control1\"\n                                aria-describedby={props.id}\n                                placeholder={props.placeholder}\n                                required={props.required === \"true\"} />\n                            <small id={props.id} className=\"form-text text-muted\">{props.description}</small>\n                            <input\n                                name={props.id}\n                                type={props.type}\n                                onChange={onChange}\n                                className=\"form-control2\"\n                                aria-describedby={props.id}\n                                placeholder={props.placeholder}\n                                required={props.required === \"true\"} />\n                            <small id={props.id} className=\"form-text text-muted\">{props.description}</small>\n                            </div>\n                        </label>\n                    )\n    \n              \n\n            case 'checkbox': return (\n                <div className=\"form-check\">\n                    <input type=\"checkbox\" className=\"form-check-input\" name={props.id} required={props.required === \"true\"} onChange={onChange} />\n                    <label className=\"form-check-label\" htmlFor={props.id}>{props.label}</label>\n                </div>\n            )\n\n            case 'array': return (\n                <label>\n                    {props.label}\n                    <select className=\"form-control\" name={props.id} required={props.required === \"true\"} onChange={onChange}>\n                        <option value=\"0\"></option>\n                        {props.definition.options.map((option, i) => {\n                            return <option key={i} value={option.id}>{option.display}</option>\n                        })}\n                    </select>\n                    <small id={props.id} className=\"form-text text-muted\">{props.description}</small>\n                </label>\n            )\n\n            case 'multi-array': return (\n                <label>\n                    {props.label}\n                    <select multiple={true} className=\"form-control\" required={props.required === \"true\"} name={props.id} onChange={onChange}>\n                        {props.definition.options.map((option, i) => {\n                            return <option key={i} value={option.id}>{option.display}</option>\n                        })}\n                    </select>\n                    <small id={props.id} className=\"form-text text-muted\">{props.description}</small>\n                </label>\n            )\n        }\n    }\n\n    return (\n        <div className=\"form-group\">\n            {fieldSelector(props)}\n        </div>\n    )\n}\n\nDynamicField.propTypes = {\n    id: PropTypes.string.isRequired,\n    type: PropTypes.string.isRequired,\n    definition: PropTypes.object,\n    required: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n    label: PropTypes.string.isRequired,\n    placeHolder: PropTypes.string\n};\n\nexport default DynamicField;\n"]},"metadata":{},"sourceType":"module"}