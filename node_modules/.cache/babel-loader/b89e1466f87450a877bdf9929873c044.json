{"ast":null,"code":"'use strict';\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar RangeAggregationBase = require('./range-aggregation-base');\n/**\n * A multi-bucket value source based aggregation that enables the user to\n * define a set of ranges - each representing a bucket. During the aggregation\n * process, the values extracted from each document will be checked against each\n * bucket range and \"bucket\" the relevant/matching document.\n *\n * Note that this aggregration includes the from value and excludes the to\n * value for each range.\n *\n * [Elasticsearch reference](https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-range-aggregation.html)\n *\n * @example\n * const agg = esb.rangeAggregation('price_ranges', 'price').ranges([\n *     { to: 50 },\n *     { from: 50, to: 100 },\n *     { from: 100 }\n * ]);\n *\n * @example\n * const agg = esb.rangeAggregation('price_ranges')\n *     .script(esb.script('inline', \"doc['price'].value\").lang('painless'))\n *     .ranges([{ to: 50 }, { from: 50, to: 100 }, { from: 100 }]);\n *\n * @example\n * // Value script for on-the-fly conversion before aggregation\n * const agg = esb.rangeAggregation('price_ranges', 'price')\n *     .script(\n *         esb.script('inline', '_value * params.conversion_rate')\n *             .lang('painless')\n *             .params({ conversion_rate: 0.8 })\n *     )\n *     .ranges([{ to: 50 }, { from: 50, to: 100 }, { from: 100 }]);\n *\n * @example\n * // Compute statistics over the prices in each price range\n * const agg = esb.rangeAggregation('price_ranges', 'price')\n *     .ranges([{ to: 50 }, { from: 50, to: 100 }, { from: 100 }])\n *     // Passing price to Stats Aggregation is optional(same value source)\n *     .agg(esb.statsAggregation('price_stats', 'price'));\n *\n * @param {string} name The name which will be used to refer to this aggregation.\n * @param {string=} field The field to aggregate on\n *\n * @extends RangeAggregationBase\n */\n\n\nvar RangeAggregation = function (_RangeAggregationBase) {\n  (0, _inherits3.default)(RangeAggregation, _RangeAggregationBase); // eslint-disable-next-line require-jsdoc\n\n  function RangeAggregation(name, field) {\n    (0, _classCallCheck3.default)(this, RangeAggregation);\n    return (0, _possibleConstructorReturn3.default)(this, (RangeAggregation.__proto__ || Object.getPrototypeOf(RangeAggregation)).call(this, name, 'range', field));\n  }\n\n  return RangeAggregation;\n}(RangeAggregationBase);\n\nmodule.exports = RangeAggregation;","map":null,"metadata":{},"sourceType":"script"}