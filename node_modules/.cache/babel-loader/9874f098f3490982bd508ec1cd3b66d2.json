{"ast":null,"code":"'use strict';\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar MetricsAggregationBase = require('./metrics-aggregation-base');\n\nvar ES_REF_URL = 'https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-metrics-cardinality-aggregation.html';\n/**\n * A single-value metrics aggregation that calculates an approximate count of\n * distinct values. Values can be extracted either from specific fields in the\n * document or generated by a script.\n *\n * [Elasticsearch reference](https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-metrics-cardinality-aggregation.html)\n *\n * Aggregation that calculates an approximate count of distinct values.\n *\n * @example\n * const agg = esb.cardinalityAggregation('author_count', 'author');\n *\n * @example\n * const agg = esb.cardinalityAggregation('author_count').script(\n *     esb.script(\n *         'inline',\n *         \"doc['author.first_name'].value + ' ' + doc['author.last_name'].value\"\n *     ).lang('painless')\n * );\n *\n * @param {string} name The name which will be used to refer to this aggregation.\n * @param {string=} field The field to aggregate on\n *\n * @extends MetricsAggregationBase\n */\n\nvar CardinalityAggregation = function (_MetricsAggregationBa) {\n  (0, _inherits3.default)(CardinalityAggregation, _MetricsAggregationBa); // eslint-disable-next-line require-jsdoc\n\n  function CardinalityAggregation(name, field) {\n    (0, _classCallCheck3.default)(this, CardinalityAggregation);\n    return (0, _possibleConstructorReturn3.default)(this, (CardinalityAggregation.__proto__ || Object.getPrototypeOf(CardinalityAggregation)).call(this, name, 'cardinality', field));\n  }\n  /**\n   * @override\n   * @throws {Error} This method cannot be called on CardinalityAggregation\n   */\n\n\n  (0, _createClass3.default)(CardinalityAggregation, [{\n    key: 'format',\n    value: function format() {\n      // Not 100% sure about this.\n      console.log('Please refer ' + ES_REF_URL);\n      throw new Error('format is not supported in CardinalityAggregation');\n    }\n    /**\n     * The `precision_threshold` options allows to trade memory for accuracy,\n     * and defines a unique count below which counts are expected to be close to accurate.\n     *\n     * @example\n     * const agg = esb.cardinalityAggregation(\n     *     'author_count',\n     *     'author_hash'\n     * ).precisionThreshold(100);\n     *\n     * @param {number} threshold The threshold value.\n     * The maximum supported value is 40000, thresholds above this number\n     * will have the same effect as a threshold of 40000. The default values is 3000.\n     * @returns {CardinalityAggregation} returns `this` so that calls can be chained\n     */\n\n  }, {\n    key: 'precisionThreshold',\n    value: function precisionThreshold(threshold) {\n      // TODO: Use validation and warning here\n      this._aggsDef.precision_threshold = threshold;\n      return this;\n    }\n  }]);\n  return CardinalityAggregation;\n}(MetricsAggregationBase);\n\nmodule.exports = CardinalityAggregation;","map":null,"metadata":{},"sourceType":"script"}