{"ast":null,"code":"'use strict';\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar RangeAggregationBase = require('./range-aggregation-base');\n/**\n * A range aggregation that is dedicated for date values. The main difference\n * between this aggregation and the normal range aggregation is that the from\n * and to values can be expressed in Date Math expressions, and it is also\n * possible to specify a date format by which the from and to response fields\n * will be returned.\n *\n * [Elasticsearch reference](https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-daterange-aggregation.html)\n *\n * @example\n * const agg = esb.dateRangeAggregation('range', 'date')\n *     .format('MM-yyy')\n *     .ranges([{ to: 'now-10M/M' }, { from: 'now-10M/M' }]);\n *\n * @param {string} name The name which will be used to refer to this aggregation.\n * @param {string=} field The field to aggregate on\n *\n * @extends RangeAggregationBase\n */\n\n\nvar DateRangeAggregation = function (_RangeAggregationBase) {\n  (0, _inherits3.default)(DateRangeAggregation, _RangeAggregationBase); // eslint-disable-next-line require-jsdoc\n\n  function DateRangeAggregation(name, field) {\n    (0, _classCallCheck3.default)(this, DateRangeAggregation);\n    return (0, _possibleConstructorReturn3.default)(this, (DateRangeAggregation.__proto__ || Object.getPrototypeOf(DateRangeAggregation)).call(this, name, 'date_range', field));\n  }\n  /**\n   * Sets the date time zone.\n   * Date-times are stored in Elasticsearch in UTC.\n   * By default, all bucketing and rounding is also done in UTC.\n   * The `time_zone` parameter can be used to indicate that\n   * bucketing should use a different time zone.\n   *\n   * @example\n   * const agg = esb.dateRangeAggregation('range', 'date')\n   *     .timeZone('CET')\n   *     .ranges([\n   *         { to: '2016/02/01' },\n   *         { from: '2016/02/01', to: 'now/d' },\n   *         { from: 'now/d' }\n   *     ]);\n   *\n   * @param {string} tz Time zone. Time zones may either be specified\n   * as an ISO 8601 UTC offset (e.g. +01:00 or -08:00) or as a timezone id,\n   * an identifier used in the TZ database like America/Los_Angeles.\n   * @returns {DateRangeAggregation} returns `this` so that calls can be chained\n   */\n\n\n  (0, _createClass3.default)(DateRangeAggregation, [{\n    key: 'timeZone',\n    value: function timeZone(tz) {\n      this._aggsDef.time_zone = tz;\n      return this;\n    }\n  }]);\n  return DateRangeAggregation;\n}(RangeAggregationBase);\n\nmodule.exports = DateRangeAggregation;","map":null,"metadata":{},"sourceType":"script"}