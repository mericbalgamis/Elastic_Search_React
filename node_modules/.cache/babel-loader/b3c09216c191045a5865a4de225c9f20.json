{"ast":null,"code":"var _jsxFileName = \"/Users/edabalaban/bil476_projeyle_ilgili/Elastic_Search_React/src/App.js\";\nimport React, { Component } from \"react\";\nimport './App.css';\nimport SplitterLayout from 'react-splitter-layout';\nimport 'react-splitter-layout/lib/index.css';\nimport Panel from 'muicss/lib/react/panel';\nimport DynamicForm from './components/dynamicForm/dynamicForm';\nimport myJson from './datatypes.json';\nimport txt from './datatypes.txt';\nimport txt_output from './datatypes_output.txt';\nimport json from './config/simple.json';\nimport axios from 'axios';\nimport JSONPretty from 'react-json-pretty';\nimport { github } from 'react-json-pretty/themes/monikai.css';\nimport queryBuilder, { filtersAggregation } from 'elastic-builder'; //const elasticsearch = require('elastic-search');\n//const esb = require('elastic-builder');\n\nvar formJson = {\n  \"name\": \"ABCz Form\",\n  \"fields\": []\n};\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.submitHandler = event => {\n      let json = JSON.stringify(event, null, 4);\n      this.generateQuery(json); //console.log(json);\n    };\n\n    this.removeEmptyFields = (requestBody, name, field) => {\n      if (field == \"filter\") {\n        //console.log(requestBody._body.query._body.bool.filter.length)\n        for (var i = 0; i < requestBody._body.query._body.bool.filter.length; i++) {\n          //console.log(requestBody._body.query._body.bool.filter[i]._field)\n          //requestBody._body.query._body.bool.filter.splice(i, 1)\n          //console.log(name+\" \"+requestBody._body.query._body.bool.filter[i]._field)\n          if (requestBody._body.query._body.bool.filter[i]._field.includes(name.replace(/ /g, '_'))) {\n            requestBody._body.query._body.bool.filter.splice(i, 1);\n          }\n        }\n      } else if (field == \"must\") {\n        for (var i = 0; i < requestBody._body.query._body.bool.must.length; i++) {\n          //console.log(requestBody._body.query._body.bool.filter[i]._field)\n          //requestBody._body.query._body.bool.filter.splice(i, 1)\n          //requestBody._body.query._body.bool.filter[i]._field\n          if (requestBody._body.query._body.bool.must[i]._field.includes(name.replace(/ /g, '_'))) {\n            requestBody._body.query._body.bool.must.splice(i, 1);\n          }\n        }\n\n        return requestBody;\n      }\n    };\n\n    this.generateQuery = formResults => {\n      var form = JSON.parse(formResults); // Bool query\n\n      const requestBody = queryBuilder.requestBodySearch().query(queryBuilder.boolQuery().must(queryBuilder.matchQuery(\"studies.DCMs.\" + form.data[0].name.replace(/ /g, '_') + \".Value\", form.data[0].value)).filter(queryBuilder.rangeQuery(\"studies.DCMs.\" + form.data[1].name.replace(/ /g, '_') + \".Value\").gt(form.data[1].value).lte(form.data[2].value)).filter(queryBuilder.rangeQuery(\"studies.DCMs.\" + form.data[3].name.replace(/ /g, '_') + \".Value\").gt(form.data[3].value).lte(form.data[4].value)).must(queryBuilder.matchQuery(\"studies.DCMs.\" + form.data[5].name.replace(/ /g, '_') + \".Value\", form.data[5].value)).must(queryBuilder.matchQuery(\"studies.DCMs.\" + form.data[6].name.replace(/ /g, '_') + \".Value\", form.data[6].value)).filter(queryBuilder.rangeQuery(\"studies.DCMs.\" + form.data[7].name.replace(/ /g, '_') + \".Value\").gt(form.data[7].value).lte(form.data[8].value)).filter(queryBuilder.rangeQuery(\"studies.DCMs.\" + form.data[9].name.replace(/ /g, '_') + \".Value\").gt(form.data[9].value).lte(form.data[10].value)).filter(queryBuilder.rangeQuery(\"studies.DCMs.\" + form.data[11].name.replace(/ /g, '_') + \".Value\").gt(form.data[11].value).lte(form.data[12].value)).filter(queryBuilder.rangeQuery(\"studies.DCMs.\" + form.data[13].name.replace(/ /g, '_') + \".Value\").gt(form.data[13].value).lte(form.data[14].value)).must(queryBuilder.matchQuery(\"studies.DCMs.\" + form.data[15].name.replace(/ /g, '_') + \".Value\", form.data[15].value)));\n      let requestBodyUpdated;\n\n      for (var i = 0; i <= form.data.length - 1; i++) {\n        if (i != form.data.length - 1 && form.data[i].name == form.data[i + 1].name) {\n          if (form.data[i].value == \"\") {\n            requestBodyUpdated = this.removeEmptyFields(requestBody, form.data[i].name, \"filter\"); //requestBody._body.query._body.bool.filter.splice(i,1)\n          }\n\n          i++;\n        } else if (i == form.data.length) {\n          if (form.data[i].value == \"\") {\n            requestBodyUpdated = this.removeEmptyFields(requestBody, form.data[i].name, \"must\"); //requestBody._body.query._body.bool.must.splice(i, 1);\n          }\n        } else {\n          if (form.data[i].value == \"\") {\n            requestBodyUpdated = this.removeEmptyFields(requestBody, form.data[i].name, \"must\");\n          } //requestBody._body.query._body.bool.must.splice(i, 1);\n\n        }\n      } // formu gezerek boş olan alanları request body den çıkarmak gerekiyor.\n\n      /*\n      // Bool query\n      const requestBody = queryBuilder.requestBodySearch().query(\n      queryBuilder.boolQuery()\n        .must(queryBuilder.matchQuery(\"DCMs.\"+form.data[0].name.replace(/ /g, '_')+\".Value\", form.data[0].value))\n        .must(queryBuilder.matchQuery(\"DCMs.\"+form.data[1].name.replace(/ /g, '_')+\".Value\", form.data[1].value))\n        .must(queryBuilder.matchQuery(\"DCMs.\"+form.data[2].name.replace(/ /g, '_')+\".Value\", form.data[2].value))\n        .must(queryBuilder.matchQuery(\"DCMs.\"+form.data[3].name.replace(/ /g, '_')+\".Value\", form.data[3].value))\n        .must(queryBuilder.matchQuery(\"DCMs.\"+form.data[4].name.replace(/ /g, '_')+\".Value\", form.data[4].value))\n      );\n      console.log(requestBody.toJSON())\n      for (var i = form.data.length - 1; i >= 0; i--) {\n        if (form.data[i].value == \"\" && ) {\n          //console.log(i)\n          requestBody._body.query._body.bool.must.splice(i, 1);\n          //console.log(query)\n        }\n      }*/\n\n\n      console.log(requestBodyUpdated);\n      this.sendRequest(JSON.stringify(requestBodyUpdated));\n      /*\n          requestBody.toJSON();\n      \n        \"query\": {\n          \"bool\": {\n            \"must\": {\n              \"match\": { \"last_name\": \"smith\" }\n            },\n            \"filter\": {\n              \"range\": { \"age\": { \"gt\": 30 } }\n            }\n          }\n        }\n      }\n      \n      // Multi Match Query\n      requestBody = queryBuilder.requestBodySearch().query(\n        queryBuilder.multiMatchQuery(['title', 'body'], 'Quick brown fox')\n          .type('best_fields')\n          .tieBreaker(0.3)\n          .minimumShouldMatch('30%')\n      );\n      \n      requestBody.toJSON();\n      {\n        \"multi_match\": {\n          \"query\": \"Quick brown fox\",\n          \"type\": \"best_fields\",\n          \"fields\": [\"title\", \"body\"],\n          \"tie_breaker\": 0.3,\n          \"minimum_should_match\": \"30%\"\n        }\n      }\n      \n      // Aggregation\n      requestBody = queryBuilder.requestBodySearch()\n        .size(0)\n        .agg(queryBuilder.termsAggregation('popular_colors', 'color'));\n      \n        \n      requestBody.toJSON();\n      {\n        \"size\": 0,\n        \"aggs\": {\n          \"popular_colors\": {\n            \"terms\": { \"field\": \"color\" }\n          }\n        }\n      }\n      \n      // Sort\n      requestBody = queryBuilder.requestBodySearch()\n        .query(queryBuilder.boolQuery().filter(queryBuilder.termQuery('message', 'test')))\n        .sort(queryBuilder.sort('timestamp', 'desc'))\n        .sorts([\n          queryBuilder.sort('channel', 'desc'),\n          queryBuilder.sort('categories', 'desc'),\n          // The order defaults to desc when sorting on the _score,\n          // and defaults to asc when sorting on anything else.\n          queryBuilder.sort('content'),\n          queryBuilder.sort('price').order('desc').mode('avg')\n        ]);\n      \n        \n      requestBody.toJSON();\n      {\n        \"query\": {\n          \"bool\": {\n            \"filter\": {\n              \"term\": { \"message\": \"test\" }\n            }\n          }\n        },\n        \"sort\": [\n          { \"timestamp\": { \"order\": \"desc\" } },\n          { \"channel\": { \"order\": \"desc\" } },\n          { \"categories\": { \"order\": \"desc\" } },\n          \"content\",\n          { \"price\": { \"order\": \"desc\", \"mode\": \"avg\" } }\n        ]\n      }\n      */\n    };\n\n    this.state = {\n      form: formJson,\n      response: 'jghf'\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n    axios.get().then(res => {\n      this.setState({\n        todo: res.data\n      });\n    });\n  }\n\n  sendRequest(requestBody) {\n    //console.log(\"handleclick\")\n    var panel = document.getElementById(\"resultPanel\");\n    console.log(\"requestBody: \" + requestBody);\n    fetch('http://127.0.0.1:5000/query', {\n      method: \"POST\",\n      //Request Type \n      body: requestBody,\n      //post body \n      headers: {\n        //Header Defination \n        'Content-Type': 'application/json'\n      }\n    }).then(response => response.json()) //If response is in json then in success\n    .then(responseJson => {\n      //alert(JSON.stringify(responseJson));\n      console.log(responseJson);\n      const json = JSON.stringify(responseJson, null, 4);\n      this.setState({\n        response: json\n      });\n    }) //If response is not in json then in error \n    .catch(error => {\n      alert(JSON.stringify(error)); //console.error(error);\n    });\n  }\n\n  componentWillMount() {\n    fetch(txt).then(r => r.text()).then(text => {\n      let myarray = text.split('\\n');\n      let dataArray = myarray.map((element, i) => {\n        var array = element.split(' ');\n\n        if (array.length === 4) {\n          let name = array[0];\n          name = name.replace(/_/g, ' ');\n          let type = array[1];\n          let options = array[2];\n          options = options.replace(/\\)/g, '');\n          options = options.replace(/\\(/g, '');\n          let optionsArray = options.split(',');\n          var optionData = {\n            \"options\": []\n          };\n          var data = {};\n          optionsArray.map((option, i) => {\n            optionData.options.push({\n              \"display\": option\n            });\n          });\n          return {\n            \"id\": name,\n            \"label\": name,\n            \"description\": \"\",\n            \"type\": type,\n            \"value\": \"\",\n            \"required\": \"false\",\n            \"placeholder\": \"\",\n            \"definition\": optionData\n          };\n        } else if (array.length === 3) {\n          let name = array[0];\n          name = name.replace(/_/g, ' ');\n          let type = array[1];\n          return {\n            \"id\": name,\n            \"label\": name,\n            \"description\": \"\",\n            \"type\": type,\n            \"value\": \"\",\n            \"required\": \"false\",\n            \"placeholder\": \"\"\n          };\n        }\n      });\n      this.setState({\n        form: {\n          fields: dataArray\n        }\n      });\n      console.log(dataArray);\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 352\n      },\n      __self: this\n    }, React.createElement(SplitterLayout, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 354\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 355\n      },\n      __self: this\n    }, \"Build a Query !\", React.createElement(DynamicForm, {\n      id: \"form\",\n      config: this.state.form,\n      onSubmit: event => this.submitHandler(event),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361\n      },\n      __self: this\n    }, React.createElement(Panel, {\n      id: \"resultPanel\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362\n      },\n      __self: this\n    }, React.createElement(JSONPretty, {\n      json: this.state.response,\n      theme: github,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/edabalaban/bil476_projeyle_ilgili/Elastic_Search_React/src/App.js"],"names":["React","Component","SplitterLayout","Panel","DynamicForm","myJson","txt","txt_output","json","axios","JSONPretty","github","queryBuilder","filtersAggregation","formJson","App","constructor","props","submitHandler","event","JSON","stringify","generateQuery","removeEmptyFields","requestBody","name","field","i","_body","query","bool","filter","length","_field","includes","replace","splice","must","formResults","form","parse","requestBodySearch","boolQuery","matchQuery","data","value","rangeQuery","gt","lte","requestBodyUpdated","console","log","sendRequest","state","response","handleClick","bind","get","then","res","setState","todo","panel","document","getElementById","fetch","method","body","headers","responseJson","catch","error","alert","componentWillMount","r","text","myarray","split","dataArray","map","element","array","type","options","optionsArray","optionData","option","push","fields","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport './App.css';\nimport SplitterLayout from 'react-splitter-layout';\nimport 'react-splitter-layout/lib/index.css';\nimport Panel from 'muicss/lib/react/panel';\nimport DynamicForm from './components/dynamicForm/dynamicForm';\nimport myJson from './datatypes.json';\nimport txt from './datatypes.txt';\nimport txt_output from './datatypes_output.txt';\nimport json from './config/simple.json';\nimport axios from 'axios';\nimport JSONPretty from 'react-json-pretty';\nimport { github } from 'react-json-pretty/themes/monikai.css';\n\nimport queryBuilder, { filtersAggregation } from 'elastic-builder';\n\n\n//const elasticsearch = require('elastic-search');\n//const esb = require('elastic-builder');\n\n\nvar formJson = {\n  \"name\": \"ABCz Form\",\n  \"fields\": []\n};\n\nclass App extends Component {\n\n  constructor(props) {\n\n    super(props);\n    this.state = {\n\n      form: formJson,\n      response: 'jghf'\n    }\n    this.handleClick = this.handleClick.bind(this)\n  }\n\n  handleClick() {\n    axios.get()\n      .then(res => {\n        this.setState({\n          todo: res.data\n        })\n      })\n  }\n\n  sendRequest(requestBody) {\n    //console.log(\"handleclick\")\n    var panel = document.getElementById(\"resultPanel\");\n    console.log(\"requestBody: \" + requestBody)\n    fetch('http://127.0.0.1:5000/query', {\n      method: \"POST\",//Request Type \n      body: requestBody,//post body \n      headers: {//Header Defination \n        'Content-Type': 'application/json',\n      },\n    })\n      .then((response) => response.json())\n      //If response is in json then in success\n      .then((responseJson) => {\n        //alert(JSON.stringify(responseJson));\n        console.log(responseJson);\n        const json=JSON.stringify(responseJson, null, 4)\n\n        \n        this.setState({\n\n            response: json\n          \n        });\n      })\n      //If response is not in json then in error \n      .catch((error) => {\n        alert(JSON.stringify(error));\n        //console.error(error);\n      });\n\n\n  }\n\n  submitHandler = (event) => {\n    let json = JSON.stringify(event, null, 4);\n    this.generateQuery(json);\n    //console.log(json);\n  }\n\n  removeEmptyFields = (requestBody, name, field) => {\n    if (field == \"filter\") {\n      //console.log(requestBody._body.query._body.bool.filter.length)\n      for (var i = 0; i < requestBody._body.query._body.bool.filter.length; i++) {\n        //console.log(requestBody._body.query._body.bool.filter[i]._field)\n        //requestBody._body.query._body.bool.filter.splice(i, 1)\n        //console.log(name+\" \"+requestBody._body.query._body.bool.filter[i]._field)\n        \n        if(requestBody._body.query._body.bool.filter[i]._field.includes(name.replace(/ /g, '_'))){\n          requestBody._body.query._body.bool.filter.splice(i,1)\n\n        }\n      }\n     \n\n    }\n    else if (field == \"must\") {\n      for (var i = 0; i < requestBody._body.query._body.bool.must.length; i++) {\n        //console.log(requestBody._body.query._body.bool.filter[i]._field)\n        //requestBody._body.query._body.bool.filter.splice(i, 1)\n        //requestBody._body.query._body.bool.filter[i]._field\n         \n        if(requestBody._body.query._body.bool.must[i]._field.includes(name.replace(/ /g, '_'))){\n          requestBody._body.query._body.bool.must.splice(i,1)\n\n        }\n      }\n      return requestBody;\n\n    }\n\n\n\n  }\n\n  generateQuery = (formResults) => {\n\n    var form = JSON.parse(formResults);\n\n    // Bool query\n    const requestBody = queryBuilder.requestBodySearch().query(\n      queryBuilder.boolQuery()\n        .must(queryBuilder.matchQuery(\"studies.DCMs.\" + form.data[0].name.replace(/ /g, '_') + \".Value\", form.data[0].value))\n        .filter(queryBuilder.rangeQuery(\"studies.DCMs.\" + form.data[1].name.replace(/ /g, '_') + \".Value\").gt(form.data[1].value).lte(form.data[2].value))\n        .filter(queryBuilder.rangeQuery(\"studies.DCMs.\" + form.data[3].name.replace(/ /g, '_') + \".Value\").gt(form.data[3].value).lte(form.data[4].value))\n        .must(queryBuilder.matchQuery(\"studies.DCMs.\" + form.data[5].name.replace(/ /g, '_') + \".Value\", form.data[5].value))\n        .must(queryBuilder.matchQuery(\"studies.DCMs.\" + form.data[6].name.replace(/ /g, '_') + \".Value\", form.data[6].value))\n        .filter(queryBuilder.rangeQuery(\"studies.DCMs.\" + form.data[7].name.replace(/ /g, '_') + \".Value\").gt(form.data[7].value).lte(form.data[8].value))\n        .filter(queryBuilder.rangeQuery(\"studies.DCMs.\" + form.data[9].name.replace(/ /g, '_') + \".Value\").gt(form.data[9].value).lte(form.data[10].value))\n        .filter(queryBuilder.rangeQuery(\"studies.DCMs.\" + form.data[11].name.replace(/ /g, '_') + \".Value\").gt(form.data[11].value).lte(form.data[12].value))\n        .filter(queryBuilder.rangeQuery(\"studies.DCMs.\" + form.data[13].name.replace(/ /g, '_') + \".Value\").gt(form.data[13].value).lte(form.data[14].value))\n        .must(queryBuilder.matchQuery(\"studies.DCMs.\" + form.data[15].name.replace(/ /g, '_') + \".Value\", form.data[15].value))\n    );\n\n   \n \n    let requestBodyUpdated;\n\n    for (var i = 0; i <= form.data.length - 1; i++) {\n\n      if (i != form.data.length - 1 && form.data[i].name == form.data[i + 1].name) {\n        if (form.data[i].value == \"\") {\n          requestBodyUpdated=this.removeEmptyFields(requestBody, form.data[i].name, \"filter\")\n          //requestBody._body.query._body.bool.filter.splice(i,1)\n        }\n        i++;\n      }\n      else if (i == form.data.length) {\n        if (form.data[i].value == \"\"){\n          requestBodyUpdated=this.removeEmptyFields(requestBody, form.data[i].name, \"must\")\n          //requestBody._body.query._body.bool.must.splice(i, 1);\n        }\n      }\n      else {\n        if (form.data[i].value == \"\"){\n          requestBodyUpdated=this.removeEmptyFields(requestBody, form.data[i].name, \"must\")\n\n        }\n          //requestBody._body.query._body.bool.must.splice(i, 1);\n      }\n    }\n\n    // formu gezerek boş olan alanları request body den çıkarmak gerekiyor.\n\n    /*\n  // Bool query\n  const requestBody = queryBuilder.requestBodySearch().query(\n    queryBuilder.boolQuery()\n      .must(queryBuilder.matchQuery(\"DCMs.\"+form.data[0].name.replace(/ /g, '_')+\".Value\", form.data[0].value))\n      .must(queryBuilder.matchQuery(\"DCMs.\"+form.data[1].name.replace(/ /g, '_')+\".Value\", form.data[1].value))\n      .must(queryBuilder.matchQuery(\"DCMs.\"+form.data[2].name.replace(/ /g, '_')+\".Value\", form.data[2].value))\n      .must(queryBuilder.matchQuery(\"DCMs.\"+form.data[3].name.replace(/ /g, '_')+\".Value\", form.data[3].value))\n      .must(queryBuilder.matchQuery(\"DCMs.\"+form.data[4].name.replace(/ /g, '_')+\".Value\", form.data[4].value))\n  );\n    console.log(requestBody.toJSON())\n    for (var i = form.data.length - 1; i >= 0; i--) {\n      if (form.data[i].value == \"\" && ) {\n        //console.log(i)\n        requestBody._body.query._body.bool.must.splice(i, 1);\n        //console.log(query)\n      }\n    }*/\n\n    console.log(requestBodyUpdated)\n    this.sendRequest(JSON.stringify(requestBodyUpdated));\n\n\n    /*\n        requestBody.toJSON();\n    \n      \"query\": {\n        \"bool\": {\n          \"must\": {\n            \"match\": { \"last_name\": \"smith\" }\n          },\n          \"filter\": {\n            \"range\": { \"age\": { \"gt\": 30 } }\n          }\n        }\n      }\n    }\n    \n    // Multi Match Query\n    requestBody = queryBuilder.requestBodySearch().query(\n      queryBuilder.multiMatchQuery(['title', 'body'], 'Quick brown fox')\n        .type('best_fields')\n        .tieBreaker(0.3)\n        .minimumShouldMatch('30%')\n    );\n    \n    requestBody.toJSON();\n    {\n      \"multi_match\": {\n        \"query\": \"Quick brown fox\",\n        \"type\": \"best_fields\",\n        \"fields\": [\"title\", \"body\"],\n        \"tie_breaker\": 0.3,\n        \"minimum_should_match\": \"30%\"\n      }\n    }\n    \n    // Aggregation\n    requestBody = queryBuilder.requestBodySearch()\n      .size(0)\n      .agg(queryBuilder.termsAggregation('popular_colors', 'color'));\n    \n      \n    requestBody.toJSON();\n    {\n      \"size\": 0,\n      \"aggs\": {\n        \"popular_colors\": {\n          \"terms\": { \"field\": \"color\" }\n        }\n      }\n    }\n    \n    // Sort\n    requestBody = queryBuilder.requestBodySearch()\n      .query(queryBuilder.boolQuery().filter(queryBuilder.termQuery('message', 'test')))\n      .sort(queryBuilder.sort('timestamp', 'desc'))\n      .sorts([\n        queryBuilder.sort('channel', 'desc'),\n        queryBuilder.sort('categories', 'desc'),\n        // The order defaults to desc when sorting on the _score,\n        // and defaults to asc when sorting on anything else.\n        queryBuilder.sort('content'),\n        queryBuilder.sort('price').order('desc').mode('avg')\n      ]);\n    \n      \n    requestBody.toJSON();\n    {\n      \"query\": {\n        \"bool\": {\n          \"filter\": {\n            \"term\": { \"message\": \"test\" }\n          }\n        }\n      },\n      \"sort\": [\n        { \"timestamp\": { \"order\": \"desc\" } },\n        { \"channel\": { \"order\": \"desc\" } },\n        { \"categories\": { \"order\": \"desc\" } },\n        \"content\",\n        { \"price\": { \"order\": \"desc\", \"mode\": \"avg\" } }\n      ]\n    }\n    */\n\n\n  }\n\n  componentWillMount() {\n\n    fetch(txt)\n      .then((r) => r.text())\n      .then(text => {\n        let myarray = text.split('\\n');\n        let dataArray = myarray.map((element, i) => {\n\n\n          var array = element.split(' ');\n\n          if (array.length === 4) {\n\n            let name = array[0];\n            name = name.replace(/_/g, ' ');\n            let type = array[1];\n            let options = array[2];\n            options = options.replace(/\\)/g, '');\n            options = options.replace(/\\(/g, '');\n            let optionsArray = options.split(',');\n\n            var optionData = { \"options\": [] };\n            var data = {};\n            optionsArray.map((option, i) => {\n              optionData.options.push({ \"display\": option });\n            })\n\n            return {\n              \"id\": name,\n              \"label\": name,\n              \"description\": \"\",\n              \"type\": type,\n              \"value\": \"\",\n              \"required\": \"false\",\n              \"placeholder\": \"\",\n              \"definition\": optionData\n            };\n\n          }\n\n          else if (array.length === 3) {\n            let name = array[0];\n            name = name.replace(/_/g, ' ');\n            let type = array[1];\n\n            return {\n              \"id\": name,\n              \"label\": name,\n              \"description\": \"\",\n              \"type\": type,\n              \"value\": \"\",\n              \"required\": \"false\",\n              \"placeholder\": \"\"\n            };\n          }\n\n        })\n\n        this.setState({\n          form: {\n            fields: dataArray\n          }\n        });\n        console.log(dataArray);\n\n      })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n\n        <SplitterLayout>\n          <div>Build a Query !\n            <DynamicForm id=\"form\" config={this.state.form} onSubmit={(event) => this.submitHandler(event)}></DynamicForm>\n\n          </div>\n\n\n          <div>\n            <Panel id=\"resultPanel\"><JSONPretty json={this.state.response} theme={github} /></Panel>\n          </div>\n        </SplitterLayout>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}