{"ast":null,"code":"'use strict';\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar isNil = require('lodash.isnil');\n\nvar _require = require('../../core'),\n    checkType = _require.util.checkType;\n\nvar _require2 = require('../term-level-queries'),\n    MultiTermQueryBase = _require2.MultiTermQueryBase;\n\nvar SpanQueryBase = require('./span-query-base');\n/**\n * The `span_multi` query allows you to wrap a `multi term query` (one of wildcard,\n * fuzzy, prefix, range or regexp query) as a `span query`, so it can be nested.\n *\n * [Elasticsearch reference](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-span-multi-term-query.html)\n *\n * @example\n * const spanQry = esb.spanMultiTermQuery()\n *     .match(esb.prefixQuery('user', 'ki').boost(1.08));\n *\n * @param {MultiTermQueryBase=} multiTermQry One of wildcard, fuzzy, prefix, range or regexp query\n *\n * @extends SpanQueryBase\n */\n\n\nvar SpanMultiTermQuery = function (_SpanQueryBase) {\n  (0, _inherits3.default)(SpanMultiTermQuery, _SpanQueryBase); // eslint-disable-next-line require-jsdoc\n\n  function SpanMultiTermQuery(multiTermQry) {\n    (0, _classCallCheck3.default)(this, SpanMultiTermQuery);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (SpanMultiTermQuery.__proto__ || Object.getPrototypeOf(SpanMultiTermQuery)).call(this, 'span_multi'));\n\n    if (!isNil(multiTermQry)) _this.match(multiTermQry);\n    return _this;\n  }\n  /**\n   * Sets the multi term query.\n   *\n   * @param {MultiTermQueryBase} multiTermQry One of wildcard, fuzzy, prefix, range or regexp query\n   * @returns {SpanMultiTermQuery} returns `this` so that calls can be chained.\n   */\n\n\n  (0, _createClass3.default)(SpanMultiTermQuery, [{\n    key: 'match',\n    value: function match(multiTermQry) {\n      checkType(multiTermQry, MultiTermQueryBase);\n      this._queryOpts.match = multiTermQry;\n      return this;\n    }\n  }]);\n  return SpanMultiTermQuery;\n}(SpanQueryBase);\n\nmodule.exports = SpanMultiTermQuery;","map":null,"metadata":{},"sourceType":"script"}