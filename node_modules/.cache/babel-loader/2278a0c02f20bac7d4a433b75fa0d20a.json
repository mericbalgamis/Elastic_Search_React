{"ast":null,"code":"'use strict';\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar PipelineAggregationBase = require('./pipeline-aggregation-base');\n\nvar ES_REF_URL = 'https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-pipeline-bucket-script-aggregation.html';\n/**\n * A parent pipeline aggregation which executes a script which can perform\n * per bucket computations on specified metrics in the parent multi-bucket\n * aggregation. The specified metric must be numeric and the script must\n * return a numeric value.\n *\n * [Elasticsearch reference](https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-pipeline-bucket-script-aggregation.html)\n *\n * @example\n * const reqBody = esb.requestBodySearch()\n *     .agg(\n *         esb.dateHistogramAggregation('sales_per_month', 'date', 'month')\n *             .agg(esb.sumAggregation('total_sales', 'price'))\n *             .agg(\n *                 esb.filterAggregation('t-shirts')\n *                     .filter(esb.termQuery('type', 't-shirt'))\n *                     .agg(esb.sumAggregation('sales', 'price'))\n *             )\n *             .agg(\n *                 esb.bucketScriptAggregation('t-shirt-percentage')\n *                     .bucketsPath({\n *                         tShirtSales: 't-shirts>sales',\n *                         totalSales: 'total_sales'\n *                     })\n *                     .script('params.tShirtSales / params.totalSales * 100')\n *             )\n *     )\n *     .size(0);\n *\n * @param {string} name The name which will be used to refer to this aggregation.\n * @param {string=} bucketsPath The relative path of metric to aggregate over\n *\n * @extends PipelineAggregationBase\n */\n\nvar BucketScriptAggregation = function (_PipelineAggregationB) {\n  (0, _inherits3.default)(BucketScriptAggregation, _PipelineAggregationB); // eslint-disable-next-line require-jsdoc\n\n  function BucketScriptAggregation(name, bucketsPath) {\n    (0, _classCallCheck3.default)(this, BucketScriptAggregation);\n    return (0, _possibleConstructorReturn3.default)(this, (BucketScriptAggregation.__proto__ || Object.getPrototypeOf(BucketScriptAggregation)).call(this, name, 'bucket_script', ES_REF_URL, bucketsPath));\n  }\n  /**\n   * Sets script parameter for aggregation.\n   *\n   * @param {Script|string} script\n   * @returns {BucketScriptAggregation} returns `this` so that calls can be chained\n   * @throws {TypeError} If `script` is not an instance of `Script`\n   */\n\n\n  (0, _createClass3.default)(BucketScriptAggregation, [{\n    key: 'script',\n    value: function script(_script) {\n      this._aggsDef.script = _script;\n      return this;\n    }\n  }]);\n  return BucketScriptAggregation;\n}(PipelineAggregationBase);\n\nmodule.exports = BucketScriptAggregation;","map":null,"metadata":{},"sourceType":"script"}