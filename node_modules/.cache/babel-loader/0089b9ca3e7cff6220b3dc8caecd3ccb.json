{"ast":null,"code":"'use strict';\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar PipelineAggregationBase = require('./pipeline-aggregation-base');\n\nvar ES_REF_URL = 'https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-pipeline-bucket-sort-aggregation.html';\n/**\n * A parent pipeline aggregation which sorts the buckets of its parent\n * multi-bucket aggregation. Zero or more sort fields may be specified\n * together with the corresponding sort order. Each bucket may be sorted\n * based on its _key, _count or its sub-aggregations. In addition, parameters\n * from and size may be set in order to truncate the result buckets.\n *\n * [Elasticsearch reference](https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-pipeline-bucket-sort-aggregation.html)\n *\n * @example\n * const reqBody = esb.requestBodySearch()\n *     .agg(\n *         esb.bucketSortAggregation('sort')\n *             .sort([\n *                  esb.sort('user', 'desc')\n *              ])\n *              .from(5)\n *              .size(10)\n *         )\n *     );\n *\n * @param {string} name The name which will be used to refer to this aggregation.\n *\n * @extends PipelineAggregationBase\n */\n\nvar BucketSortAggregation = function (_PipelineAggregationB) {\n  (0, _inherits3.default)(BucketSortAggregation, _PipelineAggregationB); // eslint-disable-next-line require-jsdoc\n\n  function BucketSortAggregation(name) {\n    (0, _classCallCheck3.default)(this, BucketSortAggregation);\n    return (0, _possibleConstructorReturn3.default)(this, (BucketSortAggregation.__proto__ || Object.getPrototypeOf(BucketSortAggregation)).call(this, name, 'bucket_sort', ES_REF_URL));\n  }\n  /**\n   * Sets the list of fields to sort on. Optional.\n   *\n   * @param {Array<Sort>} sort The list of fields to sort on\n   * @returns {BucketSortAggregation} returns `this` so that calls can be chained\n   */\n\n\n  (0, _createClass3.default)(BucketSortAggregation, [{\n    key: 'sort',\n    value: function sort(_sort) {\n      this._aggsDef.sort = _sort;\n      return this;\n    }\n    /**\n     * Sets the value buckets in positions prior to which will be truncated. Optional.\n     *\n     * @param {number} from Buckets in positions prior to the set value will be truncated.\n     * @returns {BucketSortAggregation} returns `this` so that calls can be chained\n     */\n\n  }, {\n    key: 'from',\n    value: function from(_from) {\n      this._aggsDef.from = _from;\n      return this;\n    }\n    /**\n     * Sets the number of buckets to return. Optional.\n     *\n     * @param {number} size The number of buckets to return.\n     * @returns {BucketSortAggregation} returns `this` so that calls can be chained\n     */\n\n  }, {\n    key: 'size',\n    value: function size(_size) {\n      this._aggsDef.size = _size;\n      return this;\n    }\n  }]);\n  return BucketSortAggregation;\n}(PipelineAggregationBase);\n\nmodule.exports = BucketSortAggregation;","map":null,"metadata":{},"sourceType":"script"}