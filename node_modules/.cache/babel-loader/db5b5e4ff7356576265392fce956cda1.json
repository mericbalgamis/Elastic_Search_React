{"ast":null,"code":"'use strict';\n\nvar _defineProperty2 = require('babel-runtime/helpers/defineProperty');\n\nvar _defineProperty3 = _interopRequireDefault(_defineProperty2);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar isNil = require('lodash.isnil');\n\nvar _require = require('../../core'),\n    Query = _require.Query,\n    checkType = _require.util.checkType;\n/**\n * Returns any documents that match with at least one or more of the provided\n * terms. The terms are not analyzed and thus must match exactly. The number of\n * terms that must match varies per document and is either controlled by a\n * minimum should match field or computed per document in a minimum should match\n * script.\n *\n * [Elasticsearch reference](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-terms-set-query.html)\n *\n * NOTE: This query was added in elasticsearch v6.1.\n *\n * @example\n * const qry = esb.termsSetQuery('codes', ['abc', 'def', 'ghi'])\n *     .minimumShouldMatchField('required_matches')\n *\n * @param {string=} field\n * @param {Array<string|number|boolean>|string|number=} terms\n *\n * @extends Query\n */\n\n\nvar TermsSetQuery = function (_Query) {\n  (0, _inherits3.default)(TermsSetQuery, _Query); // eslint-disable-next-line require-jsdoc\n\n  function TermsSetQuery(field, terms) {\n    (0, _classCallCheck3.default)(this, TermsSetQuery);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (TermsSetQuery.__proto__ || Object.getPrototypeOf(TermsSetQuery)).call(this, 'terms_set'));\n\n    _this._queryOpts.terms = [];\n    if (!isNil(field)) _this._field = field;\n\n    if (!isNil(terms)) {\n      if (Array.isArray(terms)) _this.terms(terms);else _this.term(terms);\n    }\n\n    return _this;\n  }\n  /**\n   * Sets the field to search on.\n   *\n   * @param {string} field\n   * @returns {TermsSetQuery} returns `this` so that calls can be chained.\n   */\n\n\n  (0, _createClass3.default)(TermsSetQuery, [{\n    key: 'field',\n    value: function field(_field) {\n      this._field = _field;\n      return this;\n    }\n    /**\n     * Append given term to set of terms to run Terms Set Query with.\n     *\n     * @param {string|number|boolean} term\n     * @returns {TermsSetQuery} returns `this` so that calls can be chained\n     */\n\n  }, {\n    key: 'term',\n    value: function term(_term) {\n      this._queryOpts.terms.push(_term);\n\n      return this;\n    }\n    /**\n     * Specifies the terms to run query for.\n     *\n     * @param {Array<string|number|boolean>} terms Terms set to run query for.\n     * @returns {TermsSetQuery} returns `this` so that calls can be chained\n     * @throws {TypeError} If `terms` is not an instance of Array\n     */\n\n  }, {\n    key: 'terms',\n    value: function terms(_terms) {\n      checkType(_terms, Array);\n      this._queryOpts.terms = this._queryOpts.terms.concat(_terms);\n      return this;\n    }\n    /**\n     * Controls the number of terms that must match per document.\n     *\n     * @param {string} fieldName\n     * @returns {TermsSetQuery} returns `this` so that calls can be chained\n     */\n\n  }, {\n    key: 'minimumShouldMatchField',\n    value: function minimumShouldMatchField(fieldName) {\n      this._queryOpts.minimum_should_match_field = fieldName;\n      return this;\n    }\n    /**\n     * Sets the `script` for query. It controls how many terms are required to\n     * match in a more dynamic way.\n     *\n     * The `params.num_terms` parameter is available in the script to indicate\n     * the number of terms that have been specified.\n     *\n     * @example\n     * const qry = esb.termsSetQuery('codes', ['abc', 'def', 'ghi'])\n     *     .minimumShouldMatchScript({\n     *         source: \"Math.min(params.num_terms, doc['required_matches'].value)\"\n     *     })\n     *\n     * @param {Script|string|Object} script\n     * @returns {ScriptQuery} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'minimumShouldMatchScript',\n    value: function minimumShouldMatchScript(script) {\n      this._queryOpts.minimum_should_match_script = script;\n      return this;\n    }\n    /**\n     * Override default `toJSON` to return DSL representation of the term level query\n     * class instance.\n     *\n     * @override\n     * @returns {Object} returns an Object which maps to the elasticsearch query DSL\n     */\n\n  }, {\n    key: 'toJSON',\n    value: function toJSON() {\n      return (0, _defineProperty3.default)({}, this.queryType, (0, _defineProperty3.default)({}, this._field, this._queryOpts));\n    }\n  }]);\n  return TermsSetQuery;\n}(Query);\n\nmodule.exports = TermsSetQuery;","map":null,"metadata":{},"sourceType":"script"}