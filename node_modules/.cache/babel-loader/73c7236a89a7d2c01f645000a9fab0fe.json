{"ast":null,"code":"'use strict';\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar isNil = require('lodash.isnil');\n\nvar _require = require('../../core'),\n    Query = _require.Query,\n    checkType = _require.util.checkType;\n/**\n * The boosting query can be used to effectively demote results that match\n * a given query. Unlike the \"NOT\" clause in bool query, this still selects\n * documents that contain undesirable terms, but reduces their overall\n * score.\n *\n * [Elasticsearch reference](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-boosting-query.html)\n *\n * @example\n * const qry = esb.boostingQuery(\n *     esb.termQuery('field1', 'value1'), // positiveQry\n *     esb.termQuery('field2', 'value2'), // negativeQry\n *     0.2 // negativeBoost\n * );\n *\n * @param {Query=} positiveQry A valid `Query` object.\n * @param {Query=} negativeQry A valid `Query` object.\n * @param {number=} negativeBoost A positive `double` value where `0 < n < 1`.\n *\n * @extends Query\n */\n\n\nvar BoostingQuery = function (_Query) {\n  (0, _inherits3.default)(BoostingQuery, _Query); // eslint-disable-next-line require-jsdoc\n\n  function BoostingQuery(positiveQry, negativeQry, negativeBoost) {\n    (0, _classCallCheck3.default)(this, BoostingQuery);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (BoostingQuery.__proto__ || Object.getPrototypeOf(BoostingQuery)).call(this, 'boosting'));\n\n    if (!isNil(positiveQry)) _this.positive(positiveQry);\n    if (!isNil(negativeQry)) _this.negative(negativeQry);\n    if (!isNil(negativeBoost)) _this._queryOpts.negative_boost = negativeBoost;\n    return _this;\n  }\n  /**\n   * Sets the \"master\" query that determines which results are returned.\n   *\n   * @param {Query} query A valid `Query` object.\n   * @returns {BoostingQuery} returns `this` so that calls can be chained.\n   */\n\n\n  (0, _createClass3.default)(BoostingQuery, [{\n    key: 'positive',\n    value: function positive(query) {\n      checkType(query, Query);\n      this._queryOpts.positive = query;\n      return this;\n    }\n    /**\n     * Sets the query used to match documents in the `positive`\n     * query that will be negatively boosted.\n     *\n     * @param {Query} query A valid `Query` object.\n     * @returns {BoostingQuery} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'negative',\n    value: function negative(query) {\n      checkType(query, Query);\n      this._queryOpts.negative = query;\n      return this;\n    }\n    /**\n     * Sets the negative boost value.\n     *\n     * @param {number} factor A positive `double` value where `0 < n < 1`.\n     * @returns {BoostingQuery} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'negativeBoost',\n    value: function negativeBoost(factor) {\n      this._queryOpts.negative_boost = factor;\n      return this;\n    }\n  }]);\n  return BoostingQuery;\n}(Query);\n\nmodule.exports = BoostingQuery;","map":null,"metadata":{},"sourceType":"script"}