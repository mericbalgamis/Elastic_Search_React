{"ast":null,"code":"'use strict';\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar isNil = require('lodash.isnil');\n\nvar _require = require('../../../core'),\n    invalidParam = _require.util.invalidParam,\n    FIELD_MODIFIER_SET = _require.consts.FIELD_MODIFIER_SET;\n\nvar ScoreFunction = require('./score-function');\n\nvar ES_REF_URL = 'https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-function-score-query.html#function-field-value-factor';\nvar invaliModifierdParam = invalidParam(ES_REF_URL, 'modifier', FIELD_MODIFIER_SET);\n/**\n * The `field_value_factor` function allows you to use a field from a document\n * to influence the score. It's similar to using the `script_score` function, however,\n * it avoids the overhead of scripting. If used on a multi-valued field, only the\n * first value of the field is used in calculations.\n *\n * [Elasticsearch reference](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-function-score-query.html#function-field-value-factor)\n *\n * @example\n * // Scoring formula - sqrt(1.2 * doc['popularity'].value)\n * const scoreFunc = esb.fieldValueFactorFunction('popularity')\n *     .factor(1.2)\n *     .modifier('sqrt')\n *     .missing(1);\n *\n * @param {string=} field the field to be extracted from the document.\n *\n * @extends ScoreFunction\n */\n\nvar FieldValueFactorFunction = function (_ScoreFunction) {\n  (0, _inherits3.default)(FieldValueFactorFunction, _ScoreFunction); // eslint-disable-next-line require-jsdoc\n\n  function FieldValueFactorFunction(field) {\n    (0, _classCallCheck3.default)(this, FieldValueFactorFunction);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (FieldValueFactorFunction.__proto__ || Object.getPrototypeOf(FieldValueFactorFunction)).call(this, 'field_value_factor'));\n\n    if (!isNil(field)) _this._opts.field = field;\n    return _this;\n  }\n  /**\n   * Sets the field to be extracted from the document.\n   *\n   * @param {string} field the field to be extracted from the document.\n   * @returns {FieldValueFactorFunction} returns `this` so that calls can be chained.\n   */\n\n\n  (0, _createClass3.default)(FieldValueFactorFunction, [{\n    key: 'field',\n    value: function field(_field) {\n      this._opts.field = _field;\n      return this;\n    }\n    /**\n     * Optional factor to multiply the field value with, defaults to `1`.\n     *\n     * @param {number} factor Factor to multiply the field with.\n     * @returns {FieldValueFactorFunction} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'factor',\n    value: function factor(_factor) {\n      this._opts.factor = _factor;\n      return this;\n    }\n    /**\n     * Modifier to apply to the field value, can be one of: `none`, `log`,\n     * `log1p`, `log2p`, `ln`, `ln1p`, `ln2p`, `square`, `sqrt`, or `reciprocal`.\n     * Defaults to `none`.\n     *\n     * @param {string} mod Modified to apply on field. Can be one of: `none`, `log`,\n     * `log1p`, `log2p`, `ln`, `ln1p`, `ln2p`, `square`, `sqrt`, or `reciprocal`.\n     * Defaults to `none`.\n     * @returns {FieldValueFactorFunction} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'modifier',\n    value: function modifier(mod) {\n      if (isNil(mod)) invaliModifierdParam(mod);\n      var modLower = mod.toLowerCase();\n\n      if (!FIELD_MODIFIER_SET.has(modLower)) {\n        invaliModifierdParam(mod);\n      }\n\n      this._opts.modifier = modLower;\n      return this;\n    }\n    /**\n     * Value used if the document doesnâ€™t have that field. The modifier and factor\n     * are still applied to it as though it were read from the document.\n     *\n     * @param {number} val To be used with documents which do not have field value.\n     * @returns {FieldValueFactorFunction} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'missing',\n    value: function missing(val) {\n      this._opts.missing = val;\n      return this;\n    }\n  }]);\n  return FieldValueFactorFunction;\n}(ScoreFunction);\n\nmodule.exports = FieldValueFactorFunction;","map":null,"metadata":{},"sourceType":"script"}