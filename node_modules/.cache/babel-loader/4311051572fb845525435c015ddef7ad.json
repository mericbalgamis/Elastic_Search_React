{"ast":null,"code":"'use strict';\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar isNil = require('lodash.isnil');\n\nvar _require = require('../../core'),\n    Query = _require.Query;\n/**\n * Filters documents matching the provided document / mapping type.\n *\n * [Elasticsearch reference](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-type-query.html)\n *\n * @example\n * const qry = esb.typeQuery('my_type');\n *\n * @param {string=} type The elasticsearch doc type\n *\n * @extends Query\n */\n\n\nvar TypeQuery = function (_Query) {\n  (0, _inherits3.default)(TypeQuery, _Query); // eslint-disable-next-line require-jsdoc\n\n  function TypeQuery(type) {\n    (0, _classCallCheck3.default)(this, TypeQuery);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (TypeQuery.__proto__ || Object.getPrototypeOf(TypeQuery)).call(this, 'type'));\n\n    if (!isNil(type)) _this._queryOpts.value = type;\n    return _this;\n  }\n  /**\n   * Sets the elasticsearch doc type to query on.\n   *\n   * @param {string} type The elasticsearch doc type\n   * @returns {TypeQuery} returns `this` so that calls can be chained.\n   */\n\n\n  (0, _createClass3.default)(TypeQuery, [{\n    key: 'value',\n    value: function value(type) {\n      this._queryOpts.value = type;\n      return this;\n    }\n    /**\n     * Sets the elasticsearch doc type to query on.\n     * Alias for method `value`.\n     *\n     * @param {string} type The elasticsearch doc type\n     * @returns {TypeQuery} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'type',\n    value: function type(_type) {\n      return this.value(_type);\n    }\n  }]);\n  return TypeQuery;\n}(Query);\n\nmodule.exports = TypeQuery;","map":null,"metadata":{},"sourceType":"script"}