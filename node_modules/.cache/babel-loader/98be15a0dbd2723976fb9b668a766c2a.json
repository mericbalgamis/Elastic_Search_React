{"ast":null,"code":"'use strict';\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar isNil = require('lodash.isnil');\n\nvar _require = require('../../core'),\n    Query = _require.Query,\n    checkType = _require.util.checkType;\n\nvar BucketAggregationBase = require('./bucket-aggregation-base');\n\nvar ES_REF_URL = 'https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-filter-aggregation.html';\n/**\n * Defines a single bucket of all the documents in the current document set\n * context that match a specified filter. Often this will be used to narrow down\n * the current aggregation context to a specific set of documents.\n *\n * [Elasticsearch reference](https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-filter-aggregation.html)\n *\n * @example\n * const reqBody = esb.requestBodySearch()\n *     .agg(\n *         esb.filterAggregation(\n *             't_shirts',\n *             esb.termQuery('type', 't-shirt')\n *         ).agg(esb.avgAggregation('avg_price', 'price'))\n *     )\n *     .size(0);\n *\n * @param {string} name The name which will be used to refer to this aggregation.\n * @param {Query=} filterQuery Query to filter on. Example - term query.\n *\n * @extends BucketAggregationBase\n */\n\nvar FilterAggregation = function (_BucketAggregationBas) {\n  (0, _inherits3.default)(FilterAggregation, _BucketAggregationBas); // eslint-disable-next-line require-jsdoc\n\n  function FilterAggregation(name, filterQuery) {\n    (0, _classCallCheck3.default)(this, FilterAggregation);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (FilterAggregation.__proto__ || Object.getPrototypeOf(FilterAggregation)).call(this, name, 'filter'));\n\n    if (!isNil(filterQuery)) _this.filter(filterQuery);\n    return _this;\n  }\n  /**\n   * @override\n   * @throws {Error} This method cannot be called on FilterAggregation\n   */\n\n\n  (0, _createClass3.default)(FilterAggregation, [{\n    key: 'field',\n    value: function field() {\n      console.log('Please refer ' + ES_REF_URL);\n      throw new Error('field is not supported in FilterAggregation');\n    }\n    /**\n     * @override\n     * @throws {Error} This method cannot be called on FilterAggregation\n     */\n\n  }, {\n    key: 'script',\n    value: function script() {\n      console.log('Please refer ' + ES_REF_URL);\n      throw new Error('script is not supported in FilterAggregation');\n    } // NOTE: Special case. filter does not set a key inside\n    // this._aggsDef but sets the entire object itself\n    // Generic getOpt will fail for this.\n    // Just a simple override should handle it though\n\n    /**\n     * Set the filter query for Filter Aggregation.\n     *\n     * @param {Query} filterQuery Query to filter on. Example - term query.\n     * @returns {FilterAggregation} returns `this` so that calls can be chained\n     * @throws {TypeError} If `filterQuery` is not an instance of `Query`\n     */\n\n  }, {\n    key: 'filter',\n    value: function filter(filterQuery) {\n      checkType(filterQuery, Query);\n      this._aggsDef = this._aggs[this.aggType] = filterQuery;\n      return this;\n    }\n  }]);\n  return FilterAggregation;\n}(BucketAggregationBase);\n\nmodule.exports = FilterAggregation;","map":null,"metadata":{},"sourceType":"script"}