{"ast":null,"code":"'use strict';\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar isNil = require('lodash.isnil');\n\nvar _require = require('../../core'),\n    checkType = _require.util.checkType,\n    Query = _require.Query;\n/**\n * The `percolate` query can be used to match queries stored in an index.\n * The `percolate` query itself contains the document that will be used\n * as query to match with the stored queries.\n *\n * [Elasticsearch reference](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-percolate-query.html)\n *\n * @example\n * const percolateQry = esb.percolateQuery('query', 'doctype')\n *     .document({ message: 'A new bonsai tree in the office' });\n *\n * const percolateQry = esb.percolateQuery()\n *     .field('query')\n *     .documentType('doctype')\n *     .index('my-index')\n *     .type('message')\n *     .id('1')\n *     .version(1);\n *\n * @param {string=} field The field of type `percolator` and that holds the indexed queries.\n * @param {string=} docType The type / mapping of the document being percolated.\n *\n * @extends Query\n */\n\n\nvar PercolateQuery = function (_Query) {\n  (0, _inherits3.default)(PercolateQuery, _Query); // eslint-disable-next-line require-jsdoc\n\n  function PercolateQuery(field, docType) {\n    (0, _classCallCheck3.default)(this, PercolateQuery);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (PercolateQuery.__proto__ || Object.getPrototypeOf(PercolateQuery)).call(this, 'percolate'));\n\n    _this._queryOpts.documents = [];\n    if (!isNil(field)) _this._queryOpts.field = field; // Delegate this to method:\n\n    if (!isNil(docType)) _this._queryOpts.document_type = docType;\n    return _this;\n  }\n  /**\n   * Sets the field of type `percolator` and that holds the indexed queries.\n   *\n   * @param {string} field The field of type `percolator` and that holds the indexed queries.\n   * @returns {PercolateQuery} returns `this` so that calls can be chained.\n   */\n\n\n  (0, _createClass3.default)(PercolateQuery, [{\n    key: 'field',\n    value: function field(_field) {\n      this._queryOpts.field = _field;\n      return this;\n    }\n    /**\n     * Sets the type / mapping of the document being percolated.\n     *\n     * Note: This param has been deprecated in elasticsearch 6.0. From 6.0 and\n     * later, it is no longer required to specify the `document_type` parameter.\n     *\n     * @param {string} docType The type / mapping of the document being percolated.\n     * @returns {PercolateQuery} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'documentType',\n    value: function documentType(docType) {\n      this._queryOpts.document_type = docType;\n      return this;\n    }\n    /**\n     * Appends given source document to the list of source documents being percolated.\n     * Instead of specifying the source document being percolated,\n     * the source can also be retrieved from an already stored document.\n     *\n     * @example\n     *const qry = esb.percolateQuery('query', 'people')\n     * .document({ name: 'Will Smith' });\n     *\n     * @param {Object} doc The source document being percolated.\n     * @returns {PercolateQuery} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'document',\n    value: function document(doc) {\n      this._queryOpts.documents.push(doc);\n\n      return this;\n    }\n    /**\n     * Appends given source documents to the list of source documents being percolated.\n     * Instead of specifying the source documents being percolated,\n     * the source can also be retrieved from already stored documents.\n     *\n     * @example\n     *const qry = esb.percolateQuery('query', 'people')\n     * .documents([{ name: 'Will Smith' }, { name: 'Willow Smith' }]);\n     *\n     * @param {Object[]} docs The source documents being percolated.\n     * @returns {PercolateQuery} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'documents',\n    value: function documents(docs) {\n      checkType(docs, Array);\n      this._queryOpts.documents = this._queryOpts.documents.concat(docs);\n      return this;\n    }\n    /**\n     * Sets the index the document resides in. This is a required parameter if `document`\n     * is not specified.\n     *\n     * @param {string} index The index the document resides in.\n     * @returns {PercolateQuery} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'index',\n    value: function index(_index) {\n      this._queryOpts.index = _index;\n      return this;\n    }\n    /**\n     * Sets the type of the document to fetch. This is a required parameter if `document`\n     * is not specified.\n     *\n     * @param {string} type The type of the document to fetch.\n     * @returns {PercolateQuery} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'type',\n    value: function type(_type) {\n      this._queryOpts.type = _type;\n      return this;\n    }\n    /**\n     * Sets the id of the document to fetch. This is a required parameter if `document`\n     * is not specified.\n     *\n     * @param {string} id The id of the document to fetch.\n     * @returns {PercolateQuery} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'id',\n    value: function id(_id) {\n      this._queryOpts.id = _id;\n      return this;\n    }\n    /**\n     * Sets the routing to be used to fetch document to percolate. Optional.\n     *\n     * @param {string} routing The routing to be used to fetch document to percolate.\n     * @returns {PercolateQuery} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'routing',\n    value: function routing(_routing) {\n      this._queryOpts.routing = _routing;\n      return this;\n    }\n    /**\n     * Sets the preference to be used to fetch document to percolate. Optional.\n     *\n     * @param {string} preference The preference to be used to fetch document to percolate.\n     * @returns {PercolateQuery} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'preference',\n    value: function preference(_preference) {\n      this._queryOpts.preference = _preference;\n      return this;\n    }\n    /**\n     * Sets the expected version of the document to be fetched. Optional.\n     * If the version does not match, the search request will fail\n     * with a version conflict error.\n     *\n     * @param {string} version The expected version of the document to be fetched.\n     * @returns {PercolateQuery} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'version',\n    value: function version(_version) {\n      this._queryOpts.version = _version;\n      return this;\n    }\n  }]);\n  return PercolateQuery;\n}(Query);\n\nmodule.exports = PercolateQuery;","map":null,"metadata":{},"sourceType":"script"}