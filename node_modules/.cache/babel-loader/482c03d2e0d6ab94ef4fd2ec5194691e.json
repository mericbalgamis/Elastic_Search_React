{"ast":null,"code":"'use strict';\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar isNil = require('lodash.isnil');\n\nvar _require = require('../../core'),\n    Aggregation = _require.Aggregation,\n    checkType = _require.util.checkType;\n/**\n * The `matrix_stats` aggregation is a numeric aggregation that computes\n * statistics over a set of document fields\n *\n * [Elasticsearch reference](https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-matrix-stats-aggregation.html)\n *\n * @example\n * const agg = esb.matrixStatsAggregation('matrixstats', ['poverty', 'income']);\n *\n * @param {string} name A valid aggregation name\n * @param {Array=} fields Array of fields\n *\n * @extends Aggregation\n */\n\n\nvar MatrixStatsAggregation = function (_Aggregation) {\n  (0, _inherits3.default)(MatrixStatsAggregation, _Aggregation); // eslint-disable-next-line require-jsdoc\n\n  function MatrixStatsAggregation(name, fields) {\n    (0, _classCallCheck3.default)(this, MatrixStatsAggregation);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (MatrixStatsAggregation.__proto__ || Object.getPrototypeOf(MatrixStatsAggregation)).call(this, name, 'matrix_stats'));\n\n    if (!isNil(fields)) _this.fields(fields);\n    return _this;\n  }\n  /**\n   * The `fields` setting defines the set of fields (as an array) for computing\n   * the statistics.\n   *\n   * @example\n   * const agg = esb.matrixStatsAggregation('matrixstats')\n   *     .fields(['poverty', 'income']);\n   *\n   * @param {Array<string>} fields Array of fields\n   * @returns {MatrixStatsAggregation} returns `this` so that calls can be chained\n   */\n\n\n  (0, _createClass3.default)(MatrixStatsAggregation, [{\n    key: 'fields',\n    value: function fields(_fields) {\n      checkType(_fields, Array);\n      this._aggsDef.fields = _fields;\n      return this;\n    }\n    /**\n     * The `mode` parameter controls what array value the aggregation will use for\n     * array or multi-valued fields\n     * @param {string} mode One of `avg`, `min`, `max`, `sum` and `median`\n     * @returns {MatrixStatsAggregation} returns `this` so that calls can be chained\n     */\n\n  }, {\n    key: 'mode',\n    value: function mode(_mode) {\n      // TODO: Add a set in consts and validate input\n      this._aggsDef.mode = _mode;\n      return this;\n    }\n    /**\n     * The missing parameter defines how documents that are missing a value should\n     * be treated. By default they will be ignored but it is also possible to treat\n     * them as if they had a value.\n     *\n     * @example\n     * const agg = esb.matrixStatsAggregation('matrixstats')\n     *     .fields(['poverty', 'income'])\n     *     .missing({ income: 50000 });\n     *\n     * @param {Object} missing Set of fieldname : value mappings to specify default\n     * values per field\n     * @returns {MatrixStatsAggregation} returns `this` so that calls can be chained\n     */\n\n  }, {\n    key: 'missing',\n    value: function missing(_missing) {\n      this._aggsDef.missing = _missing;\n      return this;\n    }\n  }]);\n  return MatrixStatsAggregation;\n}(Aggregation);\n\nmodule.exports = MatrixStatsAggregation;","map":null,"metadata":{},"sourceType":"script"}