{"ast":null,"code":"'use strict';\n\nvar _defineProperty2 = require('babel-runtime/helpers/defineProperty');\n\nvar _defineProperty3 = _interopRequireDefault(_defineProperty2);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar isNil = require('lodash.isnil');\n\nvar _require = require('../../../core'),\n    _require$util = _require.util,\n    invalidParam = _require$util.invalidParam,\n    recursiveToJSON = _require$util.recursiveToJSON;\n\nvar ES_REF_URL = 'https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-function-score-query.html#function-decay';\n\nvar ScoreFunction = require('./score-function');\n\nvar invalidModeParam = invalidParam(ES_REF_URL, 'mode', \"'linear', 'exp' or 'gauss'\");\n/**\n * Decay functions score a document with a function that decays depending on\n * the distance of a numeric field value of the document from a user given\n * origin. This is similar to a range query, but with smooth edges instead of\n * boxes.\n *\n * Supported decay functions are: `linear`, `exp`, and `gauss`.\n *\n * [Elasticsearch reference](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-function-score-query.html#function-decay)\n *\n * If no `mode` is supplied, `gauss` will be used.\n *\n * @example\n * // Defaults to decay function `gauss`\n * const decayFunc = esb.decayScoreFunction()\n *     .field('location') // field is a geo_point\n *     .origin('11, 12') // geo format\n *     .scale('2km')\n *     .offset('0km')\n *     .decay(0.33);\n *\n * @example\n * const decayFunc = esb.decayScoreFunction('gauss', 'date')\n *     .origin('2013-09-17')\n *     .scale('10d')\n *     .offset('5d')\n *     .decay(0.5);\n *\n * @param {string=} mode Can be one of `linear`, `exp`, and `gauss`.\n * Defaults to `gauss`.\n * @param {string=} field the document field to run decay function against.\n *\n * @extends ScoreFunction\n */\n\nvar DecayScoreFunction = function (_ScoreFunction) {\n  (0, _inherits3.default)(DecayScoreFunction, _ScoreFunction); // eslint-disable-next-line require-jsdoc\n\n  function DecayScoreFunction() {\n    var mode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'gauss';\n    var field = arguments[1];\n    (0, _classCallCheck3.default)(this, DecayScoreFunction);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (DecayScoreFunction.__proto__ || Object.getPrototypeOf(DecayScoreFunction)).call(this, mode));\n\n    if (!isNil(field)) _this._field = field;\n    return _this;\n  }\n  /**\n   * Set the decay mode.\n   *\n   * @param {string} mode  Can be one of `linear`, `exp`, and `gauss`.\n   * Defaults to `gauss`.\n   * @returns {DecayScoreFunction} returns `this` so that calls can be chained.\n   */\n\n\n  (0, _createClass3.default)(DecayScoreFunction, [{\n    key: 'mode',\n    value: function mode(_mode) {\n      if (isNil(_mode)) invalidModeParam(_mode);\n\n      var modeLower = _mode.toLowerCase();\n\n      if (modeLower !== 'linear' && modeLower !== 'exp' && modeLower !== 'gauss') {\n        invalidModeParam(_mode);\n      }\n\n      this._name = _mode;\n      return this;\n    }\n    /**\n     * Sets the decay mode to linear.\n     * Alias for `mode('linear')`\n     *\n     * @returns {DecayScoreFunction} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'linear',\n    value: function linear() {\n      this._name = 'linear';\n      return this;\n    }\n    /**\n     * Sets the decay mode to exp.\n     * Alias for `mode('exp')`\n     *\n     * @returns {DecayScoreFunction} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'exp',\n    value: function exp() {\n      this._name = 'exp';\n      return this;\n    }\n    /**\n     * Sets the decay mode to gauss.\n     * Alias for `mode('gauss')`\n     *\n     * @returns {DecayScoreFunction} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'gauss',\n    value: function gauss() {\n      this._name = 'gauss';\n      return this;\n    }\n    /**\n     * Sets the document field to run decay function against.\n     *\n     * @param {string} field the document field to run decay function against.\n     * @returns {DecayScoreFunction} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'field',\n    value: function field(_field) {\n      this._field = _field;\n      return this;\n    }\n    /**\n     * The point of origin used for calculating distance. Must be given as a number\n     * for numeric field, date for date fields and geo point for geo fields.\n     * Required for geo and numeric field. For date fields the default is `now`.\n     * Date math (for example `now-1h`) is supported for origin.\n     *\n     * @param {number|string|Object} origin A valid origin value for the field type.\n     * @returns {DecayScoreFunction} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'origin',\n    value: function origin(_origin) {\n      this._opts.origin = _origin;\n      return this;\n    }\n    /**\n     * Required for all types. Defines the distance from origin + offset at which\n     * the computed score will equal decay parameter. For geo fields: Can be defined\n     * as number+unit (`1km`, `12m`,…). Default unit is meters. For date fields: Can be\n     * defined as a number+unit (`1h`, `10d`,…). Default unit is milliseconds.\n     * For numeric field: Any number.\n     *\n     * @param {number|string} scale A valid scale value for the field type.\n     * @returns {DecayScoreFunction} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'scale',\n    value: function scale(_scale) {\n      this._opts.scale = _scale;\n      return this;\n    }\n    /**\n     * If an `offset` is defined, the decay function will only compute the decay function\n     * for documents with a distance greater that the defined offset. The default is `0`.\n     *\n     * @param {number|string} offset A valid offset value for the field type.\n     * @returns {DecayScoreFunction} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'offset',\n    value: function offset(_offset) {\n      this._opts.offset = _offset;\n      return this;\n    }\n    /**\n     * The `decay` parameter defines how documents are scored at the distance given at `scale`.\n     * If no `decay` is defined, documents at the distance `scale` will be scored `0.5`.\n     *\n     * @param {number} decay A decay value as a double.\n     * @returns {DecayScoreFunction} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'decay',\n    value: function decay(_decay) {\n      this._opts.decay = _decay;\n      return this;\n    }\n    /**\n     * Overrides default `toJSON` to return DSL representation of the decay score function\n     * class instance.\n     *\n     * @override\n     * @returns {Object} returns an Object which maps to the elasticsearch query DSL\n     */\n\n  }, {\n    key: 'toJSON',\n    value: function toJSON() {\n      // TODO: If mode/field is not set throw an error.\n      var repr = Object.assign((0, _defineProperty3.default)({}, this._name, (0, _defineProperty3.default)({}, this._field, this._opts)), this._body);\n      return recursiveToJSON(repr);\n    }\n  }]);\n  return DecayScoreFunction;\n}(ScoreFunction);\n\nmodule.exports = DecayScoreFunction;","map":null,"metadata":{},"sourceType":"script"}