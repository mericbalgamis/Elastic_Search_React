{"ast":null,"code":"'use strict';\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar isNil = require('lodash.isnil');\n\nvar _require = require('../../core'),\n    Query = _require.Query,\n    InnerHits = _require.InnerHits,\n    _require$util = _require.util,\n    checkType = _require$util.checkType,\n    invalidParam = _require$util.invalidParam,\n    NESTED_SCORE_MODE_SET = _require.consts.NESTED_SCORE_MODE_SET;\n\nvar invalidScoreModeParam = invalidParam('', 'score_mode', NESTED_SCORE_MODE_SET);\n/**\n * The `JoiningQueryBase` class provides support for common options used across\n * various joining query implementations.\n *\n * **NOTE:** Instantiating this directly should not be required.\n * However, if you wish to add a custom implementation for whatever reason,\n * this class could be extended.\n *\n * @param {string} queryType\n * @param {string} refUrl\n * @param {Query=} qry A valid `Query` object\n *\n * @extends Query\n */\n\nvar JoiningQueryBase = function (_Query) {\n  (0, _inherits3.default)(JoiningQueryBase, _Query); // eslint-disable-next-line require-jsdoc\n\n  function JoiningQueryBase(queryType, refUrl, qry) {\n    (0, _classCallCheck3.default)(this, JoiningQueryBase);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (JoiningQueryBase.__proto__ || Object.getPrototypeOf(JoiningQueryBase)).call(this, queryType));\n\n    _this.refUrl = refUrl;\n    if (!isNil(qry)) _this.query(qry);\n    return _this;\n  }\n  /**\n   * Sets the nested query to be executed.\n   *\n   * @param {Query} qry A valid `Query` object\n   * @returns {JoiningQueryBase} returns `this` so that calls can be chained.\n   */\n\n\n  (0, _createClass3.default)(JoiningQueryBase, [{\n    key: 'query',\n    value: function query(qry) {\n      checkType(qry, Query);\n      this._queryOpts.query = qry;\n      return this;\n    }\n    /**\n     * Sets the scoring method.\n     *\n     * Valid values are:\n     * - `none` - no scoring\n     * - `max` - the highest score of all matched child documents is used\n     * - `min` - the lowest score of all matched child documents is used\n     * - `sum` - the sum the all the matched child documents is used\n     * - `avg` - the default, the average of all matched child documents is used\n     *\n     * @example\n     * const qry = esb.hasChildQuery(\n     *     esb.termQuery('tag', 'something'),\n     *     'blog_tag'\n     * ).scoreMode('min');\n     *\n     * @param {string} mode Can be one of `none`, `sum`, `min`, `max`, `avg`.\n     * Defaults to `avg` for `NestedQuery`, `none` for `HasChildQuery`.\n     * @returns {JoiningQueryBase} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'scoreMode',\n    value: function scoreMode(mode) {\n      if (isNil(mode)) invalidScoreModeParam(mode);\n      var modeLower = mode.toLowerCase();\n\n      if (!NESTED_SCORE_MODE_SET.has(modeLower)) {\n        invalidScoreModeParam(mode);\n      }\n\n      this._queryOpts.score_mode = modeLower;\n      return this;\n    }\n    /**\n     * When set to `true` will ignore an unmapped `path` and will not match any\n     * documents for this query. When set to `false` (the default value) the query\n     * will throw an exception if the path is not mapped.\n     *\n     * @param {boolean} enable `true` or `false`, `false` by default.\n     * @returns {JoiningQueryBase} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'ignoreUnmapped',\n    value: function ignoreUnmapped(enable) {\n      this._queryOpts.ignore_unmapped = enable;\n      return this;\n    }\n    /**\n     * Sets the inner hits options\n     *\n     * @param {InnerHits} innerHits A valid `InnerHits` object\n     * @returns {JoiningQueryBase} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'innerHits',\n    value: function innerHits(_innerHits) {\n      checkType(_innerHits, InnerHits);\n      this._queryOpts.inner_hits = _innerHits;\n      return this;\n    }\n  }]);\n  return JoiningQueryBase;\n}(Query);\n\nmodule.exports = JoiningQueryBase;","map":null,"metadata":{},"sourceType":"script"}