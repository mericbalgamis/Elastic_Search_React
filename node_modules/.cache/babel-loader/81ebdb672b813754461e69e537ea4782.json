{"ast":null,"code":"'use strict';\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar _require = require('../../core'),\n    checkType = _require.util.checkType;\n\nvar SignificantAggregationBase = require('./significant-aggregation-base');\n\nvar ES_REF_URL = 'https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-significanttext-aggregation.html';\n/**\n * An aggregation that returns interesting or unusual occurrences of free-text\n * terms in a set. It is like the `SignificantTermsAggregation` but differs in\n * that:\n *   - It is specifically designed for use on type `text` fields\n *   - It does not require field data or doc-values\n *   - It re-analyzes text content on-the-fly meaning it can also filter\n *     duplicate sections of noisy text that otherwise tend to skew statistics.\n *\n * [Elasticsearch reference](https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-significanttext-aggregation.html)\n *\n * NOTE: This query was added in elasticsearch v6.0.\n *\n * @example\n * const reqBody = esb.requestBodySearch()\n *   .query(esb.matchQuery('content', 'Bird flu'))\n *   .agg(\n *     esb.samplerAggregation('my_sample')\n *       .shardSize(100)\n *       .agg(esb.significantTextAggregation('keywords', 'content'))\n *   );\n *\n * @param {string} name The name which will be used to refer to this aggregation.\n * @param {string=} field The field to aggregate on\n *\n * @extends SignificantAggregationBase\n */\n\nvar SignificantTextAggregation = function (_SignificantAggregati) {\n  (0, _inherits3.default)(SignificantTextAggregation, _SignificantAggregati); // eslint-disable-next-line require-jsdoc\n\n  function SignificantTextAggregation(name, field) {\n    (0, _classCallCheck3.default)(this, SignificantTextAggregation);\n    return (0, _possibleConstructorReturn3.default)(this, (SignificantTextAggregation.__proto__ || Object.getPrototypeOf(SignificantTextAggregation)).call(this, name, 'significant_text', ES_REF_URL, field));\n  }\n  /**\n   * Control if duplicate paragraphs of text should try be filtered from the\n   * statistical text analysis. Can improve results but slows down analysis.\n   * Default is `false`.\n   *\n   * @example\n   * const reqBody = esb.requestBodySearch()\n   *   .query(esb.matchQuery('content', 'elasticsearch'))\n   *   .agg(\n   *     esb.samplerAggregation('sample')\n   *       .shardSize(100)\n   *       .agg(\n   *         esb.significantTextAggregation('keywords', 'content')\n   *           .filterDuplicateText(true)\n   *       )\n   *   );\n   *\n   * @param {boolean} enable\n   * @returns {SignificantTextAggregation} returns `this` so that calls can be chained\n   */\n\n\n  (0, _createClass3.default)(SignificantTextAggregation, [{\n    key: 'filterDuplicateText',\n    value: function filterDuplicateText(enable) {\n      this._aggsDef.filter_duplicate_text = enable;\n      return this;\n    }\n    /**\n     * Selects the fields to load from `_source` JSON and analyze. If none are\n     * specified, the indexed \"fieldName\" value is assumed to also be the name\n     * of the JSON field holding the value\n     *\n     * @example\n     * const reqBody = esb.requestBodySearch()\n     *   .query(esb.matchQuery('custom_all', 'elasticsearch'))\n     *   .agg(\n     *     esb.significantTextAggregation('tags', 'custom_all')\n     *       .sourceFields(['content', 'title'])\n     *   );\n     *\n     * @param {Array<string>} srcFields Array of fields\n     * @returns {SignificantTextAggregation} returns `this` so that calls can be chained\n     */\n\n  }, {\n    key: 'sourceFields',\n    value: function sourceFields(srcFields) {\n      checkType(srcFields, Array);\n      this._aggsDef.source_fields = srcFields;\n      return this;\n    }\n    /**\n     * @override\n     * @throws {Error} This method cannot be called on SignificantTextAggregation\n     */\n\n  }, {\n    key: 'missing',\n    value: function missing() {\n      console.log('Please refer ' + ES_REF_URL);\n      throw new Error('missing is not supported in SignificantTextAggregation');\n    }\n    /**\n     * @override\n     * @throws {Error} This method cannot be called on SignificantTextAggregation\n     */\n\n  }, {\n    key: 'executionHint',\n    value: function executionHint() {\n      console.log('Please refer ' + ES_REF_URL);\n      throw new Error('executionHint is not supported in SignificantTextAggregation');\n    }\n  }]);\n  return SignificantTextAggregation;\n}(SignificantAggregationBase);\n\nmodule.exports = SignificantTextAggregation;","map":null,"metadata":{},"sourceType":"script"}