{"ast":null,"code":"var _jsxFileName = \"/Users/Deniz/Elastic_Search_React/src/App.js\";\nimport React, { Component } from \"react\";\nimport './App.css';\nimport SplitterLayout from 'react-splitter-layout';\nimport 'react-splitter-layout/lib/index.css';\nimport Panel from 'muicss/lib/react/panel';\nimport DynamicForm from './components/dynamicForm/dynamicForm';\nimport myJson from './datatypes.json';\nimport txt from './datatypes.txt';\nimport json from './config/simple.json';\nimport axios from 'axios';\nimport JSONPretty from 'react-json-prettify';\nimport { github } from 'react-json-prettify/dist/themes';\nimport queryBuilder from 'elastic-builder'; //const elasticsearch = require('elastic-search');\n//const esb = require('elastic-builder');\n\nvar formJson = {\n  \"name\": \"ABCz Form\",\n  \"fields\": []\n};\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.generateQuery = formResults => {\n      var form = JSON.parse(formResults); //console.log(form.data[0].name)\n      //console.log(form.data[0].value)\n      // Bool query\n\n      const requestBody = queryBuilder.requestBodySearch().query(queryBuilder.boolQuery().must(queryBuilder.matchQuery('last_name', 'smith')).filter(queryBuilder.rangeQuery('age').gt(30)));\n      let json = JSON.stringify(requestBody, null, 4);\n      console.log(json);\n      /*\n      requestBody.toJSON();\n      \"query\": {\n      \"bool\": {\n        \"must\": {\n          \"match\": { \"last_name\": \"smith\" }\n        },\n        \"filter\": {\n          \"range\": { \"age\": { \"gt\": 30 } }\n        }\n      }\n      }\n      }*/\n      // Multi Match Query\n\n      requestBody = queryBuilder.requestBodySearch().query(queryBuilder.multiMatchQuery(['title', 'body'], 'Quick brown fox').type('best_fields').tieBreaker(0.3).minimumShouldMatch('30%'));\n      /*\n      requestBody.toJSON();\n      {\n        \"multi_match\": {\n          \"query\": \"Quick brown fox\",\n          \"type\": \"best_fields\",\n          \"fields\": [\"title\", \"body\"],\n          \"tie_breaker\": 0.3,\n          \"minimum_should_match\": \"30%\"\n        }\n      }*/\n      // Aggregation\n\n      requestBody = queryBuilder.requestBodySearch().size(0).agg(queryBuilder.termsAggregation('popular_colors', 'color'));\n      /*\n      requestBody.toJSON();\n      {\n      \"size\": 0,\n      \"aggs\": {\n        \"popular_colors\": {\n          \"terms\": { \"field\": \"color\" }\n        }\n      }\n      }*/\n\n      this.sendRequest();\n    };\n\n    this.submitHandler = event => {\n      let json = JSON.stringify(event, null, 4);\n      this.generateQuery(json);\n      console.log(json);\n    };\n\n    this.state = {\n      form: formJson,\n      response: ''\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n    axios.get().then(res => {\n      this.setState({\n        todo: res.data\n      });\n    });\n  }\n\n  sendRequest() {\n    //console.log(\"handleclick\")\n    var panel = document.getElementById(\"resultPanel\");\n    axios.get('http://127.0.0.1:5000/query').then(response => {\n      //console.log(response);\n      this.setState({\n        response: response.data\n      }); //panel.innerHTML=response.data; \n    });\n  }\n\n  componentWillMount() {\n    fetch(txt).then(r => r.text()).then(text => {\n      let myarray = text.split('\\n');\n      let dataArray = myarray.map((element, i) => {\n        var array = element.split(' ');\n\n        if (array.length === 4) {\n          let name = array[0];\n          name = name.replace(/_/g, ' ');\n          let type = array[1];\n          let options = array[2];\n          options = options.replace(/\\)/g, '');\n          options = options.replace(/\\(/g, '');\n          let optionsArray = options.split(',');\n          var optionData = {\n            \"options\": []\n          };\n          var data = {};\n          optionsArray.map((option, i) => {\n            optionData.options.push({\n              \"display\": option\n            });\n          });\n          return {\n            \"id\": name,\n            \"label\": name,\n            \"description\": \"\",\n            \"type\": type,\n            \"value\": \"\",\n            \"required\": \"false\",\n            \"placeholder\": \"\",\n            \"definition\": optionData\n          };\n        } else if (array.length === 3) {\n          let name = array[0];\n          name = name.replace(/_/g, ' ');\n          let type = array[1];\n          return {\n            \"id\": name,\n            \"label\": name,\n            \"description\": \"\",\n            \"type\": type,\n            \"value\": \"\",\n            \"required\": \"false\",\n            \"placeholder\": \"\"\n          };\n        }\n      });\n      this.setState({\n        form: {\n          fields: dataArray\n        }\n      });\n      console.log(dataArray);\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, React.createElement(SplitterLayout, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }, \"Build a Query !\", React.createElement(DynamicForm, {\n      id: \"form\",\n      config: this.state.form,\n      onSubmit: event => this.submitHandler(event),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }, React.createElement(Panel, {\n      id: \"resultPanel\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }, React.createElement(JSONPretty, {\n      json: this.state.response,\n      theme: github,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/Deniz/Elastic_Search_React/src/App.js"],"names":["React","Component","SplitterLayout","Panel","DynamicForm","myJson","txt","json","axios","JSONPretty","github","queryBuilder","formJson","App","constructor","props","generateQuery","formResults","form","JSON","parse","requestBody","requestBodySearch","query","boolQuery","must","matchQuery","filter","rangeQuery","gt","stringify","console","log","multiMatchQuery","type","tieBreaker","minimumShouldMatch","size","agg","termsAggregation","sendRequest","submitHandler","event","state","response","handleClick","bind","get","then","res","setState","todo","data","panel","document","getElementById","componentWillMount","fetch","r","text","myarray","split","dataArray","map","element","i","array","length","name","replace","options","optionsArray","optionData","option","push","fields","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,WAAP;AACA,OAAOC,cAAP,MAA2B,uBAA3B;AACA,OAAO,qCAAP;AACA,OAAOC,KAAP,MAAkB,wBAAlB;AACA,OAAOC,WAAP,MAAwB,sCAAxB;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,OAAOC,GAAP,MAAgB,iBAAhB;AACA,OAAOC,IAAP,MAAiB,sBAAjB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,qBAAvB;AACA,SAASC,MAAT,QAAuB,iCAAvB;AACA,OAAOC,YAAP,MAAyB,iBAAzB,C,CAEA;AACA;;AAGA,IAAIC,QAAQ,GAAG;AACb,UAAQ,WADK;AAEb,YAAU;AAFG,CAAf;;AAKA,MAAMC,GAAN,SAAkBZ,SAAlB,CAA4B;AAE1Ba,EAAAA,WAAW,CAACC,KAAD,EAAQ;AAEjB,UAAMA,KAAN;;AAFiB,SAiCnBC,aAjCmB,GAiCFC,WAAD,IAAiB;AAC/B,UAAIC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWH,WAAX,CAAX,CAD+B,CAE/B;AACA;AAEA;;AACA,YAAMI,WAAW,GAAGV,YAAY,CAACW,iBAAb,GAAiCC,KAAjC,CAClBZ,YAAY,CAACa,SAAb,GACGC,IADH,CACQd,YAAY,CAACe,UAAb,CAAwB,WAAxB,EAAqC,OAArC,CADR,EAEGC,MAFH,CAEUhB,YAAY,CAACiB,UAAb,CAAwB,KAAxB,EAA+BC,EAA/B,CAAkC,EAAlC,CAFV,CADkB,CAApB;AAKA,UAAItB,IAAI,GAAGY,IAAI,CAACW,SAAL,CAAeT,WAAf,EAA4B,IAA5B,EAAkC,CAAlC,CAAX;AAEEU,MAAAA,OAAO,CAACC,GAAR,CAAYzB,IAAZ;AAEF;;;;;;;;;;;;;AAeJ;;AACAc,MAAAA,WAAW,GAAGV,YAAY,CAACW,iBAAb,GAAiCC,KAAjC,CACZZ,YAAY,CAACsB,eAAb,CAA6B,CAAC,OAAD,EAAU,MAAV,CAA7B,EAAgD,iBAAhD,EACGC,IADH,CACQ,aADR,EAEGC,UAFH,CAEc,GAFd,EAGGC,kBAHH,CAGsB,KAHtB,CADY,CAAd;AAMA;;;;;;;;;;;AAYA;;AACAf,MAAAA,WAAW,GAAGV,YAAY,CAACW,iBAAb,GACXe,IADW,CACN,CADM,EAEXC,GAFW,CAEP3B,YAAY,CAAC4B,gBAAb,CAA8B,gBAA9B,EAAgD,OAAhD,CAFO,CAAd;AAIE;;;;;;;;;;;AAYE,WAAKC,WAAL;AAED,KArGkB;;AAAA,SAuGnBC,aAvGmB,GAuGFC,KAAD,IAAW;AACzB,UAAInC,IAAI,GAAGY,IAAI,CAACW,SAAL,CAAeY,KAAf,EAAsB,IAAtB,EAA4B,CAA5B,CAAX;AACA,WAAK1B,aAAL,CAAmBT,IAAnB;AACAwB,MAAAA,OAAO,CAACC,GAAR,CAAYzB,IAAZ;AACD,KA3GkB;;AAGjB,SAAKoC,KAAL,GAAa;AAEXzB,MAAAA,IAAI,EAAEN,QAFK;AAGXgC,MAAAA,QAAQ,EAAE;AAHC,KAAb;AAKA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,CAAnB;AACD;;AAEDD,EAAAA,WAAW,GAAG;AACZrC,IAAAA,KAAK,CAACuC,GAAN,GACGC,IADH,CACQC,GAAG,IAAI;AACX,WAAKC,QAAL,CAAc;AACZC,QAAAA,IAAI,EAAEF,GAAG,CAACG;AADE,OAAd;AAGD,KALH;AAMD;;AAEDZ,EAAAA,WAAW,GAAG;AACZ;AACA,QAAIa,KAAK,GAAGC,QAAQ,CAACC,cAAT,CAAwB,aAAxB,CAAZ;AACA/C,IAAAA,KAAK,CAACuC,GAAN,CAAU,6BAAV,EACGC,IADH,CACQJ,QAAQ,IAAI;AAChB;AACA,WAAKM,QAAL,CAAc;AACZN,QAAAA,QAAQ,EAAEA,QAAQ,CAACQ;AADP,OAAd,EAFgB,CAKhB;AACD,KAPH;AAQD;;AA8EDI,EAAAA,kBAAkB,GAAG;AAEnBC,IAAAA,KAAK,CAACnD,GAAD,CAAL,CACG0C,IADH,CACSU,CAAD,IAAOA,CAAC,CAACC,IAAF,EADf,EAEGX,IAFH,CAEQW,IAAI,IAAI;AACZ,UAAIC,OAAO,GAAGD,IAAI,CAACE,KAAL,CAAW,IAAX,CAAd;AACA,UAAIC,SAAS,GAAGF,OAAO,CAACG,GAAR,CAAY,CAACC,OAAD,EAAUC,CAAV,KAAgB;AAG1C,YAAIC,KAAK,GAAGF,OAAO,CAACH,KAAR,CAAc,GAAd,CAAZ;;AAEA,YAAIK,KAAK,CAACC,MAAN,KAAiB,CAArB,EAAwB;AAEtB,cAAIC,IAAI,GAAGF,KAAK,CAAC,CAAD,CAAhB;AACAE,UAAAA,IAAI,GAAGA,IAAI,CAACC,OAAL,CAAa,IAAb,EAAmB,GAAnB,CAAP;AACA,cAAInC,IAAI,GAAGgC,KAAK,CAAC,CAAD,CAAhB;AACA,cAAII,OAAO,GAAGJ,KAAK,CAAC,CAAD,CAAnB;AACAI,UAAAA,OAAO,GAAGA,OAAO,CAACD,OAAR,CAAgB,KAAhB,EAAuB,EAAvB,CAAV;AACAC,UAAAA,OAAO,GAAGA,OAAO,CAACD,OAAR,CAAgB,KAAhB,EAAuB,EAAvB,CAAV;AACA,cAAIE,YAAY,GAAGD,OAAO,CAACT,KAAR,CAAc,GAAd,CAAnB;AAEA,cAAIW,UAAU,GAAG;AAAE,uBAAW;AAAb,WAAjB;AACA,cAAIpB,IAAI,GAAG,EAAX;AACAmB,UAAAA,YAAY,CAACR,GAAb,CAAiB,CAACU,MAAD,EAASR,CAAT,KAAe;AAC9BO,YAAAA,UAAU,CAACF,OAAX,CAAmBI,IAAnB,CAAwB;AAAE,yBAAWD;AAAb,aAAxB;AACD,WAFD;AAIA,iBAAO;AACL,kBAAML,IADD;AAEL,qBAASA,IAFJ;AAGL,2BAAe,EAHV;AAIL,oBAAQlC,IAJH;AAKL,qBAAS,EALJ;AAML,wBAAY,OANP;AAOL,2BAAe,EAPV;AAQL,0BAAcsC;AART,WAAP;AAWD,SA3BD,MA6BK,IAAIN,KAAK,CAACC,MAAN,KAAiB,CAArB,EAAwB;AAC3B,cAAIC,IAAI,GAAGF,KAAK,CAAC,CAAD,CAAhB;AACAE,UAAAA,IAAI,GAAGA,IAAI,CAACC,OAAL,CAAa,IAAb,EAAmB,GAAnB,CAAP;AACA,cAAInC,IAAI,GAAGgC,KAAK,CAAC,CAAD,CAAhB;AAEA,iBAAO;AACL,kBAAME,IADD;AAEL,qBAASA,IAFJ;AAGL,2BAAe,EAHV;AAIL,oBAAQlC,IAJH;AAKL,qBAAS,EALJ;AAML,wBAAY,OANP;AAOL,2BAAe;AAPV,WAAP;AASD;AAEF,OAlDe,CAAhB;AAoDA,WAAKgB,QAAL,CAAc;AACZhC,QAAAA,IAAI,EAAE;AACJyD,UAAAA,MAAM,EAAEb;AADJ;AADM,OAAd;AAKA/B,MAAAA,OAAO,CAACC,GAAR,CAAY8B,SAAZ;AAED,KA/DH;AAgED;;AAEDc,EAAAA,MAAM,GAAG;AACP,WACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEE,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BACE,oBAAC,WAAD;AAAa,MAAA,EAAE,EAAC,MAAhB;AAAuB,MAAA,MAAM,EAAE,KAAKjC,KAAL,CAAWzB,IAA1C;AAAgD,MAAA,QAAQ,EAAGwB,KAAD,IAAW,KAAKD,aAAL,CAAmBC,KAAnB,CAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,EAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AAAO,MAAA,EAAE,EAAC,aAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAwB,oBAAC,UAAD;AAAY,MAAA,IAAI,EAAE,KAAKC,KAAL,CAAWC,QAA7B;AAAuC,MAAA,KAAK,EAAElC,MAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAxB,CADF,CAPF,CAFF,CADF;AAiBD;;AArMyB;;AAwM5B,eAAeG,GAAf","sourcesContent":["import React, { Component } from \"react\";\nimport './App.css';\nimport SplitterLayout from 'react-splitter-layout';\nimport 'react-splitter-layout/lib/index.css';\nimport Panel from 'muicss/lib/react/panel';\nimport DynamicForm from './components/dynamicForm/dynamicForm';\nimport myJson from './datatypes.json';\nimport txt from './datatypes.txt';\nimport json from './config/simple.json';\nimport axios from 'axios';\nimport JSONPretty from 'react-json-prettify';\nimport { github } from 'react-json-prettify/dist/themes';\nimport queryBuilder from 'elastic-builder';\n\n//const elasticsearch = require('elastic-search');\n//const esb = require('elastic-builder');\n\n\nvar formJson = {\n  \"name\": \"ABCz Form\",\n  \"fields\": []\n};\n\nclass App extends Component {\n\n  constructor(props) {\n\n    super(props);\n    this.state = {\n\n      form: formJson,\n      response: ''\n    }\n    this.handleClick = this.handleClick.bind(this)\n  }\n\n  handleClick() {\n    axios.get()\n      .then(res => {\n        this.setState({\n          todo: res.data\n        })\n      })\n  }\n\n  sendRequest() {\n    //console.log(\"handleclick\")\n    var panel = document.getElementById(\"resultPanel\");\n    axios.get('http://127.0.0.1:5000/query')\n      .then(response => {\n        //console.log(response);\n        this.setState({\n          response: response.data\n        })\n        //panel.innerHTML=response.data; \n      });\n  }\n\n  generateQuery = (formResults) => {\n    var form = JSON.parse(formResults);\n    //console.log(form.data[0].name)\n    //console.log(form.data[0].value)\n\n    // Bool query\n    const requestBody = queryBuilder.requestBodySearch().query(\n      queryBuilder.boolQuery()\n        .must(queryBuilder.matchQuery('last_name', 'smith'))\n        .filter(queryBuilder.rangeQuery('age').gt(30))\n    );\n    let json = JSON.stringify(requestBody, null, 4);\n\n      console.log(json)\n\n    /*\n    requestBody.toJSON();\n\n  \"query\": {\n    \"bool\": {\n      \"must\": {\n        \"match\": { \"last_name\": \"smith\" }\n      },\n      \"filter\": {\n        \"range\": { \"age\": { \"gt\": 30 } }\n      }\n    }\n  }\n}*/\n\n// Multi Match Query\nrequestBody = queryBuilder.requestBodySearch().query(\n  queryBuilder.multiMatchQuery(['title', 'body'], 'Quick brown fox')\n    .type('best_fields')\n    .tieBreaker(0.3)\n    .minimumShouldMatch('30%')\n);\n/*\nrequestBody.toJSON();\n{\n  \"multi_match\": {\n    \"query\": \"Quick brown fox\",\n    \"type\": \"best_fields\",\n    \"fields\": [\"title\", \"body\"],\n    \"tie_breaker\": 0.3,\n    \"minimum_should_match\": \"30%\"\n  }\n}*/\n\n// Aggregation\nrequestBody = queryBuilder.requestBodySearch()\n  .size(0)\n  .agg(queryBuilder.termsAggregation('popular_colors', 'color'));\n\n  /*\nrequestBody.toJSON();\n{\n  \"size\": 0,\n  \"aggs\": {\n    \"popular_colors\": {\n      \"terms\": { \"field\": \"color\" }\n    }\n  }\n}*/\n\n\n    this.sendRequest();\n\n  }\n\n  submitHandler = (event) => {\n    let json = JSON.stringify(event, null, 4);\n    this.generateQuery(json);\n    console.log(json);\n  }\n\n  componentWillMount() {\n\n    fetch(txt)\n      .then((r) => r.text())\n      .then(text => {\n        let myarray = text.split('\\n');\n        let dataArray = myarray.map((element, i) => {\n\n\n          var array = element.split(' ');\n\n          if (array.length === 4) {\n\n            let name = array[0];\n            name = name.replace(/_/g, ' ');\n            let type = array[1];\n            let options = array[2];\n            options = options.replace(/\\)/g, '');\n            options = options.replace(/\\(/g, '');\n            let optionsArray = options.split(',');\n\n            var optionData = { \"options\": [] };\n            var data = {};\n            optionsArray.map((option, i) => {\n              optionData.options.push({ \"display\": option });\n            })\n\n            return {\n              \"id\": name,\n              \"label\": name,\n              \"description\": \"\",\n              \"type\": type,\n              \"value\": \"\",\n              \"required\": \"false\",\n              \"placeholder\": \"\",\n              \"definition\": optionData\n            };\n\n          }\n\n          else if (array.length === 3) {\n            let name = array[0];\n            name = name.replace(/_/g, ' ');\n            let type = array[1];\n\n            return {\n              \"id\": name,\n              \"label\": name,\n              \"description\": \"\",\n              \"type\": type,\n              \"value\": \"\",\n              \"required\": \"false\",\n              \"placeholder\": \"\"\n            };\n          }\n\n        })\n\n        this.setState({\n          form: {\n            fields: dataArray\n          }\n        });\n        console.log(dataArray);\n\n      })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n\n        <SplitterLayout>\n          <div>Build a Query !\n            <DynamicForm id=\"form\" config={this.state.form} onSubmit={(event) => this.submitHandler(event)}></DynamicForm>\n\n          </div>\n\n\n          <div>\n            <Panel id=\"resultPanel\"><JSONPretty json={this.state.response} theme={github} /></Panel>\n          </div>\n        </SplitterLayout>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}