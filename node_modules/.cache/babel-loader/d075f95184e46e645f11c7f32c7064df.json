{"ast":null,"code":"'use strict';\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar MetricsAggregationBase = require('./metrics-aggregation-base'),\n    _require = require('../../core'),\n    Highlight = _require.Highlight,\n    Sort = _require.Sort,\n    _require$util = _require.util,\n    checkType = _require$util.checkType,\n    setDefault = _require$util.setDefault;\n\nvar ES_REF_URL = 'https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-metrics-top-hits-aggregation.html';\n/**\n * A `top_hits` metric aggregator keeps track of the most relevant document being\n * aggregated. This aggregator is intended to be used as a sub aggregator, so that\n * the top matching documents can be aggregated per bucket.\n *\n * [Elasticsearch reference](https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-metrics-top-hits-aggregation.html)\n *\n * `top_hits` metric aggregator keeps track of the most relevant document being\n * aggregated.\n *\n * @example\n * const reqBody = esb.requestBodySearch()\n *     .agg(\n *         esb.termsAggregation('top_tags', 'type')\n *             .size(3)\n *             .agg(\n *                 esb.topHitsAggregation('top_sales_hits')\n *                     .sort(esb.sort('date', 'desc'))\n *                     .source({ includes: ['date', 'price'] })\n *                     .size(1)\n *             )\n *     )\n *     .size(0);\n *\n * @example\n * // Field collapsing(logically groups a result set into\n * // groups and per group returns top documents)\n * const reqBody = esb.requestBodySearch()\n *     .query(esb.matchQuery('body', 'elections'))\n *     .agg(\n *         esb.termsAggregation('top-sites', 'domain')\n *             .order('top_hit', 'desc')\n *             .agg(esb.topHitsAggregation('top_tags_hits'))\n *             .agg(\n *                 esb.maxAggregation('top_hit').script(\n *                     esb.script('inline', '_score')\n *                 )\n *             )\n *     );\n *\n * @param {string} name The name which will be used to refer to this aggregation.\n *\n * @extends MetricsAggregationBase\n */\n\nvar TopHitsAggregation = function (_MetricsAggregationBa) {\n  (0, _inherits3.default)(TopHitsAggregation, _MetricsAggregationBa); // eslint-disable-next-line require-jsdoc\n\n  function TopHitsAggregation(name) {\n    (0, _classCallCheck3.default)(this, TopHitsAggregation);\n    return (0, _possibleConstructorReturn3.default)(this, (TopHitsAggregation.__proto__ || Object.getPrototypeOf(TopHitsAggregation)).call(this, name, 'top_hits'));\n  }\n  /**\n   * @override\n   * @throws {Error} This method cannot be called on TopHitsAggregation\n   */\n\n\n  (0, _createClass3.default)(TopHitsAggregation, [{\n    key: 'field',\n    value: function field() {\n      console.log('Please refer ' + ES_REF_URL);\n      throw new Error('field is not supported in TopHitsAggregation');\n    }\n    /**\n     * @override\n     * @throws {Error} This method cannot be called on TopHitsAggregation\n     */\n\n  }, {\n    key: 'script',\n    value: function script() {\n      console.log('Please refer ' + ES_REF_URL);\n      throw new Error('script is not supported in TopHitsAggregation');\n    }\n    /**\n     * @override\n     * @throws {Error} This method cannot be called on TopHitsAggregation\n     */\n\n  }, {\n    key: 'missing',\n    value: function missing() {\n      console.log('Please refer ' + ES_REF_URL);\n      throw new Error('missing is not supported in TopHitsAggregation');\n    }\n    /**\n     * @override\n     * @throws {Error} This method cannot be called on TopHitsAggregation\n     */\n\n  }, {\n    key: 'format',\n    value: function format() {\n      console.log('Please refer ' + ES_REF_URL);\n      throw new Error('format is not supported in TopHitsAggregation');\n    }\n    /**\n     * Sets the offset for fetching result.\n     *\n     * @param {number} from The offset from the first result you want to fetch.\n     * @returns {TopHitsAggregation} returns `this` so that calls can be chained\n     */\n\n  }, {\n    key: 'from',\n    value: function from(_from) {\n      this._aggsDef.from = _from;\n      return this;\n    }\n    /**\n     * Sets the maximum number of top matching hits to return per bucket.\n     *\n     * @param {number} size The numer of aggregation entries to be returned per bucket.\n     * @returns {TopHitsAggregation} returns `this` so that calls can be chained\n     */\n\n  }, {\n    key: 'size',\n    value: function size(_size) {\n      this._aggsDef.size = _size;\n      return this;\n    }\n    /**\n     * How the top matching hits should be sorted. Allows to add sort on specific field.\n     * The sort can be reversed as well. The sort is defined on a per field level,\n     * with special field name for `_score` to sort by score, and `_doc` to sort by\n     * index order.\n     *\n     * @param {Sort} sort How the top matching hits should be sorted.\n     * @returns {TopHitsAggregation} returns `this` so that calls can be chained.\n     * @throws {TypeError} If parameter `sort` is not an instance of `Sort`.\n     */\n\n  }, {\n    key: 'sort',\n    value: function sort(_sort) {\n      checkType(_sort, Sort);\n      setDefault(this._aggsDef, 'sort', []);\n\n      this._aggsDef.sort.push(_sort);\n\n      return this;\n    }\n    /**\n     * Allows to add multiple sort on specific fields. Each sort can be reversed as well.\n     * The sort is defined on a per field level, with special field name for _score to\n     * sort by score, and _doc to sort by index order.\n     *\n     * @param {Array<Sort>} sorts Arry of sort How the top matching hits should be sorted.\n     * @returns {TopHitsAggregation} returns `this` so that calls can be chained.\n     * @throws {TypeError} If any item in parameter `sorts` is not an instance of `Sort`.\n     */\n\n  }, {\n    key: 'sorts',\n    value: function sorts(_sorts) {\n      var _this2 = this;\n\n      _sorts.forEach(function (sort) {\n        return _this2.sort(sort);\n      });\n\n      return this;\n    }\n    /**\n     * Enables score computation and tracking during sorting.\n     * By default, sorting scores are not computed.\n     *\n     * @param {boolean} trackScores If scores should be computed and tracked. Defaults to false.\n     * @returns {TopHitsAggregation} returns `this` so that calls can be chained\n     */\n\n  }, {\n    key: 'trackScores',\n    value: function trackScores(_trackScores) {\n      this._aggsDef.track_scores = _trackScores;\n      return this;\n    }\n    /**\n     * Enable/Disable returning version number for each hit.\n     *\n     * @param {boolean} version true to enable, false to disable\n     * @returns {TopHitsAggregation} returns `this` so that calls can be chained\n     */\n\n  }, {\n    key: 'version',\n    value: function version(_version) {\n      this._aggsDef.version = _version;\n      return this;\n    }\n    /**\n     * Enable/Disable explanation of score for each hit.\n     *\n     * @param {boolean} explain true to enable, false to disable\n     * @returns {TopHitsAggregation} returns `this` so that calls can be chained\n     */\n\n  }, {\n    key: 'explain',\n    value: function explain(_explain) {\n      this._aggsDef.explain = _explain;\n      return this;\n    }\n    /**\n     * Performs highlighting based on the `Highlight` settings.\n     *\n     * @param {Highlight} highlight\n     * @returns {TopHitsAggregation} returns `this` so that calls can be chained\n     */\n\n  }, {\n    key: 'highlight',\n    value: function highlight(_highlight) {\n      checkType(_highlight, Highlight);\n      this._aggsDef.highlight = _highlight;\n      return this;\n    }\n    /**\n     * Allows to control how the `_source` field is returned with every hit.\n     * You can turn off `_source` retrieval by passing `false`.\n     * It also accepts one(string) or more wildcard(array) patterns to control\n     * what parts of the `_source` should be returned\n     * An object can also be used to specify the wildcard patterns for `includes` and `excludes`.\n     *\n     * @param {boolean|string|Array|Object} source\n     * @returns {TopHitsAggregation} returns `this` so that calls can be chained\n     */\n\n  }, {\n    key: 'source',\n    value: function source(_source) {\n      this._aggsDef._source = _source;\n      return this;\n    }\n    /**\n     * The stored_fields parameter is about fields that are explicitly marked as stored in the mapping.\n     * Selectively load specific stored fields for each document represented by a search hit\n     * using array of stored fields.\n     * An empty array will cause only the _id and _type for each hit to be returned.\n     * To disable the stored fields (and metadata fields) entirely use: '_none_'\n     *\n     * @param {Array|string} fields\n     * @returns {TopHitsAggregation} returns `this` so that calls can be chained\n     */\n\n  }, {\n    key: 'storedFields',\n    value: function storedFields(fields) {\n      this._aggsDef.stored_fields = fields;\n      return this;\n    }\n    /**\n     * Computes a document property dynamically based on the supplied `Script`.\n     *\n     * @param {string} scriptFieldName\n     * @param {string|Script} script string or instance of `Script`\n     * @returns {TopHitsAggregation} returns `this` so that calls can be chained\n     */\n\n  }, {\n    key: 'scriptField',\n    value: function scriptField(scriptFieldName, script) {\n      setDefault(this._aggsDef, 'script_fields', {});\n      this._aggsDef.script_fields[scriptFieldName] = {\n        script: script\n      };\n      return this;\n    }\n    /**\n     * Sets given dynamic document properties to be computed using supplied `Script`s.\n     *\n     * Object should have `scriptFieldName` as key and `script` as the value.\n     *\n     * @param {Object} scriptFields Object with `scriptFieldName` as key and `script` as the value.\n     * @returns {TopHitsAggregation} returns `this` so that calls can be chained\n     */\n\n  }, {\n    key: 'scriptFields',\n    value: function scriptFields(_scriptFields) {\n      var _this3 = this;\n\n      checkType(_scriptFields, Object);\n      Object.keys(_scriptFields).forEach(function (scriptFieldName) {\n        return _this3.scriptField(scriptFieldName, _scriptFields[scriptFieldName]);\n      });\n      return this;\n    }\n    /**\n     * Allows to return the doc value representation of a field for each hit.\n     * Doc value fields can work on fields that are not stored.\n     *\n     * @param {Array<string>} fields\n     * @returns {TopHitsAggregation} returns `this` so that calls can be chained\n     */\n\n  }, {\n    key: 'docvalueFields',\n    value: function docvalueFields(fields) {\n      this._aggsDef.docvalue_fields = fields;\n      return this;\n    }\n  }]);\n  return TopHitsAggregation;\n}(MetricsAggregationBase);\n\nmodule.exports = TopHitsAggregation;","map":null,"metadata":{},"sourceType":"script"}