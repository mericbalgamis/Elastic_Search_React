{"ast":null,"code":"'use strict';\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar isNil = require('lodash.isnil');\n\nvar _require = require('../../core'),\n    _require$util = _require.util,\n    checkType = _require$util.checkType,\n    setDefault = _require$util.setDefault,\n    invalidParam = _require$util.invalidParam;\n\nvar FullTextQueryBase = require('./full-text-query-base');\n\nvar invalidOperatorParam = invalidParam('', 'operator', \"'AND' or 'OR'\");\n/**\n * The `QueryStringQueryBase` provides support for common options used across\n * full text query implementations `QueryStringQuery` and `SimpleQueryStringQuery`.\n * A query that uses a query parser in order to parse its content.\n *\n * **NOTE:** Instantiating this directly should not be required.\n * However, if you wish to add a custom implementation for whatever reason,\n * this class could be extended.\n *\n * [Elasticsearch reference](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-query-string-query.html)\n *\n * @param {string} queryType\n * @param {string} refUrl\n * @param {string=} queryString The actual query to be parsed.\n *\n * @extends FullTextQueryBase\n */\n\nvar QueryStringQueryBase = function (_FullTextQueryBase) {\n  (0, _inherits3.default)(QueryStringQueryBase, _FullTextQueryBase); // eslint-disable-next-line require-jsdoc\n\n  function QueryStringQueryBase(queryType, refUrl, queryString) {\n    (0, _classCallCheck3.default)(this, QueryStringQueryBase);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (QueryStringQueryBase.__proto__ || Object.getPrototypeOf(QueryStringQueryBase)).call(this, queryType, queryString));\n\n    _this._refUrl = refUrl;\n    return _this;\n  }\n  /**\n   * Appends given field to the list of fields to search against.\n   * Fields can be specified with wildcards.\n   *\n   * Individual fields can be boosted with the caret (^) notation.\n   * Example - `\"subject^3\"`\n   *\n   * @example\n   * const qry = esb.queryStringQuery('this AND that OR thus')\n   *     .field('city.*')\n   *     .useDisMax(true);\n   *\n   * @example\n   * const qry = esb.simpleQueryStringQuery('foo bar -baz').field('content');\n   *\n   * @param {string} field One of the fields to be queried\n   * @returns {QueryStringQueryBase} returns `this` so that calls can be chained.\n   */\n\n\n  (0, _createClass3.default)(QueryStringQueryBase, [{\n    key: 'field',\n    value: function field(_field) {\n      setDefault(this._queryOpts, 'fields', []);\n\n      this._queryOpts.fields.push(_field);\n\n      return this;\n    }\n    /**\n     * Appends given fields to the list of fields to search against.\n     * Fields can be specified with wildcards.\n     *\n     * Individual fields can be boosted with the caret (^) notation.\n     * Example - `[ \"subject^3\", \"message\" ]`\n     *\n     * @example\n     * const qry = esb.queryStringQuery('this AND that')\n     *     .fields(['content', 'name'])\n     *\n     * @example\n     * const qry = esb.simpleQueryStringQuery('foo bar baz')\n     *     .fields(['content', 'name.*^5']);\n     *\n     * @param {Array<string>} fields The fields to be queried\n     * @returns {QueryStringQueryBase} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'fields',\n    value: function fields(_fields) {\n      checkType(_fields, Array);\n      setDefault(this._queryOpts, 'fields', []);\n      this._queryOpts.fields = this._queryOpts.fields.concat(_fields);\n      return this;\n    }\n    /**\n     * The default operator used if no explicit operator is specified.\n     * For example, with a default operator of `OR`, the query `capital of Hungary`\n     * is translated to `capital OR of OR Hungary`, and with default operator of AND,\n     * the same query is translated to `capital AND of AND Hungary`.\n     * The default value is OR.\n     *\n     * @param {string} operator Can be `AND`/`OR`. Default is `OR`.\n     * @returns {QueryStringQueryBase} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'defaultOperator',\n    value: function defaultOperator(operator) {\n      if (isNil(operator)) invalidOperatorParam(operator, this._refUrl);\n      var operatorUpper = operator.toUpperCase();\n\n      if (operatorUpper !== 'AND' && operatorUpper !== 'OR') {\n        invalidOperatorParam(operator, this._refUrl);\n      }\n\n      this._queryOpts.default_operator = operatorUpper;\n      return this;\n    }\n    /**\n     * By default, wildcards terms in a query string are not analyzed.\n     * By setting this value to `true`, a best effort will be made to analyze those as well.\n     *\n     * @param {boolean} enable\n     * @returns {QueryStringQueryBase} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'analyzeWildcard',\n    value: function analyzeWildcard(enable) {\n      this._queryOpts.analyze_wildcard = enable;\n      return this;\n    }\n    /**\n     * Sets the `lenient` parameter which allows to ignore exceptions caused\n     * by data-type mismatches such as trying to query a numeric field with a\n     * text query string when set to `true`.\n     *\n     * @param {boolean} enable Defaules to `false`\n     * @returns {QueryStringQueryBase} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'lenient',\n    value: function lenient(enable) {\n      this._queryOpts.lenient = enable;\n      return this;\n    }\n    /**\n     * A suffix to append to fields for quoted parts of the query string.\n     * This allows to use a field that has a different analysis chain for exact matching.\n     *\n     * @param {string} suffix\n     * @returns {QueryStringQueryBase} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'quoteFieldSuffix',\n    value: function quoteFieldSuffix(suffix) {\n      this._queryOpts.quote_field_suffix = suffix;\n      return this;\n    }\n    /**\n     * Perform the query on all fields detected in the mapping that can be queried.\n     * Will be used by default when the `_all` field is disabled and\n     * no `default_field` is specified (either in the index settings or\n     * in the request body) and no `fields` are specified.\n     * @param {boolean} enable\n     * @returns {QueryStringQueryBase} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'allFields',\n    value: function allFields(enable) {\n      this._queryOpts.all_fields = enable;\n      return this;\n    }\n  }]);\n  return QueryStringQueryBase;\n}(FullTextQueryBase);\n\nmodule.exports = QueryStringQueryBase;","map":null,"metadata":{},"sourceType":"script"}