{"ast":null,"code":"'use strict';\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar isNil = require('lodash.isnil');\n\nvar _require = require('../../core'),\n    Query = _require.Query,\n    checkType = _require.util.checkType;\n/**\n * A query that wraps another query and simply returns a constant score\n * equal to the query boost for every document in the filter.\n * Maps to Lucene `ConstantScoreQuery`.\n *\n * Constructs a query where each documents returned by the internal\n * query or filter have a constant score equal to the boost factor.\n *\n * [Elasticsearch reference](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-constant-score-query.html)\n *\n * @example\n * const qry = esb.constantScoreQuery(esb.termQuery('user', 'kimchy')).boost(1.2);\n *\n * @param {Query=} filterQuery Query to filter on.\n *\n * @extends Query\n */\n\n\nvar ConstantScoreQuery = function (_Query) {\n  (0, _inherits3.default)(ConstantScoreQuery, _Query); // eslint-disable-next-line require-jsdoc\n\n  function ConstantScoreQuery(filterQuery) {\n    (0, _classCallCheck3.default)(this, ConstantScoreQuery);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (ConstantScoreQuery.__proto__ || Object.getPrototypeOf(ConstantScoreQuery)).call(this, 'constant_score'));\n\n    if (!isNil(filterQuery)) _this.filter(filterQuery);\n    return _this;\n  }\n  /**\n   * Adds the query to apply a constant score to.\n   *\n   * @param {Query} filterQuery  Query to filter on.\n   * @returns {ConstantScoreQuery} returns `this` so that calls can be chained.\n   */\n\n\n  (0, _createClass3.default)(ConstantScoreQuery, [{\n    key: 'filter',\n    value: function filter(filterQuery) {\n      checkType(filterQuery, Query);\n      this._queryOpts.filter = filterQuery;\n      return this;\n    }\n    /**\n     * Adds the query to apply a constant score to.\n     * Alias for method `filter`.\n     *\n     * Note: This parameter has been removed in elasticsearch 6.0. Use `filter` instead.\n     *\n     * @param {Query} filterQuery  Query to filter on.\n     * @returns {ConstantScoreQuery} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'query',\n    value: function query(filterQuery) {\n      return this.filter(filterQuery);\n    }\n  }]);\n  return ConstantScoreQuery;\n}(Query);\n\nmodule.exports = ConstantScoreQuery;","map":null,"metadata":{},"sourceType":"script"}