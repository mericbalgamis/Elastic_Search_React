{"ast":null,"code":"'use strict';\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar isNil = require('lodash.isnil');\n\nvar isEmpty = require('lodash.isempty');\n/**\n * Base class implementation for all suggester types.\n *\n * **NOTE:** Instantiating this directly should not be required.\n * However, if you wish to add a custom implementation for whatever reason,\n * this class should be extended and used, as validation against the class\n * type is present in various places.\n *\n * @param {string} suggesterType The type of suggester.\n * Can be one of `term`, `phrase`, `completion`\n * @param {string} name The name of the Suggester, an arbitrary identifier\n * @param {string=} field The field to fetch the candidate suggestions from.\n *\n * @throws {Error} if `name` is empty\n * @throws {Error} if `suggesterType` is empty\n */\n\n\nvar Suggester = function () {\n  // eslint-disable-next-line require-jsdoc\n  function Suggester(suggesterType, name, field) {\n    (0, _classCallCheck3.default)(this, Suggester);\n    if (isEmpty(suggesterType)) throw new Error('Suggester `suggesterType` cannot be empty');\n    if (isEmpty(name)) throw new Error('Suggester `name` cannot be empty');\n    this.name = name;\n    this.suggesterType = suggesterType;\n    this._body = {};\n    this._opts = this._body[name] = {};\n    this._suggestOpts = this._opts[suggesterType] = {};\n    if (!isNil(field)) this._suggestOpts.field = field;\n  }\n  /**\n   * Sets field to fetch the candidate suggestions from. This is a required option\n   * that either needs to be set globally or per suggestion.\n   *\n   * @param {string} field a valid field name\n   * @returns {Suggester} returns `this` so that calls can be chained\n   */\n\n\n  (0, _createClass3.default)(Suggester, [{\n    key: 'field',\n    value: function field(_field) {\n      this._suggestOpts.field = _field;\n      return this;\n    }\n    /**\n     * Sets the number of suggestions to return (defaults to `5`).\n     *\n     * @param {number} size\n     * @returns {Suggester} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'size',\n    value: function size(_size) {\n      this._suggestOpts.size = _size;\n      return this;\n    }\n    /**\n     * Override default `toJSON` to return DSL representation for the `suggester`\n     *\n     * @override\n     * @returns {Object} returns an Object which maps to the elasticsearch DSL\n     */\n\n  }, {\n    key: 'toJSON',\n    value: function toJSON() {\n      return this._body;\n    }\n  }]);\n  return Suggester;\n}();\n\nmodule.exports = Suggester;","map":null,"metadata":{},"sourceType":"script"}