{"ast":null,"code":"'use strict';\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar isNil = require('lodash.isnil');\n\nvar _require = require('../core'),\n    Suggester = _require.Suggester;\n/**\n * The `AnalyzedSuggesterBase` provides support for common options used\n * in `TermSuggester` and `PhraseSuggester`.\n *\n * **NOTE:** Instantiating this directly should not be required.\n * However, if you wish to add a custom implementation for whatever reason,\n * this class could be extended.\n *\n * @param {string} suggesterType The type of suggester.\n * Can be one of `term`, `phrase`\n * @param {string} name The name of the Suggester, an arbitrary identifier\n * @param {string=} field The field to fetch the candidate suggestions from.\n * @param {string=} txt A string to get suggestions for.\n *\n * @throws {Error} if `name` is empty\n * @throws {Error} if `suggesterType` is empty\n *\n * @extends Suggester\n */\n\n\nvar AnalyzedSuggesterBase = function (_Suggester) {\n  (0, _inherits3.default)(AnalyzedSuggesterBase, _Suggester); // eslint-disable-next-line require-jsdoc\n\n  function AnalyzedSuggesterBase(suggesterType, name, field, txt) {\n    (0, _classCallCheck3.default)(this, AnalyzedSuggesterBase);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (AnalyzedSuggesterBase.__proto__ || Object.getPrototypeOf(AnalyzedSuggesterBase)).call(this, suggesterType, name, field));\n\n    if (!isNil(txt)) _this._opts.text = txt;\n    return _this;\n  }\n  /**\n   * Sets the text to get suggestions for. If not set, the global\n   * suggestion text will be used.\n   *\n   * @param {string} txt A string to get suggestions for.\n   * @returns {AnalyzedSuggesterBase} returns `this` so that calls can be chained.\n   */\n\n\n  (0, _createClass3.default)(AnalyzedSuggesterBase, [{\n    key: 'text',\n    value: function text(txt) {\n      this._opts.text = txt;\n      return this;\n    }\n    /**\n     * Sets the analyzer to analyse the suggest text with. Defaults to\n     * the search analyzer of the suggest field.\n     *\n     * @param {string} analyzer The analyzer to analyse the suggest text with.\n     * @returns {AnalyzedSuggesterBase} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'analyzer',\n    value: function analyzer(_analyzer) {\n      this._suggestOpts.analyzer = _analyzer;\n      return this;\n    }\n    /**\n     * Sets the maximum number of suggestions to be retrieved from each individual shard.\n     * During the reduce phase only the top N suggestions are returned based on the `size`\n     * option. Defaults to the `size` option. Setting this to a value higher than the `size`\n     * can be useful in order to get a more accurate document frequency for spelling\n     * corrections at the cost of performance. Due to the fact that terms are partitioned\n     * amongst shards, the shard level document frequencies of spelling corrections\n     * may not be precise. Increasing this will make these document frequencies\n     * more precise.\n     *\n     * @param {number} size\n     * @returns {AnalyzedSuggesterBase} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'shardSize',\n    value: function shardSize(size) {\n      this._suggestOpts.shard_size = size;\n      return this;\n    }\n  }]);\n  return AnalyzedSuggesterBase;\n}(Suggester);\n\nmodule.exports = AnalyzedSuggesterBase;","map":null,"metadata":{},"sourceType":"script"}