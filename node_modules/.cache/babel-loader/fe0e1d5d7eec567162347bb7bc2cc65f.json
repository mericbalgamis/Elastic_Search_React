{"ast":null,"code":"'use strict';\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar HistogramAggregationBase = require('./histogram-aggregation-base');\n/**\n * A multi-bucket aggregation similar to the histogram except it can only be applied on date values.\n * The interval can be specified by date/time expressions.\n *\n * [Elasticsearch reference](https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-datehistogram-aggregation.html#_scripts)\n *\n * @example\n * const agg = esb.dateHistogramAggregation('sales_over_time', 'date', 'month');\n *\n * @example\n * const agg = esb.dateHistogramAggregation(\n *     'sales_over_time',\n *     'date',\n *     '1M'\n * ).format('yyyy-MM-dd');\n *\n * @param {string} name The name which will be used to refer to this aggregation.\n * @param {string=} field The field to aggregate on\n * @param {string=} interval Interval to generate histogram over.\n * Available expressions for interval: year, quarter, month, week, day, hour, minute, second\n *\n * @extends HistogramAggregationBase\n */\n\n\nvar DateHistogramAggregation = function (_HistogramAggregation) {\n  (0, _inherits3.default)(DateHistogramAggregation, _HistogramAggregation); // eslint-disable-next-line require-jsdoc\n\n  function DateHistogramAggregation(name, field, interval) {\n    (0, _classCallCheck3.default)(this, DateHistogramAggregation);\n    return (0, _possibleConstructorReturn3.default)(this, (DateHistogramAggregation.__proto__ || Object.getPrototypeOf(DateHistogramAggregation)).call(this, name, 'date_histogram', field, interval));\n  }\n  /**\n   * Date-times are stored in Elasticsearch in UTC.\n   * By default, all bucketing and rounding is also done in UTC.\n   * The `time_zone` parameter can be used to indicate that bucketing should use a different time zone.\n   * Sets the date time zone\n   *\n   * @example\n   * const agg = esb.dateHistogramAggregation('by_day', 'date', 'day').timeZone(\n   *     '-01:00'\n   * );\n   *\n   * @param {string} tz Time zone. Time zones may either be specified\n   * as an ISO 8601 UTC offset (e.g. +01:00 or -08:00) or as a timezone id,\n   * an identifier used in the TZ database like America/Los_Angeles.\n   * @returns {DateHistogramAggregation} returns `this` so that calls can be chained\n   */\n\n\n  (0, _createClass3.default)(DateHistogramAggregation, [{\n    key: 'timeZone',\n    value: function timeZone(tz) {\n      this._aggsDef.time_zone = tz;\n      return this;\n    }\n  }]);\n  return DateHistogramAggregation;\n}(HistogramAggregationBase);\n\nmodule.exports = DateHistogramAggregation;","map":null,"metadata":{},"sourceType":"script"}