{"ast":null,"code":"'use strict';\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar isNil = require('lodash.isnil');\n\nvar _require = require('../../core'),\n    Query = _require.Query;\n/**\n * The `FullTextQueryBase` provides support for common options used across\n * various full text query implementations.\n *\n * **NOTE:** Instantiating this directly should not be required.\n * However, if you wish to add a custom implementation for whatever reason,\n * this class could be extended.\n *\n * @param {string} queryType\n * @param {string=} queryString The query string\n *\n * @extends Query\n */\n\n\nvar FullTextQueryBase = function (_Query) {\n  (0, _inherits3.default)(FullTextQueryBase, _Query);\n  /*\n      Common options:\n      analyzer - applicable on all\n      minimum_should_match - applicable on all except Match Phrase and Match Phrase Prefix\n      query - applicable on all\n  */\n  // eslint-disable-next-line require-jsdoc\n\n  function FullTextQueryBase(queryType, queryString) {\n    (0, _classCallCheck3.default)(this, FullTextQueryBase);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (FullTextQueryBase.__proto__ || Object.getPrototypeOf(FullTextQueryBase)).call(this, queryType));\n\n    if (!isNil(queryString)) _this._queryOpts.query = queryString;\n    return _this;\n  }\n  /**\n   * Set the analyzer to control which analyzer will perform the analysis process on the text\n   *\n   * @example\n   * const qry = esb.matchPhraseQuery('message', 'this is a test')\n   *     .analyzer('my_analyzer');\n   *\n   * @example\n   * const qry = esb.multiMatchQuery(['first', 'last', '*.edge'], 'Jon')\n   *     .type('cross_fields')\n   *     .analyzer('standard');\n   *\n   * @param {string} analyzer\n   * @returns {FullTextQueryBase} returns `this` so that calls can be chained.\n   */\n\n\n  (0, _createClass3.default)(FullTextQueryBase, [{\n    key: 'analyzer',\n    value: function analyzer(_analyzer) {\n      this._queryOpts.analyzer = _analyzer;\n      return this;\n    }\n    /**\n     * Sets the value controlling how many \"should\" clauses in the resulting boolean\n     * query should match. It can be an absolute value (2), a percentage (30%)\n     * or a combination of both. For Common Terms Query when specifying different\n     * `minimum_should_match` for low and high frequency terms, an object with the\n     * keys `low_freq` and `high_freq` can be used.\n     *\n     * @example\n     * const qry = esb.commonTermsQuery('body', 'nelly the elephant as a cartoon')\n     *     .minimumShouldMatch(2)\n     *     .cutoffFrequency(0.001);\n     *\n     * @param {string|number|Object} minimumShouldMatch\n     * Note: Object notation can only be used with Common Terms Query.\n     * @returns {FullTextQueryBase} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'minimumShouldMatch',\n    value: function minimumShouldMatch(_minimumShouldMatch) {\n      this._queryOpts.minimum_should_match = _minimumShouldMatch;\n      return this;\n    }\n    /**\n     * Sets the query string.\n     *\n     * @example\n     * const qry = esb.queryStringQuery()\n     *     .query('city.\\\\*:(this AND that OR thus)')\n     *     .useDisMax(true);\n     *\n     * @param {string} queryString\n     * @returns {FullTextQueryBase} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'query',\n    value: function query(queryString) {\n      this._queryOpts.query = queryString;\n      return this;\n    }\n  }]);\n  return FullTextQueryBase;\n}(Query);\n\nmodule.exports = FullTextQueryBase;","map":null,"metadata":{},"sourceType":"script"}