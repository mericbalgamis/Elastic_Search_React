{"ast":null,"code":"'use strict';\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar MetricsAggregationBase = require('./metrics-aggregation-base');\n/**\n * A multi-value metrics aggregation that computes stats over numeric values\n * extracted from the aggregated documents. These values can be extracted either\n * from specific numeric fields in the documents, or be generated by a provided\n * script.\n *\n * [Elasticsearch reference](https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-metrics-extendedstats-aggregation.html)\n *\n * Aggregation that computes extra stats over numeric values extracted from\n * the aggregated documents.\n *\n * @example\n * const agg = esb.extendedStatsAggregation('grades_stats', 'grade');\n *\n * @example\n * // Compute the grade stats based on a script\n * const agg = esb.extendedStatsAggregation('grades_stats').script(\n *     esb.script('inline', \"doc['grade'].value\").lang('painless')\n * );\n *\n * @example\n * // Value script, apply grade correction\n * const agg = esb.extendedStatsAggregation('grades_stats', 'grade').script(\n *     esb.script('inline', '_value * params.correction')\n *         .lang('painless')\n *         .params({ correction: 1.2 })\n * );\n *\n * @example\n * // Missing value\n * const agg = esb.extendedStatsAggregation('grades_stats', 'grade').missing(0);\n *\n * @param {string} name The name which will be used to refer to this aggregation.\n * @param {string=} field The field to aggregate on\n *\n * @extends MetricsAggregationBase\n */\n\n\nvar ExtendedStatsAggregation = function (_MetricsAggregationBa) {\n  (0, _inherits3.default)(ExtendedStatsAggregation, _MetricsAggregationBa); // eslint-disable-next-line require-jsdoc\n\n  function ExtendedStatsAggregation(name, field) {\n    (0, _classCallCheck3.default)(this, ExtendedStatsAggregation);\n    return (0, _possibleConstructorReturn3.default)(this, (ExtendedStatsAggregation.__proto__ || Object.getPrototypeOf(ExtendedStatsAggregation)).call(this, name, 'extended_stats', field));\n  }\n  /**\n   * Set sigma in the request for getting custom boundary.\n   * sigma controls how many standard deviations +/- from the mean should be displayed\n   *\n   * @example\n   * const agg = esb.extendedStatsAggregation('grades_stats', 'grade').sigma(3);\n   *\n   * @param {number} sigma sigma can be any non-negative double,\n   * meaning you can request non-integer values such as 1.5.\n   * A value of 0 is valid, but will simply return the average for both upper and lower bounds.\n   * @returns {ExtendedStatsAggregation} returns `this` so that calls can be chained\n   */\n\n\n  (0, _createClass3.default)(ExtendedStatsAggregation, [{\n    key: 'sigma',\n    value: function sigma(_sigma) {\n      this._aggsDef.sigma = _sigma;\n      return this;\n    }\n  }]);\n  return ExtendedStatsAggregation;\n}(MetricsAggregationBase);\n\nmodule.exports = ExtendedStatsAggregation;","map":null,"metadata":{},"sourceType":"script"}