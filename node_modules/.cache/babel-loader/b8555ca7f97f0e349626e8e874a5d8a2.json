{"ast":null,"code":"'use strict';\n\nvar isNil = require('lodash.isnil');\n\nvar _require = require('./queries'),\n    MatchAllQuery = _require.MatchAllQuery,\n    ExistsQuery = _require.termLevelQueries.ExistsQuery,\n    _require$compoundQuer = _require.compoundQueries,\n    BoolQuery = _require$compoundQuer.BoolQuery,\n    FunctionScoreQuery = _require$compoundQuer.FunctionScoreQuery,\n    RandomScoreFunction = _require$compoundQuer.scoreFunctions.RandomScoreFunction;\n\nvar _require2 = require('./core'),\n    Query = _require2.Query,\n    checkType = _require2.util.checkType;\n/**\n * Recipe for the now removed `missing` query.\n *\n * Can be accessed using `esb.recipes.missingQuery` OR `esb.cookMissingQuery`.\n *\n * [Elasticsearch refererence](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-exists-query.html#_literal_missing_literal_query)\n *\n * @example\n * const qry = esb.cookMissingQuery('user');\n *\n * qry.toJSON();\n * {\n *   \"bool\": {\n *     \"must_not\": {\n *       \"exists\": {\n *         \"field\": \"user\"\n *       }\n *     }\n *   }\n * }\n *\n * @param {string} field The field which should be missing the value.\n * @returns {BoolQuery} A boolean query with a `must_not` `exists` clause is returned.\n */\n\n\nexports.missingQuery = function missingQuery(field) {\n  return new BoolQuery().mustNot(new ExistsQuery(field));\n};\n/**\n * Recipe for random sort query. Takes a query and returns the same\n * wrapped in a random scoring query.\n *\n * Can be accessed using `esb.recipes.randomSortQuery` OR `esb.cookRandomSortQuery`.\n *\n * [Elasticsearch reference](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-function-score-query.html#function-random)\n *\n * @example\n * const reqBody = esb.requestBodySearch()\n *     .query(esb.cookRandomSortQuery(esb.rangeQuery('age').gte(10)))\n *     .size(100);\n *\n * reqBody.toJSON();\n * {\n *   \"query\": {\n *     \"function_score\": {\n *       \"query\": {\n *         \"range\": { \"age\": { \"gte\": 10 } }\n *       },\n *       \"random_score\": {}\n *     }\n *   },\n *   \"size\": 100\n * }\n *\n * @param {Query=} query The query to fetch documents for. Defaults to `match_all` query.\n * @param {number=} seed A seed value for the random score function.\n * @returns {FunctionScoreQuery} A `function_score` query with random sort applied\n * @throws {TypeError} If `query` is not an instance of `Query`.\n */\n\n\nexports.randomSortQuery = function randomSortQuery() {\n  var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new MatchAllQuery();\n  var seed = arguments[1];\n  checkType(query, Query);\n  var func = new RandomScoreFunction();\n  return new FunctionScoreQuery().query(query).function(isNil(seed) ? func : func.seed(seed));\n};\n/**\n * Recipe for constructing a filter query using `bool` query.\n * Optionally, scoring can be enabled.\n *\n * Can be accessed using `esb.recipes.filterQuery` OR `esb.cookFilterQuery`.\n *\n * [Elasticsearch reference](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-bool-query.html)\n *\n * @example\n * const boolQry = esb.cookFilterQuery(esb.termQuery('status', 'active'), true);\n * boolQry.toJSON();\n * {\n *   \"bool\": {\n *     \"must\": { \"match_all\": {} },\n *     \"filter\": {\n *       \"term\": { \"status\": \"active\" }\n *     }\n *   }\n * }\n *\n * @param {Query} query The query to fetch documents for.\n * @param {boolean=} scoring Optional flag for enabling/disabling scoring. Disabled by default.\n * If enabled, a score of `1.0` will be assigned to all documents.\n * @returns {BoolQuery} A `bool` query with a `filter` clause is returned.\n * @throws {TypeError} If `query` is not an instance of `Query`.\n */\n\n\nexports.filterQuery = function filterQuery(query) {\n  var scoring = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  checkType(query, Query);\n  var boolQry = new BoolQuery().filter(query);\n  return scoring === true ? boolQry.must(new MatchAllQuery()) : boolQry;\n};","map":null,"metadata":{},"sourceType":"script"}