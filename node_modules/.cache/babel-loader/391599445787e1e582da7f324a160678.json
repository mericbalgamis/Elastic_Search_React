{"ast":null,"code":"'use strict';\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar isNil = require('lodash.isnil');\n/**\n * A shape which has already been indexed in another index and/or index\n * type. This is particularly useful for when you have a pre-defined list of\n * shapes which are useful to your application and you want to reference this\n * using a logical name (for example 'New Zealand') rather than having to\n * provide their coordinates each time.\n *\n * @example\n * const shape = esb.indexedShape('DEU', 'countries')\n *     .index('shapes')\n *     .path('location');\n *\n * const shape = esb.indexedShape()\n *     .id('DEU')\n *     .type('countries')\n *     .index('shapes')\n *     .path('location');\n *\n * @param {string=} id The document id of the shape.\n * @param {string=} type The name of the type where the shape is indexed.\n */\n\n\nvar IndexedShape = function () {\n  // eslint-disable-next-line require-jsdoc\n  function IndexedShape(id, type) {\n    (0, _classCallCheck3.default)(this, IndexedShape);\n    this._body = {};\n    if (!isNil(id)) this._body.id = id;\n    if (!isNil(type)) this._body.type = type;\n  }\n  /**\n   * Sets the ID of the document that containing the pre-indexed shape.\n   *\n   * @param {string} id The document id of the shape.\n   * @returns {IndexedShape} returns `this` so that calls can be chained.\n   */\n\n\n  (0, _createClass3.default)(IndexedShape, [{\n    key: 'id',\n    value: function id(_id) {\n      this._body.id = _id;\n      return this;\n    }\n    /**\n     * Sets the index type where the pre-indexed shape is.\n     *\n     * @param {string} type The name of the type where the shape is indexed.\n     * @returns {IndexedShape} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'type',\n    value: function type(_type) {\n      this._body.type = _type;\n      return this;\n    }\n    /**\n     * Sets the name of the index where the pre-indexed shape is. Defaults to `shapes`.\n     *\n     * @param {string} index A valid index name\n     * @returns {IndexedShape} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'index',\n    value: function index(_index) {\n      this._body.index = _index;\n      return this;\n    }\n    /**\n     * Sets the field specified as path containing the pre-indexed shape.\n     * Defaults to `shape`.\n     *\n     * @param {string} path field name.\n     * @returns {IndexedShape} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'path',\n    value: function path(_path) {\n      this._body.path = _path;\n      return this;\n    }\n    /**\n     * Override default `toJSON` to return DSL representation of the geo shape\n     * class instance.\n     *\n     * @override\n     * @returns {Object} returns an Object which maps to the elasticsearch query DSL\n     */\n\n  }, {\n    key: 'toJSON',\n    value: function toJSON() {\n      return this._body;\n    }\n  }]);\n  return IndexedShape;\n}();\n\nmodule.exports = IndexedShape;","map":null,"metadata":{},"sourceType":"script"}