{"ast":null,"code":"'use strict';\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar isNil = require('lodash.isnil');\n\nvar Sort = require('./sort');\n\nvar Highlight = require('./highlight');\n\nvar _require = require('./util'),\n    checkType = _require.checkType,\n    setDefault = _require.setDefault,\n    recursiveToJSON = _require.recursiveToJSON;\n/**\n * Inner hits returns per search hit in the search response additional\n * nested hits that caused a search hit to match in a different scope.\n * Inner hits can be used by defining an `inner_hits` definition on a\n * `nested`, `has_child` or `has_parent` query and filter.\n *\n * [Elasticsearch reference](https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-inner-hits.html)\n *\n * @example\n * const reqBody = esb.requestBodySearch().query(\n *     esb.nestedQuery(\n *         esb.matchQuery('comments.message', '[actual query]')\n *     ).innerHits(\n *         esb.innerHits().source(false).storedFields(['comments.text'])\n *     )\n * );\n *\n * @param {string=} name The name to be used for the particular inner hit definition\n * in the response. Useful when multiple inner hits have been defined in a single\n * search request. The default depends in which query the inner hit is defined.\n */\n\n\nvar InnerHits = function () {\n  // eslint-disable-next-line require-jsdoc\n  function InnerHits(name) {\n    (0, _classCallCheck3.default)(this, InnerHits); // Maybe accept some optional parameter?\n\n    this._body = {};\n    if (!isNil(name)) this._body.name = name;\n  }\n  /**\n   * The name to be used for the particular inner hit definition\n   * in the response. Useful when multiple inner hits have been defined in a single\n   * search request. The default depends in which query the inner hit is defined.\n   *\n   * @param {number} name\n   * @returns {InnerHits} returns `this` so that calls can be chained.\n   */\n\n\n  (0, _createClass3.default)(InnerHits, [{\n    key: 'name',\n    value: function name(_name) {\n      this._body.name = _name;\n      return this;\n    }\n    /**\n     * The offset from where the first hit to fetch for each `inner_hits` in the returned\n     * regular search hits.\n     *\n     * @param {number} from\n     * @returns {InnerHits} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'from',\n    value: function from(_from) {\n      this._body.from = _from;\n      return this;\n    }\n    /**\n     * The maximum number of hits to return per inner_hits.\n     * By default the top three matching hits are returned.\n     *\n     * @param {number} size Defaults to 10.\n     * @returns {InnerHits} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'size',\n    value: function size(_size) {\n      this._body.size = _size;\n      return this;\n    }\n    /**\n     * How the inner hits should be sorted per inner_hits.\n     * By default the hits are sorted by the score.\n     *\n     * @param {Sort} sort\n     * @returns {InnerHits} returns `this` so that calls can be chained.\n     * @throws {TypeError} If parameter `sort` is not an instance of `Sort`.\n     */\n\n  }, {\n    key: 'sort',\n    value: function sort(_sort) {\n      checkType(_sort, Sort);\n      setDefault(this._body, 'sort', []);\n\n      this._body.sort.push(_sort);\n\n      return this;\n    }\n    /**\n     * Allows to add multiple sort on specific fields. Each sort can be reversed as well.\n     * The sort is defined on a per field level, with special field name for _score to\n     * sort by score, and _doc to sort by index order.\n     *\n     * @param {Array<Sort>} sorts Array of sort\n     * @returns {InnerHits} returns `this` so that calls can be chained.\n     * @throws {TypeError} If any item in parameter `sorts` is not an instance of `Sort`.\n     */\n\n  }, {\n    key: 'sorts',\n    value: function sorts(_sorts) {\n      var _this = this;\n\n      _sorts.forEach(function (sort) {\n        return _this.sort(sort);\n      });\n\n      return this;\n    }\n    /**\n     * Allows to highlight search results on one or more fields. The implementation\n     * uses either the lucene `plain` highlighter, the fast vector highlighter (`fvh`)\n     * or `postings` highlighter.\n     *\n     * Note: The `postings` highlighter has been removed in elasticsearch 6.0.\n     * The `unified` highlighter outputs the same highlighting when\n     * `index_options` is set to `offsets`.\n     *\n     * @param {Highlight} highlight\n     * @returns {InnerHits} returns `this` so that calls can be chained\n     */\n\n  }, {\n    key: 'highlight',\n    value: function highlight(_highlight) {\n      checkType(_highlight, Highlight);\n      this._body.highlight = _highlight;\n      return this;\n    }\n    /**\n     * Enables explanation for each hit on how its score was computed.\n     *\n     * @param {boolean} enable\n     * @returns {InnerHits} returns `this` so that calls can be chained\n     */\n\n  }, {\n    key: 'explain',\n    value: function explain(enable) {\n      this._body.explain = enable;\n      return this;\n    }\n    /**\n     * Allows to control how the `_source` field is returned with every hit.\n     * You can turn off `_source` retrieval by passing `false`.\n     * It also accepts one(string) or more wildcard(array) patterns to control\n     * what parts of the `_source` should be returned\n     * An object can also be used to specify the wildcard patterns for `includes` and `excludes`.\n     *\n     * @param {boolean|string|Array|Object} source\n     * @returns {InnerHits} returns `this` so that calls can be chained\n     */\n\n  }, {\n    key: 'source',\n    value: function source(_source) {\n      this._body._source = _source;\n      return this;\n    }\n    /**\n     * Include specific stored fields\n     *\n     * @param {Array|string} fields\n     * @returns {InnerHits} returns `this` so that calls can be chained\n     */\n\n  }, {\n    key: 'storedFields',\n    value: function storedFields(fields) {\n      this._body.stored_fields = fields;\n      return this;\n    }\n    /**\n     * Computes a document property dynamically based on the supplied `Script`.\n     *\n     * @param {string} scriptFieldName\n     * @param {string|Script} script string or instance of `Script`\n     * @returns {InnerHits} returns `this` so that calls can be chained\n     */\n\n  }, {\n    key: 'scriptField',\n    value: function scriptField(scriptFieldName, script) {\n      setDefault(this._body, 'script_fields', {});\n      this._body.script_fields[scriptFieldName] = {\n        script: script\n      };\n      return this;\n    }\n    /**\n     * Sets given dynamic document properties to be computed using supplied `Script`s.\n     *\n     * Object should have `scriptFieldName` as key and `script` as the value.\n     *\n     * @param {Object} scriptFields Object with `scriptFieldName` as key and `script` as the value.\n     * @returns {InnerHits} returns `this` so that calls can be chained\n     */\n\n  }, {\n    key: 'scriptFields',\n    value: function scriptFields(_scriptFields) {\n      var _this2 = this;\n\n      checkType(_scriptFields, Object);\n      Object.keys(_scriptFields).forEach(function (scriptFieldName) {\n        return _this2.scriptField(scriptFieldName, _scriptFields[scriptFieldName]);\n      });\n      return this;\n    }\n    /**\n     * Allows to return the doc value representation of a field for each hit.\n     * Doc value fields can work on fields that are not stored.\n     *\n     * @param {Array<string>} fields\n     * @returns {InnerHits} returns `this` so that calls can be chained\n     */\n\n  }, {\n    key: 'docvalueFields',\n    value: function docvalueFields(fields) {\n      this._body.docvalue_fields = fields;\n      return this;\n    }\n    /**\n     * Returns a version for each search hit.\n     *\n     * @param {boolean} enable\n     * @returns {InnerHits} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'version',\n    value: function version(enable) {\n      this._body.version = enable;\n      return this;\n    }\n    /**\n     * Override default `toJSON` to return DSL representation for the inner hits request\n     *\n     * @override\n     * @returns {Object} returns an Object which maps to the elasticsearch query DSL\n     */\n\n  }, {\n    key: 'toJSON',\n    value: function toJSON() {\n      return recursiveToJSON(this._body);\n    }\n  }]);\n  return InnerHits;\n}();\n\nmodule.exports = InnerHits;","map":null,"metadata":{},"sourceType":"script"}