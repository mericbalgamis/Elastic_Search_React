{"ast":null,"code":"'use strict';\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar isNil = require('lodash.isnil');\n/**\n * Class supporting the Elasticsearch scripting API.\n *\n * [Elasticsearch reference](https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-scripting-using.html)\n *\n * Note: `inline` script type was deprecated in [elasticsearch v5.0](https://www.elastic.co/guide/en/elasticsearch/reference/5.6/breaking_50_scripting.html).\n * `source` should be used instead. And similarly for `stored` scripts, type\n * `id` must be used instead. `file` scripts were removed as part of the\n * breaking changes in [elasticsearch v6.0](https://www.elastic.co/guide/en/elasticsearch/reference/6.0/breaking_60_scripting_changes.html#_file_scripts_removed)\n *\n * @param {string=} type One of `inline`, `stored`, `file`, `source`, `id`.\n * @param {string=} source Source of the script.\n * This needs to be specified if optional argument `type` is passed.\n *\n * @example\n * const script = esb.script('inline', \"doc['my_field'] * multiplier\")\n *     .lang('expression')\n *     .params({ multiplier: 2 });\n *\n * // cat \"log(_score * 2) + my_modifier\" > config/scripts/calculate-score.groovy\n * const script = esb.script()\n *     .lang('groovy')\n *     .file('calculate-score')\n *     .params({ my_modifier: 2 });\n */\n\n\nvar Script = function () {\n  // eslint-disable-next-line require-jsdoc\n  function Script(type, source) {\n    (0, _classCallCheck3.default)(this, Script);\n    this._isTypeSet = false;\n    this._body = {}; // NOTE: Script syntax changed in elasticsearch 5.6 to use `id`/`source`\n    // instead of `inline`/`source`/`file`. This needs to be handled\n    // somehow.\n\n    if (!isNil(type) && !isNil(source)) {\n      var typeLower = type.toLowerCase();\n\n      switch (typeLower) {\n        case 'inline':\n          this.inline(source);\n          break;\n\n        case 'source':\n          this.source(source);\n          break;\n\n        case 'stored':\n          this.stored(source);\n          break;\n\n        case 'id':\n          this.id(source);\n          break;\n\n        case 'file':\n          this.file(source);\n          break;\n\n        default:\n          throw new Error('`type` must be one of `inline`, `stored`, `file`');\n      }\n    }\n  }\n  /**\n   * Print warning message to console namespaced by class name.\n   *\n   * @param {string} msg\n   * @private\n   */\n\n\n  (0, _createClass3.default)(Script, [{\n    key: '_warn',\n    value: function _warn(msg) {\n      console.warn('[Script] ' + msg);\n    }\n    /**\n     * Print warning messages to not mix `Script` source\n     *\n     * @private\n     */\n\n  }, {\n    key: '_checkMixedRepr',\n    value: function _checkMixedRepr() {\n      if (!this._isTypeSet) return;\n\n      this._warn('Script source(`inline`/`source`/`stored`/`id`/`file`) was already specified!');\n\n      this._warn('Overwriting.');\n\n      delete this._body.inline;\n      delete this._body.source;\n      delete this._body.stored;\n      delete this._body.id;\n      delete this._body.file;\n    }\n    /**\n     * Sets the type of script to be `inline` and specifies the source of the script.\n     *\n     * Note: This type was deprecated in elasticsearch v5.0. Use `source`\n     * instead if you are using elasticsearch `>= 5.0`.\n     *\n     * @param {string} scriptCode\n     * @returns {Script} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'inline',\n    value: function inline(scriptCode) {\n      this._checkMixedRepr();\n\n      this._body.inline = scriptCode;\n      this._isTypeSet = true;\n      return this;\n    }\n    /**\n     * Sets the type of script to be `source` and specifies the source of the script.\n     *\n     * Note: `source` is an alias for the `inline` type which was deprecated\n     * in elasticsearch v5.0. So this type is supported only in versions\n     * `>= 5.0`.\n     *\n     * @param {string} scriptCode\n     * @returns {Script} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'source',\n    value: function source(scriptCode) {\n      this._checkMixedRepr();\n\n      this._body.source = scriptCode;\n      this._isTypeSet = true;\n      return this;\n    }\n    /**\n     * Specify the `stored` script by `id` which will be retrieved from cluster state.\n     *\n     * Note: This type was deprecated in elasticsearch v5.0. Use `id`\n     * instead if you are using elasticsearch `>= 5.0`.\n     *\n     * @param {string} scriptId The unique identifier for the stored script.\n     * @returns {Script} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'stored',\n    value: function stored(scriptId) {\n      this._checkMixedRepr();\n\n      this._body.stored = scriptId;\n      this._isTypeSet = true;\n      return this;\n    }\n    /**\n     * Specify the stored script to be used by it's `id` which will be retrieved\n     * from cluster state.\n     *\n     * Note: `id` is an alias for the `stored` type which was deprecated in\n     * elasticsearch v5.0. So this type is supported only in versions `>= 5.0`.\n     *\n     * @param {string} scriptId The unique identifier for the stored script.\n     * @returns {Script} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'id',\n    value: function id(scriptId) {\n      this._checkMixedRepr();\n\n      this._body.id = scriptId;\n      this._isTypeSet = true;\n      return this;\n    }\n    /**\n     * Specify the `file` script by stored as a file in the scripts folder.\n     *\n     * Note: File scripts have been removed in elasticsearch 6.0. Instead, use\n     * stored scripts.\n     *\n     * @param {string} fileName The name of the script stored as a file in the scripts folder.\n     * For script file `config/scripts/calculate-score.groovy`,\n     * `fileName` should be `calculate-score`\n     * @returns {Script} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'file',\n    value: function file(fileName) {\n      this._checkMixedRepr();\n\n      this._body.file = fileName;\n      this._isTypeSet = true;\n      return this;\n    }\n    /**\n     * Specifies the language the script is written in. Defaults to `painless` but\n     * may be set to any of languages listed in [Scripting](https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-scripting.html).\n     * The default language may be changed in the `elasticsearch.yml` config file by setting\n     * `script.default_lang` to the appropriate language.\n     *\n     * For a `file` script,  it should correspond with the script file suffix.\n     * `groovy` for `config/scripts/calculate-score.groovy`.\n     *\n     * Note: The Groovy, JavaScript, and Python scripting languages were\n     * deprecated in elasticsearch 5.0 and removed in 6.0. Use painless instead.\n     *\n     * @param {string} lang The language for the script.\n     * @returns {Script} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'lang',\n    value: function lang(_lang) {\n      this._body.lang = _lang;\n      return this;\n    }\n    /**\n     * Specifies any named parameters that are passed into the script as variables.\n     *\n     * @param {Object} params Named parameters to be passed to script.\n     * @returns {Script} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'params',\n    value: function params(_params) {\n      this._body.params = _params;\n      return this;\n    }\n    /**\n     * Override default `toJSON` to return DSL representation for the `script`.\n     *\n     * @override\n     * @returns {Object} returns an Object which maps to the elasticsearch query DSL\n     */\n\n  }, {\n    key: 'toJSON',\n    value: function toJSON() {\n      // recursiveToJSON doesn't seem to be needed here\n      return this._body;\n    }\n  }]);\n  return Script;\n}();\n\nmodule.exports = Script;","map":null,"metadata":{},"sourceType":"script"}