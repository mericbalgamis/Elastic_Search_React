{"ast":null,"code":"'use strict';\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar MatchPhraseQueryBase = require('./match-phrase-query-base');\n\nvar ES_REF_URL = 'https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-match-query-phrase.html';\n/**\n * The `match_phrase` query analyzes the text and creates a `phrase` query out of\n * the analyzed text.\n *\n * [Elasticsearch reference](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-match-query-phrase.html)\n *\n * @example\n * const qry = esb.matchPhraseQuery('message', 'to be or not to be');\n *\n * @param {string=} field The document field to query against\n * @param {string=} queryString The query string\n *\n * @extends MatchPhraseQueryBase\n */\n\nvar MatchPhraseQuery = function (_MatchPhraseQueryBase) {\n  (0, _inherits3.default)(MatchPhraseQuery, _MatchPhraseQueryBase); // eslint-disable-next-line require-jsdoc\n\n  function MatchPhraseQuery(field, queryString) {\n    (0, _classCallCheck3.default)(this, MatchPhraseQuery);\n    return (0, _possibleConstructorReturn3.default)(this, (MatchPhraseQuery.__proto__ || Object.getPrototypeOf(MatchPhraseQuery)).call(this, 'match_phrase', ES_REF_URL, field, queryString));\n  }\n\n  return MatchPhraseQuery;\n}(MatchPhraseQueryBase);\n\nmodule.exports = MatchPhraseQuery;","map":null,"metadata":{},"sourceType":"script"}