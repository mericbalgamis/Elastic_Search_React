{"ast":null,"code":"'use strict';\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar isNil = require('lodash.isnil');\n\nvar isObject = require('lodash.isobject');\n\nvar _require = require('../../core'),\n    _require$util = _require.util,\n    invalidParam = _require$util.invalidParam,\n    setDefault = _require$util.setDefault;\n\nvar MonoFieldQueryBase = require('./mono-field-query-base');\n\nvar ES_REF_URL = 'https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-common-terms-query.html';\nvar invalidLowFreqOpParam = invalidParam(ES_REF_URL, 'low_freq_operator', \"'and' or 'or'\");\nvar invalidHighFreqOpParam = invalidParam(ES_REF_URL, 'high_freq_operator', \"'and' or 'or'\");\n/**\n * The `common` terms query is a modern alternative to stopwords which\n * improves the precision and recall of search results (by taking\n * stopwords into account), without sacrificing performance.\n *\n * [Elasticsearch reference](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-common-terms-query.html)\n *\n * @example\n * const qry = esb.commonTermsQuery('body','this is bonsai cool')\n *     .cutoffFrequency(0.001);\n *\n * @param {string=} field The document field to query against\n * @param {string=} queryString The query string\n *\n * @extends MonoFieldQueryBase\n */\n\nvar CommonTermsQuery = function (_MonoFieldQueryBase) {\n  (0, _inherits3.default)(CommonTermsQuery, _MonoFieldQueryBase); // eslint-disable-next-line require-jsdoc\n\n  function CommonTermsQuery(field, queryString) {\n    (0, _classCallCheck3.default)(this, CommonTermsQuery);\n    return (0, _possibleConstructorReturn3.default)(this, (CommonTermsQuery.__proto__ || Object.getPrototypeOf(CommonTermsQuery)).call(this, 'common', field, queryString));\n  }\n  /**\n   * Print warning message to console namespaced by class name.\n   *\n   * @param {string} msg\n   * @private\n   */\n\n\n  (0, _createClass3.default)(CommonTermsQuery, [{\n    key: '_warn',\n    value: function _warn(msg) {\n      console.warn('[CommonTermsQuery] ' + msg);\n    }\n    /**\n     * Print warning messages to not mix Geo Point representations\n     * @private\n     */\n\n  }, {\n    key: '_warnMixedRepr',\n    value: function _warnMixedRepr() {\n      this._warn('Do not mix with other representation!');\n\n      this._warn('Overwriting.');\n    }\n    /**\n     * Check the instance for object representation of Geo Point.\n     * If representation is null, new object is initialised.\n     * If it is not null, warning is logged and point is overwritten.\n     * @private\n     */\n\n  }, {\n    key: '_checkMinMatchRepr',\n    value: function _checkMinMatchRepr() {\n      if (!setDefault(this._queryOpts, 'minimum_should_match', {}) && !isObject(this._queryOpts.minimum_should_match)) {\n        this._warnMixedRepr();\n\n        this._queryOpts.minimum_should_match = {};\n      }\n    }\n    /**\n     * Allows specifying an absolute or relative document frequency where high frequency\n     * terms are moved into an optional subquery and are only scored if one of the\n     * low frequency (below the cutoff) terms in the case of an `or` operator or\n     * all of the low frequency terms in the case of an `and` operator match.\n     *\n     * @param {number} frequency It can either be relative to the total number of documents\n     * if in the range `[0..1)` or absolute if greater or equal to `1.0`.\n     * @returns {CommonTermsQuery} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'cutoffFrequency',\n    value: function cutoffFrequency(frequency) {\n      this._queryOpts.cutoff_frequency = frequency;\n      return this;\n    }\n    /**\n     * The operator to be used on low frequency terms in the boolean query\n     * which is constructed by analyzing the text provided. The `operator` flag\n     * can be set to `or` or `and` to control the boolean clauses (defaults to `or`).\n     *\n     * @example\n     * const qry = esb.commonTermsQuery('body', 'nelly the elephant as a cartoon')\n     *     .lowFreqOperator('and')\n     *     .cutoffFrequency(0.001);\n     *\n     * @param {string} operator Can be `and`/`or`. Default is `or`.\n     * @returns {CommonTermsQuery} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'lowFreqOperator',\n    value: function lowFreqOperator(operator) {\n      if (isNil(operator)) invalidLowFreqOpParam(operator);\n      var operatorLower = operator.toLowerCase();\n\n      if (operatorLower !== 'and' && operatorLower !== 'or') {\n        invalidLowFreqOpParam(operator);\n      }\n\n      this._queryOpts.low_freq_operator = operatorLower;\n      return this;\n    }\n    /**\n     * The operator to be used on high frequency terms in the boolean query\n     * which is constructed by analyzing the text provided. The `operator` flag\n     * can be set to `or` or `and` to control the boolean clauses (defaults to `or`).\n     *\n     * @param {string} operator Can be `and`/`or`. Default is `or`.\n     * @returns {CommonTermsQuery} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'highFreqOperator',\n    value: function highFreqOperator(operator) {\n      if (isNil(operator)) invalidHighFreqOpParam(operator);\n      var operatorLower = operator.toLowerCase();\n\n      if (operatorLower !== 'and' && operatorLower !== 'or') {\n        invalidHighFreqOpParam(operator);\n      }\n\n      this._queryOpts.high_freq_operator = operatorLower;\n      return this;\n    }\n    /**\n     * Sets the value controlling how many \"should\" clauses in the resulting boolean\n     * query should match for low frequency terms. It can be an absolute value (2),\n     * a percentage (30%) or a combination of both.\n     *\n     * @example\n     * const qry = esb.commonTermsQuery('body', 'nelly the elephant as a cartoon')\n     *     .lowFreq(2)\n     *     .highFreq(3)\n     *     .cutoffFrequency(0.001);\n     *\n     * @param {string|number} lowFreqMinMatch\n     * @returns {CommonTermsQuery} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'lowFreq',\n    value: function lowFreq(lowFreqMinMatch) {\n      this._checkMinMatchRepr();\n\n      this._queryOpts.minimum_should_match.low_freq = lowFreqMinMatch;\n      return this;\n    }\n    /**\n     * Sets the value controlling how many \"should\" clauses in the resulting boolean\n     * query should match for high frequency terms. It can be an absolute value (2),\n     * a percentage (30%) or a combination of both.\n     *\n     * @example\n     * const qry = esb.commonTermsQuery('body', 'nelly the elephant as a cartoon')\n     *     .lowFreq(2)\n     *     .highFreq(3)\n     *     .cutoffFrequency(0.001);\n     *\n     * @param {string|number} highFreqMinMatch\n     * @returns {CommonTermsQuery} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'highFreq',\n    value: function highFreq(highFreqMinMatch) {\n      this._checkMinMatchRepr();\n\n      this._queryOpts.minimum_should_match.high_freq = highFreqMinMatch;\n      return this;\n    }\n    /**\n     * Enables or disables similarity coordinate scoring of documents\n     * commoning the `CommonTermsQuery`. Default: `false`.\n     *\n     * **NOTE**: This has been removed in elasticsearch 6.0. If provided,\n     * it will be ignored and a deprecation warning will be issued.\n     *\n     * @param {boolean} enable\n     * @returns {CommonTermsQuery} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'disableCoord',\n    value: function disableCoord(enable) {\n      this._queryOpts.disable_coord = enable;\n      return this;\n    }\n  }]);\n  return CommonTermsQuery;\n}(MonoFieldQueryBase);\n\nmodule.exports = CommonTermsQuery;","map":null,"metadata":{},"sourceType":"script"}