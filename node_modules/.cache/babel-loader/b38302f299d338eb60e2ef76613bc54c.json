{"ast":null,"code":"'use strict';\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar isNil = require('lodash.isnil');\n\nvar _require = require('../../core'),\n    invalidParam = _require.util.invalidParam,\n    MODEL_SET = _require.consts.MODEL_SET;\n\nvar PipelineAggregationBase = require('./pipeline-aggregation-base');\n\nvar ES_REF_URL = 'https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-pipeline-movavg-aggregation.html';\nvar invalidModelParam = invalidParam(ES_REF_URL, 'model', MODEL_SET);\n/**\n * Given an ordered series of data, the Moving Average aggregation will\n * slide a window across the data and emit the average value of that window.\n *\n * `moving_avg` aggregations must be embedded inside of a histogram or\n * date_histogram aggregation.\n *\n * [Elasticsearch reference](https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-pipeline-movavg-aggregation.html)\n *\n * @example\n * const agg = esb.movingAverageAggregation('the_movavg', 'the_sum')\n *     .model('holt')\n *     .window(5)\n *     .gapPolicy('insert_zeros')\n *     .settings({ alpha: 0.8 });\n *\n * @example\n * const reqBody = esb.requestBodySearch()\n *     .agg(\n *         esb.dateHistogramAggregation('my_date_histo', 'timestamp')\n *             .interval('day')\n *             .agg(esb.sumAggregation('the_sum', 'lemmings'))\n *             // Relative path to sibling metric `the_sum`\n *             .agg(esb.movingAverageAggregation('the_movavg', 'the_sum'))\n *     )\n *     .size(0);\n *\n * @example\n * const reqBody = esb.requestBodySearch()\n *     .agg(\n *         esb.dateHistogramAggregation('my_date_histo', 'timestamp')\n *             .interval('day')\n *             // Use the document count as it's input\n *             .agg(esb.movingAverageAggregation('the_movavg', '_count'))\n *     )\n *     .size(0);\n *\n * @param {string} name The name which will be used to refer to this aggregation.\n * @param {string=} bucketsPath The relative path of metric to aggregate over\n *\n * @extends PipelineAggregationBase\n */\n\nvar MovingAverageAggregation = function (_PipelineAggregationB) {\n  (0, _inherits3.default)(MovingAverageAggregation, _PipelineAggregationB); // eslint-disable-next-line require-jsdoc\n\n  function MovingAverageAggregation(name, bucketsPath) {\n    (0, _classCallCheck3.default)(this, MovingAverageAggregation);\n    return (0, _possibleConstructorReturn3.default)(this, (MovingAverageAggregation.__proto__ || Object.getPrototypeOf(MovingAverageAggregation)).call(this, name, 'moving_avg', ES_REF_URL, bucketsPath));\n  }\n  /**\n   * @override\n   * @throws {Error} This method cannot be called on MovingAverageAggregation\n   */\n\n\n  (0, _createClass3.default)(MovingAverageAggregation, [{\n    key: 'format',\n    value: function format() {\n      console.log('Please refer ' + ES_REF_URL);\n      throw new Error('format is not supported in MovingAverageAggregation');\n    }\n    /**\n     * Sets the moving average weighting model that we wish to use. Optional.\n     *\n     * @example\n     * const agg = esb.movingAverageAggregation('the_movavg', 'the_sum')\n     *     .model('simple')\n     *     .window(30);\n     *\n     * @example\n     * const agg = esb.movingAverageAggregation('the_movavg', 'the_sum')\n     *     .model('ewma')\n     *     .window(30)\n     *     .settings({ alpha: 0.8 });\n     *\n     * @param {string} model Can be `simple`, `linear`,\n     * `ewma` (aka \"single-exponential\"), `holt` (aka \"double exponential\")\n     * or `holt_winters` (aka \"triple exponential\").\n     * Default is `simple`\n     * @returns {MovingAverageAggregation} returns `this` so that calls can be chained\n     */\n\n  }, {\n    key: 'model',\n    value: function model(_model) {\n      if (isNil(_model)) invalidModelParam(_model);\n\n      var modelLower = _model.toLowerCase();\n\n      if (!MODEL_SET.has(modelLower)) invalidModelParam(_model);\n      this._aggsDef.model = modelLower;\n      return this;\n    }\n    /**\n     * Sets the size of window to \"slide\" across the histogram. Optional.\n     *\n     * @example\n     * const agg = esb.movingAverageAggregation('the_movavg', 'the_sum')\n     *     .model('simple')\n     *     .window(30)\n     *\n     * @param {number} window Default is 5\n     * @returns {MovingAverageAggregation} returns `this` so that calls can be chained\n     */\n\n  }, {\n    key: 'window',\n    value: function window(_window) {\n      this._aggsDef.window = _window;\n      return this;\n    }\n    /**\n     * If the model should be algorithmically minimized. Optional.\n     * Applicable on EWMA, Holt-Linear, Holt-Winters.\n     * Minimization is disabled by default for `ewma` and `holt_linear`,\n     * while it is enabled by default for `holt_winters`.\n     *\n     * @example\n     * const agg = esb.movingAverageAggregation('the_movavg', 'the_sum')\n     *     .model('holt_winters')\n     *     .window(30)\n     *     .minimize(true)\n     *     .settings({ period: 7 });\n     *\n     * @param {boolean} enable `false` for most models\n     * @returns {MovingAverageAggregation} returns `this` so that calls can be chained\n     */\n\n  }, {\n    key: 'minimize',\n    value: function minimize(enable) {\n      this._aggsDef.minimize = enable;\n      return this;\n    }\n    /**\n     * Model-specific settings, contents which differ depending on the model specified.\n     * Optional.\n     *\n     * @example\n     * const agg = esb.movingAverageAggregation('the_movavg', 'the_sum')\n     *     .model('ewma')\n     *     .window(30)\n     *     .settings({ alpha: 0.8 });\n     *\n     * @param {Object} settings\n     * @returns {MovingAverageAggregation} returns `this` so that calls can be chaineds\n     */\n\n  }, {\n    key: 'settings',\n    value: function settings(_settings) {\n      this._aggsDef.settings = _settings;\n      return this;\n    }\n    /**\n     * Enable \"prediction\" mode, which will attempt to extrapolate into the future given\n     * the current smoothed, moving average\n     *\n     * @example\n     * const agg = esb.movingAverageAggregation('the_movavg', 'the_sum')\n     *     .model('simple')\n     *     .window(30)\n     *     .predict(10);\n     *\n     * @param {number} predict the number of predictions you would like appended to the\n     * end of the series\n     * @returns {MovingAverageAggregation} returns `this` so that calls can be chained\n     */\n\n  }, {\n    key: 'predict',\n    value: function predict(_predict) {\n      this._aggsDef.predict = _predict;\n      return this;\n    }\n  }]);\n  return MovingAverageAggregation;\n}(PipelineAggregationBase);\n\nmodule.exports = MovingAverageAggregation;","map":null,"metadata":{},"sourceType":"script"}