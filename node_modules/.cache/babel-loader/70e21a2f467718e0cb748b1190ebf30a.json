{"ast":null,"code":"'use strict';\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar isNil = require('lodash.isnil');\n\nvar ValuesSourceBase = require('./values-source-base');\n\nvar REF_URL = 'https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-composite-aggregation.html#_histogram';\n/**\n * `HistogramValuesSource` is a source for the `CompositeAggregation` that handles\n * histograms. It works very similar to a histogram aggregation with a slightly\n * different syntax.\n *\n * [Elasticsearch reference](https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-composite-aggregation.html#_histogram)\n *\n * @example\n * const valueSrc = esb.CompositeAggregation.histogramValuesSource(\n *   'histo', // name\n *   'price', // field\n *   5 // interval\n * );\n *\n * @param {string} name\n * @param {string=} field The field to aggregate on\n * @param {number=} interval Interval to generate histogram over.\n *\n * @extends ValuesSourceBase\n */\n\nvar HistogramValuesSource = function (_ValuesSourceBase) {\n  (0, _inherits3.default)(HistogramValuesSource, _ValuesSourceBase); // eslint-disable-next-line require-jsdoc\n\n  function HistogramValuesSource(name, field, interval) {\n    (0, _classCallCheck3.default)(this, HistogramValuesSource);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (HistogramValuesSource.__proto__ || Object.getPrototypeOf(HistogramValuesSource)).call(this, 'histogram', REF_URL, name, field));\n\n    if (!isNil(interval)) _this._opts.interval = interval;\n    return _this;\n  }\n  /**\n   * Sets the histogram interval. Buckets are generated based on this interval value.\n   *\n   * @param {number} interval Interval to generate histogram over.\n   * @returns {HistogramValuesSource} returns `this` so that calls can be chained\n   */\n\n\n  (0, _createClass3.default)(HistogramValuesSource, [{\n    key: 'interval',\n    value: function interval(_interval) {\n      this._opts.interval = _interval;\n      return this;\n    }\n  }]);\n  return HistogramValuesSource;\n}(ValuesSourceBase);\n\nmodule.exports = HistogramValuesSource;","map":null,"metadata":{},"sourceType":"script"}