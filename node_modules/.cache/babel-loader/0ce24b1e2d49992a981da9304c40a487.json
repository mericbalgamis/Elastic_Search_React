{"ast":null,"code":"'use strict';\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar isNil = require('lodash.isnil');\n\nvar _require = require('../core'),\n    SUGGEST_MODE_SET = _require.consts.SUGGEST_MODE_SET,\n    invalidParam = _require.util.invalidParam;\n\nvar ES_REF_URL = 'https://www.elastic.co/guide/en/elasticsearch/reference/current/search-suggesters-phrase.html#_direct_generators';\nvar invalidSuggestModeParam = invalidParam(ES_REF_URL, 'suggest_mode', SUGGEST_MODE_SET);\n/**\n * The `phrase` suggester uses candidate generators to produce a list of possible\n * terms per term in the given text. A single candidate generator is similar\n * to a `term` suggester called for each individual term in the text. The output\n * of the generators is subsequently scored in combination with the candidates\n * from the other terms to for suggestion candidates.\n *\n * The Phrase suggest API accepts a list of generators under the key `direct_generator`\n * each of the generators in the list are called per term in the original text.\n *\n * [Elasticsearch reference](https://www.elastic.co/guide/en/elasticsearch/reference/current/search-suggesters-phrase.html#_direct_generators)\n *\n * @param {string=} field The field to fetch the candidate suggestions from.\n */\n\nvar DirectGenerator = function () {\n  // eslint-disable-next-line require-jsdoc\n  function DirectGenerator(field) {\n    (0, _classCallCheck3.default)(this, DirectGenerator);\n    this._body = {};\n    if (!isNil(field)) this._body.field = field;\n  }\n  /**\n   * Sets field to fetch the candidate suggestions from. This is a required option\n   * that either needs to be set globally or per suggestion.\n   *\n   * @param {string} field a valid field name\n   * @returns {DirectGenerator} returns `this` so that calls can be chained\n   */\n\n\n  (0, _createClass3.default)(DirectGenerator, [{\n    key: 'field',\n    value: function field(_field) {\n      this._body.field = _field;\n      return this;\n    }\n    /**\n     * Sets the number of suggestions to return (defaults to `5`).\n     *\n     * @param {number} size\n     * @returns {DirectGenerator} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'size',\n    value: function size(_size) {\n      this._body.size = _size;\n      return this;\n    }\n    /**\n     * Sets the suggest mode which controls what suggestions are included\n     * or controls for what suggest text terms, suggestions should be suggested.\n     *  All values other than `always` can be thought of as an optimization to\n     * generate fewer suggestions to test on each shard and are not rechecked\n     * when combining the suggestions generated on each shard. Thus `missing`\n     * will generate suggestions for terms on shards that do not contain them\n     * even other shards do contain them. Those should be filtered out\n     * using `confidence`.\n     *\n     * Three possible values can be specified:\n     *   - `missing`: Only provide suggestions for suggest text terms that\n     *     are not in the index. This is the default.\n     *   - `popular`:  Only suggest suggestions that occur in more docs\n     *     than the original suggest text term.\n     *   - `always`: Suggest any matching suggestions based on terms in the suggest text.\n     *\n     * @param {string} mode Can be `missing`, `popular` or `always`\n     * @returns {DirectGenerator} returns `this` so that calls can be chained.\n     * @throws {Error} If `mode` is not one of `missing`, `popular` or `always`.\n     */\n\n  }, {\n    key: 'suggestMode',\n    value: function suggestMode(mode) {\n      if (isNil(mode)) invalidSuggestModeParam(mode);\n      var modeLower = mode.toLowerCase();\n\n      if (!SUGGEST_MODE_SET.has(modeLower)) {\n        invalidSuggestModeParam(mode);\n      }\n\n      this._body.suggest_mode = modeLower;\n      return this;\n    }\n    /**\n     * Sets the maximum edit distance candidate suggestions can have\n     * in order to be considered as a suggestion. Can only be a value\n     * between 1 and 2. Any other value result in an bad request\n     * error being thrown. Defaults to 2.\n     *\n     * @param {number} maxEdits Value between 1 and 2. Defaults to 2.\n     * @returns {DirectGenerator} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'maxEdits',\n    value: function maxEdits(_maxEdits) {\n      this._body.max_edits = _maxEdits;\n      return this;\n    }\n    /**\n     * Sets the number of minimal prefix characters that must match in order\n     * to be a candidate suggestions. Defaults to 1.\n     *\n     * Increasing this number improves spellcheck performance.\n     * Usually misspellings don't occur in the beginning of terms.\n     *\n     * @param {number} len The number of minimal prefix characters that must match in order\n     * to be a candidate suggestions. Defaults to 1.\n     * @returns {DirectGenerator} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'prefixLength',\n    value: function prefixLength(len) {\n      this._body.prefix_length = len;\n      return this;\n    }\n    /**\n     * Sets the minimum length a suggest text term must have in order to be included.\n     * Defaults to 4.\n     *\n     * @param {number} len The minimum length a suggest text term must have in order\n     * to be included. Defaults to 4.\n     * @returns {DirectGenerator} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'minWordLength',\n    value: function minWordLength(len) {\n      this._body.min_word_length = len;\n      return this;\n    }\n    /**\n     * Sets factor that is used to multiply with the `shards_size` in order to inspect\n     * more candidate spell corrections on the shard level.\n     * Can improve accuracy at the cost of performance. Defaults to 5.\n     *\n     * @param {number} maxInspections Factor used to multiple with `shards_size` in\n     * order to inspect more candidate spell corrections on the shard level.\n     * Defaults to 5\n     * @returns {DirectGenerator} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'maxInspections',\n    value: function maxInspections(_maxInspections) {\n      this._body.max_inspections = _maxInspections;\n      return this;\n    }\n    /**\n     * Sets the minimal threshold in number of documents a suggestion should appear in.\n     * This can be specified as an absolute number or as a relative percentage of\n     * number of documents. This can improve quality by only suggesting high\n     * frequency terms. Defaults to 0f and is not enabled. If a value higher than 1\n     * is specified then the number cannot be fractional. The shard level document\n     * frequencies are used for this option.\n     *\n     * @param {number} limit Threshold in number of documents a suggestion\n     * should appear in. Defaults to 0f and is not enabled.\n     * @returns {DirectGenerator} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'minDocFreq',\n    value: function minDocFreq(limit) {\n      this._body.min_doc_freq = limit;\n      return this;\n    }\n    /**\n     * Sets the maximum threshold in number of documents a suggest text token can\n     * exist in order to be included. Can be a relative percentage number (e.g 0.4)\n     * or an absolute number to represent document frequencies. If an value higher\n     * than 1 is specified then fractional can not be specified. Defaults to 0.01f.\n     * This can be used to exclude high frequency terms from being spellchecked.\n     * High frequency terms are usually spelled correctly on top of this also\n     * improves the spellcheck performance. The shard level document frequencies are\n     * used for this option.\n     *\n     * @param {number} limit Maximum threshold in number of documents a suggest text\n     * token can exist in order to be included. Defaults to 0.01f.\n     * @returns {DirectGenerator} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'maxTermFreq',\n    value: function maxTermFreq(limit) {\n      this._body.max_term_freq = limit;\n      return this;\n    }\n    /**\n     * Sets the filter (analyzer) that is applied to each of the tokens passed to this\n     * candidate generator. This filter is applied to the original token before\n     * candidates are generated.\n     *\n     * @param {string} filter a filter (analyzer) that is applied to each of the\n     * tokens passed to this candidate generator.\n     * @returns {DirectGenerator} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'preFilter',\n    value: function preFilter(filter) {\n      this._body.pre_filter = filter;\n      return this;\n    }\n    /**\n     * Sets the filter (analyzer) that is applied to each of the generated tokens\n     * before they are passed to the actual phrase scorer.\n     *\n     * @param {string} filter a filter (analyzer) that is applied to each of the\n     * generated tokens before they are passed to the actual phrase scorer.\n     * @returns {DirectGenerator} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'postFilter',\n    value: function postFilter(filter) {\n      this._body.post_filter = filter;\n      return this;\n    }\n    /**\n     * Override default `toJSON` to return DSL representation for the `direct_generator`\n     *\n     * @override\n     * @returns {Object} returns an Object which maps to the elasticsearch DSL\n     */\n\n  }, {\n    key: 'toJSON',\n    value: function toJSON() {\n      return this._body;\n    }\n  }]);\n  return DirectGenerator;\n}();\n\nmodule.exports = DirectGenerator;","map":null,"metadata":{},"sourceType":"script"}