{"ast":null,"code":"'use strict';\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar isNil = require('lodash.isnil');\n\nvar JoiningQueryBase = require('./joining-query-base');\n\nvar ES_REF_URL = 'https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-nested-query.html';\n/**\n * Nested query allows to query nested objects. The query is executed against\n * the nested objects / docs as if they were indexed as separate docs\n * (they are, internally) and resulting in the root parent doc (or parent nested mapping).\n *\n * [Elasticsearch reference](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-nested-query.html)\n *\n * @example\n * const qry = esb.nestedQuery()\n *     .path('obj1')\n *     .scoreMode('avg')\n *     .query(\n *         esb.boolQuery().must([\n *             esb.matchQuery('obj1.name', 'blue'),\n *             esb.rangeQuery('obj1.count').gt(5)\n *         ])\n *     );\n *\n * @param {Query=} qry A valid `Query` object\n * @param {string=} path The nested object path.\n *\n * @extends JoiningQueryBase\n */\n\nvar NestedQuery = function (_JoiningQueryBase) {\n  (0, _inherits3.default)(NestedQuery, _JoiningQueryBase); // eslint-disable-next-line require-jsdoc\n\n  function NestedQuery(qry, path) {\n    (0, _classCallCheck3.default)(this, NestedQuery);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (NestedQuery.__proto__ || Object.getPrototypeOf(NestedQuery)).call(this, 'nested', ES_REF_URL, qry));\n\n    if (!isNil(path)) _this._queryOpts.path = path;\n    return _this;\n  }\n  /**\n   * Sets the root context for the nested query.\n   *\n   * @param {string} path\n   * @returns {NestedQuery} returns `this` so that calls can be chained.\n   */\n\n\n  (0, _createClass3.default)(NestedQuery, [{\n    key: 'path',\n    value: function path(_path) {\n      this._queryOpts.path = _path;\n      return this;\n    }\n  }]);\n  return NestedQuery;\n}(JoiningQueryBase);\n\nmodule.exports = NestedQuery;","map":null,"metadata":{},"sourceType":"script"}