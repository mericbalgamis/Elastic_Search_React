{"ast":null,"code":"'use strict';\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar isNil = require('lodash.isnil');\n\nvar _require = require('../../core'),\n    GeoPoint = _require.GeoPoint,\n    _require$util = _require.util,\n    checkType = _require$util.checkType,\n    invalidParam = _require$util.invalidParam,\n    UNIT_SET = _require.consts.UNIT_SET;\n\nvar RangeAggregationBase = require('./range-aggregation-base');\n\nvar ES_REF_URL = 'https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-geodistance-aggregation.html';\nvar invalidUnitParam = invalidParam(ES_REF_URL, 'unit', UNIT_SET);\nvar invalidDistanceTypeParam = invalidParam(ES_REF_URL, 'distance_type', \"'plane' or 'arc'\");\n/**\n * A multi-bucket aggregation that works on geo_point fields and conceptually\n * works very similar to the range aggregation. The user can define a point of\n * origin and a set of distance range buckets. The aggregation evaluate the\n * distance of each document value from the origin point and determines the\n * buckets it belongs to based on the ranges (a document belongs to a bucket\n * if the distance between the document and the origin falls within the distance\n * range of the bucket).\n *\n * [Elasticsearch reference](https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-geodistance-aggregation.html)\n *\n * @example\n * const agg = esb.geoDistanceAggregation('rings_around_amsterdam', 'location')\n *     .origin(esb.geoPoint().string('52.3760, 4.894'))\n *     .ranges([{ to: 100000 }, { from: 100000, to: 300000 }, { from: 300000 }]);\n *\n * @param {string} name The name which will be used to refer to this aggregation.\n * @param {string=} field The field to aggregate on\n *\n * @extends RangeAggregationBase\n */\n\nvar GeoDistanceAggregation = function (_RangeAggregationBase) {\n  (0, _inherits3.default)(GeoDistanceAggregation, _RangeAggregationBase); // eslint-disable-next-line require-jsdoc\n\n  function GeoDistanceAggregation(name, field) {\n    (0, _classCallCheck3.default)(this, GeoDistanceAggregation);\n    return (0, _possibleConstructorReturn3.default)(this, (GeoDistanceAggregation.__proto__ || Object.getPrototypeOf(GeoDistanceAggregation)).call(this, name, 'geo_distance', field));\n  }\n  /**\n   * @override\n   * @throws {Error} This method cannot be called on GeoDistanceAggregation\n   */\n\n\n  (0, _createClass3.default)(GeoDistanceAggregation, [{\n    key: 'format',\n    value: function format() {\n      console.log('Please refer ' + ES_REF_URL);\n      throw new Error('format is not supported in GeoDistanceAggregation');\n    }\n    /**\n     * @override\n     * @throws {Error} This method cannot be called on GeoDistanceAggregation\n     */\n\n  }, {\n    key: 'script',\n    value: function script() {\n      console.log('Please refer ' + ES_REF_URL);\n      throw new Error('script is not supported in GeoDistanceAggregation');\n    }\n    /**\n     * Sets the point of origin from where distances will be measured.\n     *\n     * @param {GeoPoint} point A valid `GeoPoint` object.\n     * @returns {GeoDistanceAggregation} returns `this` so that calls can be chained\n     * @throws {TypeError} If `point` is not an instance of `GeoPoint`\n     */\n\n  }, {\n    key: 'origin',\n    value: function origin(point) {\n      checkType(point, GeoPoint);\n      this._aggsDef.origin = point;\n      return this;\n    }\n    /**\n     * Sets the distance unit.  Valid values are:\n     * mi (miles), in (inches), yd (yards),\n     * km (kilometers), cm (centimeters), mm (millimeters),\n     * ft(feet), NM(nauticalmiles)\n     *\n     * @example\n     * const agg = esb.geoDistanceAggregation('rings_around_amsterdam', 'location')\n     *     .origin(esb.geoPoint().string('52.3760, 4.894'))\n     *     .unit('km')\n     *     .ranges([{ to: 100 }, { from: 100, to: 300 }, { from: 300 }]);\n     *\n     * @param {string} unit Distance unit, default is `m`(meters).\n     * @returns {GeoDistanceAggregation} returns `this` so that calls can be chained\n     * @throws {Error} If Unit is outside the accepted set.\n     */\n\n  }, {\n    key: 'unit',\n    value: function unit(_unit) {\n      if (!UNIT_SET.has(_unit)) {\n        invalidUnitParam(_unit);\n      }\n\n      this._aggsDef.unit = _unit;\n      return this;\n    }\n    /**\n     * Sets the distance calculation mode, `arc` or `plane`.\n     * The `arc` calculation is the more accurate.\n     * The `plane` is the faster but least accurate.\n     *\n     * @example\n     * const agg = esb.geoDistanceAggregation('rings_around_amsterdam', 'location')\n     *     .origin(esb.geoPoint().string('52.3760, 4.894'))\n     *     .unit('km')\n     *     .distanceType('plane')\n     *     .ranges([{ to: 100 }, { from: 100, to: 300 }, { from: 300 }]);\n     *\n     * @param {string} type\n     * @returns {GeoDistanceAggregation} returns `this` so that calls can be chained\n     * @throws {Error} If `type` is neither `plane` nor `arc`.\n     */\n\n  }, {\n    key: 'distanceType',\n    value: function distanceType(type) {\n      if (isNil(type)) invalidDistanceTypeParam(type);\n      var typeLower = type.toLowerCase();\n      if (typeLower !== 'plane' && typeLower !== 'arc') invalidDistanceTypeParam(type);\n      this._aggsDef.distance_type = typeLower;\n      return this;\n    }\n  }]);\n  return GeoDistanceAggregation;\n}(RangeAggregationBase);\n\nmodule.exports = GeoDistanceAggregation;","map":null,"metadata":{},"sourceType":"script"}