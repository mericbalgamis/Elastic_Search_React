{"ast":null,"code":"var _jsxFileName = \"/home/meric/elastic/src/App.js\";\nimport React, { Component } from \"react\";\nimport './App.css';\nimport SplitterLayout from 'react-splitter-layout';\nimport 'react-splitter-layout/lib/index.css';\nimport Panel from 'muicss/lib/react/panel';\nimport DynamicForm from './components/dynamicForm/dynamicForm';\nimport myJson from './datatypes.json';\nimport txt from './datatypes.txt';\nimport txt_output from './datatypes_output.txt';\nimport json from './config/simple.json';\nimport axios from 'axios';\nimport JSONPretty from 'react-json-prettify';\nimport { github } from 'react-json-prettify/dist/themes';\nimport queryBuilder from 'elastic-builder'; //const elasticsearch = require('elastic-search');\n//const esb = require('elastic-builder');\n\nvar formJson = {\n  \"name\": \"ABCz Form\",\n  \"fields\": []\n};\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.submitHandler = event => {\n      let json = JSON.stringify(event, null, 4);\n      this.generateQuery(json); //console.log(json);\n    };\n\n    this.generateQuery = formResults => {\n      var form = JSON.parse(formResults); // Bool query\n\n      const requestBody = queryBuilder.requestBodySearch().query(queryBuilder.boolQuery().must(queryBuilder.matchQuery(\"studies.DCMs.\" + form.data[0].name.replace(/ /g, '_') + \".Value\", form.data[0].value)).filter(queryBuilder.rangeQuery(\"studies.DCMs.\" + form.data[1].name.replace(/ /g, '_') + \".Value\").gt(form.data[1].value).lte(form.data[2].value)).filter(queryBuilder.rangeQuery(\"studies.DCMs.\" + form.data[3].name.replace(/ /g, '_') + \".Value\").gt(form.data[3].value).lte(form.data[4].value)).must(queryBuilder.matchQuery(\"studies.DCMs.\" + form.data[5].name.replace(/ /g, '_') + \".Value\", form.data[5].value)).must(queryBuilder.matchQuery(\"studies.DCMs.\" + form.data[6].name.replace(/ /g, '_') + \".Value\", form.data[6].value)).filter(queryBuilder.rangeQuery(\"studies.DCMs.\" + form.data[7].name.replace(/ /g, '_') + \".Value\").gt(form.data[7].value).lte(form.data[8].value)).filter(queryBuilder.rangeQuery(\"studies.DCMs.\" + form.data[9].name.replace(/ /g, '_') + \".Value\").gt(form.data[9].value).lte(form.data[10].value)).filter(queryBuilder.rangeQuery(\"studies.DCMs.\" + form.data[11].name.replace(/ /g, '_') + \".Value\").gt(form.data[11].value).lte(form.data[12].value)).filter(queryBuilder.rangeQuery(\"studies.DCMs.\" + form.data[13].name.replace(/ /g, '_') + \".Value\").gt(form.data[13].value).lte(form.data[14].value)).must(queryBuilder.matchQuery(\"studies.DCMs.\" + form.data[15].name.replace(/ /g, '_') + \".Value\", form.data[15].value)));\n      console.log(form);\n\n      for (var i = 0; i <= form.data.length - 1; i++) {\n        if (i != form.data.length - 1 && form.data[i].name == form.data[i + 1].name) {\n          if (form.data[i].value == \"\") requestBody._body.query._body.bool.filter.splice(i, 1);\n          i++;\n        } else if (i == form.data.length) {\n          if (form.data[i].value == \"\") requestBody._body.query._body.bool.must.splice(i, 1);\n        } else {\n          if (form.data[i].value == \"\") requestBody._body.query._body.bool.must.splice(i, 1);\n        }\n      } // formu gezerek boş olan alanları request body den çıkarmak gerekiyor.\n\n      /*\n      // Bool query\n      const requestBody = queryBuilder.requestBodySearch().query(\n      queryBuilder.boolQuery()\n        .must(queryBuilder.matchQuery(\"DCMs.\"+form.data[0].name.replace(/ /g, '_')+\".Value\", form.data[0].value))\n        .must(queryBuilder.matchQuery(\"DCMs.\"+form.data[1].name.replace(/ /g, '_')+\".Value\", form.data[1].value))\n        .must(queryBuilder.matchQuery(\"DCMs.\"+form.data[2].name.replace(/ /g, '_')+\".Value\", form.data[2].value))\n        .must(queryBuilder.matchQuery(\"DCMs.\"+form.data[3].name.replace(/ /g, '_')+\".Value\", form.data[3].value))\n        .must(queryBuilder.matchQuery(\"DCMs.\"+form.data[4].name.replace(/ /g, '_')+\".Value\", form.data[4].value))\n      );\n      console.log(requestBody.toJSON())\n      for (var i = form.data.length - 1; i >= 0; i--) {\n        if (form.data[i].value == \"\" && ) {\n          //console.log(i)\n          requestBody._body.query._body.bool.must.splice(i, 1);\n          //console.log(query)\n        }\n      }*/\n\n\n      console.log(requestBody);\n      this.sendRequest(JSON.stringify(requestBody));\n      /*\n          requestBody.toJSON();\n      \n        \"query\": {\n          \"bool\": {\n            \"must\": {\n              \"match\": { \"last_name\": \"smith\" }\n            },\n            \"filter\": {\n              \"range\": { \"age\": { \"gt\": 30 } }\n            }\n          }\n        }\n      }\n      \n      // Multi Match Query\n      requestBody = queryBuilder.requestBodySearch().query(\n        queryBuilder.multiMatchQuery(['title', 'body'], 'Quick brown fox')\n          .type('best_fields')\n          .tieBreaker(0.3)\n          .minimumShouldMatch('30%')\n      );\n      \n      requestBody.toJSON();\n      {\n        \"multi_match\": {\n          \"query\": \"Quick brown fox\",\n          \"type\": \"best_fields\",\n          \"fields\": [\"title\", \"body\"],\n          \"tie_breaker\": 0.3,\n          \"minimum_should_match\": \"30%\"\n        }\n      }\n      \n      // Aggregation\n      requestBody = queryBuilder.requestBodySearch()\n        .size(0)\n        .agg(queryBuilder.termsAggregation('popular_colors', 'color'));\n      \n        \n      requestBody.toJSON();\n      {\n        \"size\": 0,\n        \"aggs\": {\n          \"popular_colors\": {\n            \"terms\": { \"field\": \"color\" }\n          }\n        }\n      }\n      \n      // Sort\n      requestBody = queryBuilder.requestBodySearch()\n        .query(queryBuilder.boolQuery().filter(queryBuilder.termQuery('message', 'test')))\n        .sort(queryBuilder.sort('timestamp', 'desc'))\n        .sorts([\n          queryBuilder.sort('channel', 'desc'),\n          queryBuilder.sort('categories', 'desc'),\n          // The order defaults to desc when sorting on the _score,\n          // and defaults to asc when sorting on anything else.\n          queryBuilder.sort('content'),\n          queryBuilder.sort('price').order('desc').mode('avg')\n        ]);\n      \n        \n      requestBody.toJSON();\n      {\n        \"query\": {\n          \"bool\": {\n            \"filter\": {\n              \"term\": { \"message\": \"test\" }\n            }\n          }\n        },\n        \"sort\": [\n          { \"timestamp\": { \"order\": \"desc\" } },\n          { \"channel\": { \"order\": \"desc\" } },\n          { \"categories\": { \"order\": \"desc\" } },\n          \"content\",\n          { \"price\": { \"order\": \"desc\", \"mode\": \"avg\" } }\n        ]\n      }\n      */\n    };\n\n    this.state = {\n      form: formJson,\n      response: ''\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n    axios.get().then(res => {\n      this.setState({\n        todo: res.data\n      });\n    });\n  }\n\n  sendRequest(requestBody) {\n    //console.log(\"handleclick\")\n    var panel = document.getElementById(\"resultPanel\");\n    console.log(\"requestBody: \" + requestBody);\n    fetch('http://127.0.0.1:5000/query', {\n      method: \"POST\",\n      //Request Type \n      body: requestBody,\n      //post body \n      headers: {\n        //Header Defination \n        'Content-Type': 'application/json'\n      }\n    }).then(response => response.json()) //If response is in json then in success\n    .then(responseJson => {\n      alert(JSON.stringify(responseJson));\n      console.log(responseJson);\n      panel.value = responseJson;\n    }) //If response is not in json then in error \n    .catch(error => {\n      alert(JSON.stringify(error)); //console.error(error);\n    });\n  }\n\n  componentWillMount() {\n    fetch(txt).then(r => r.text()).then(text => {\n      let myarray = text.split('\\n');\n      let dataArray = myarray.map((element, i) => {\n        var array = element.split(' ');\n\n        if (array.length === 4) {\n          let name = array[0];\n          name = name.replace(/_/g, ' ');\n          let type = array[1];\n          let options = array[2];\n          options = options.replace(/\\)/g, '');\n          options = options.replace(/\\(/g, '');\n          let optionsArray = options.split(',');\n          var optionData = {\n            \"options\": []\n          };\n          var data = {};\n          optionsArray.map((option, i) => {\n            optionData.options.push({\n              \"display\": option\n            });\n          });\n          return {\n            \"id\": name,\n            \"label\": name,\n            \"description\": \"\",\n            \"type\": type,\n            \"value\": \"\",\n            \"required\": \"false\",\n            \"placeholder\": \"\",\n            \"definition\": optionData\n          };\n        } else if (array.length === 3) {\n          let name = array[0];\n          name = name.replace(/_/g, ' ');\n          let type = array[1];\n          return {\n            \"id\": name,\n            \"label\": name,\n            \"description\": \"\",\n            \"type\": type,\n            \"value\": \"\",\n            \"required\": \"false\",\n            \"placeholder\": \"\"\n          };\n        }\n      });\n      this.setState({\n        form: {\n          fields: dataArray\n        }\n      });\n      console.log(dataArray);\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299\n      },\n      __self: this\n    }, React.createElement(SplitterLayout, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302\n      },\n      __self: this\n    }, \"Build a Query !\", React.createElement(DynamicForm, {\n      id: \"form\",\n      config: this.state.form,\n      onSubmit: event => this.submitHandler(event),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308\n      },\n      __self: this\n    }, React.createElement(Panel, {\n      id: \"resultPanel\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309\n      },\n      __self: this\n    }, React.createElement(JSONPretty, {\n      json: this.state.response,\n      theme: github,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/meric/elastic/src/App.js"],"names":["React","Component","SplitterLayout","Panel","DynamicForm","myJson","txt","txt_output","json","axios","JSONPretty","github","queryBuilder","formJson","App","constructor","props","submitHandler","event","JSON","stringify","generateQuery","formResults","form","parse","requestBody","requestBodySearch","query","boolQuery","must","matchQuery","data","name","replace","value","filter","rangeQuery","gt","lte","console","log","i","length","_body","bool","splice","sendRequest","state","response","handleClick","bind","get","then","res","setState","todo","panel","document","getElementById","fetch","method","body","headers","responseJson","alert","catch","error","componentWillMount","r","text","myarray","split","dataArray","map","element","array","type","options","optionsArray","optionData","option","push","fields","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport './App.css';\nimport SplitterLayout from 'react-splitter-layout';\nimport 'react-splitter-layout/lib/index.css';\nimport Panel from 'muicss/lib/react/panel';\nimport DynamicForm from './components/dynamicForm/dynamicForm';\nimport myJson from './datatypes.json';\nimport txt from './datatypes.txt';\nimport txt_output from './datatypes_output.txt';\nimport json from './config/simple.json';\nimport axios from 'axios';\nimport JSONPretty from 'react-json-prettify';\nimport { github } from 'react-json-prettify/dist/themes';\nimport queryBuilder from 'elastic-builder';\n\n//const elasticsearch = require('elastic-search');\n//const esb = require('elastic-builder');\n\n\nvar formJson = {\n  \"name\": \"ABCz Form\",\n  \"fields\": []\n};\n\nclass App extends Component {\n\n  constructor(props) {\n\n    super(props);\n    this.state = {\n\n      form: formJson,\n      response: ''\n    }\n    this.handleClick = this.handleClick.bind(this)\n  }\n\n  handleClick() {\n    axios.get()\n      .then(res => {\n        this.setState({\n          todo: res.data\n        })\n      })\n  }\n\n  sendRequest(requestBody) {\n    //console.log(\"handleclick\")\n    var panel = document.getElementById(\"resultPanel\");\n    console.log(\"requestBody: \" + requestBody)\n    fetch('http://127.0.0.1:5000/query', {\n      method: \"POST\",//Request Type \n      body: requestBody,//post body \n      headers: {//Header Defination \n        'Content-Type': 'application/json',\n      },\n    })\n      .then((response) => response.json())\n      //If response is in json then in success\n      .then((responseJson) => {\n        alert(JSON.stringify(responseJson));\n        console.log(responseJson);\n        panel.value = responseJson;\n      })\n      //If response is not in json then in error \n      .catch((error) => {\n        alert(JSON.stringify(error));\n        //console.error(error);\n      });\n\n\n  }\n\n  submitHandler = (event) => {\n    let json = JSON.stringify(event, null, 4);\n    this.generateQuery(json);\n    //console.log(json);\n  }\n\n  generateQuery = (formResults) => {\n\n    var form = JSON.parse(formResults);\n    \n    // Bool query\n    const requestBody = queryBuilder.requestBodySearch().query(\n      queryBuilder.boolQuery()\n        .must(queryBuilder.matchQuery(\"studies.DCMs.\" + form.data[0].name.replace(/ /g, '_') + \".Value\", form.data[0].value))\n        .filter(queryBuilder.rangeQuery(\"studies.DCMs.\" + form.data[1].name.replace(/ /g, '_') + \".Value\").gt(form.data[1].value).lte(form.data[2].value))\n        .filter(queryBuilder.rangeQuery(\"studies.DCMs.\" + form.data[3].name.replace(/ /g, '_') + \".Value\").gt(form.data[3].value).lte(form.data[4].value))\n        .must(queryBuilder.matchQuery(\"studies.DCMs.\" + form.data[5].name.replace(/ /g, '_') + \".Value\", form.data[5].value))\n        .must(queryBuilder.matchQuery(\"studies.DCMs.\" + form.data[6].name.replace(/ /g, '_') + \".Value\", form.data[6].value))\n        .filter(queryBuilder.rangeQuery(\"studies.DCMs.\" + form.data[7].name.replace(/ /g, '_') + \".Value\").gt(form.data[7].value).lte(form.data[8].value))\n        .filter(queryBuilder.rangeQuery(\"studies.DCMs.\" + form.data[9].name.replace(/ /g, '_') + \".Value\").gt(form.data[9].value).lte(form.data[10].value))\n        .filter(queryBuilder.rangeQuery(\"studies.DCMs.\" + form.data[11].name.replace(/ /g, '_') + \".Value\").gt(form.data[11].value).lte(form.data[12].value))\n        .filter(queryBuilder.rangeQuery(\"studies.DCMs.\" + form.data[13].name.replace(/ /g, '_') + \".Value\").gt(form.data[13].value).lte(form.data[14].value))\n        .must(queryBuilder.matchQuery(\"studies.DCMs.\" + form.data[15].name.replace(/ /g, '_') + \".Value\", form.data[15].value))\n    );\n\n    console.log(form)\n\n    for (var i = 0; i <= form.data.length-1; i++) {\n\n      if(i != form.data.length-1 && form.data[i].name == form.data[i+1].name){\n        if(form.data[i].value == \"\")\n          requestBody._body.query._body.bool.filter.splice(i, 1);\n        i++;\n      }\n      else if(i == form.data.length){\n        if(form.data[i].value == \"\")\n          requestBody._body.query._body.bool.must.splice(i, 1);\n      }\n      else{\n        if(form.data[i].value == \"\")\n          requestBody._body.query._body.bool.must.splice(i, 1);\n      }\n    }\n\n    // formu gezerek boş olan alanları request body den çıkarmak gerekiyor.\n\n    /*\n  // Bool query\n  const requestBody = queryBuilder.requestBodySearch().query(\n    queryBuilder.boolQuery()\n      .must(queryBuilder.matchQuery(\"DCMs.\"+form.data[0].name.replace(/ /g, '_')+\".Value\", form.data[0].value))\n      .must(queryBuilder.matchQuery(\"DCMs.\"+form.data[1].name.replace(/ /g, '_')+\".Value\", form.data[1].value))\n      .must(queryBuilder.matchQuery(\"DCMs.\"+form.data[2].name.replace(/ /g, '_')+\".Value\", form.data[2].value))\n      .must(queryBuilder.matchQuery(\"DCMs.\"+form.data[3].name.replace(/ /g, '_')+\".Value\", form.data[3].value))\n      .must(queryBuilder.matchQuery(\"DCMs.\"+form.data[4].name.replace(/ /g, '_')+\".Value\", form.data[4].value))\n  );\n    console.log(requestBody.toJSON())\n    for (var i = form.data.length - 1; i >= 0; i--) {\n      if (form.data[i].value == \"\" && ) {\n        //console.log(i)\n        requestBody._body.query._body.bool.must.splice(i, 1);\n        //console.log(query)\n      }\n    }*/\n\n    console.log(requestBody)\n    this.sendRequest(JSON.stringify(requestBody));\n\n\n    /*\n        requestBody.toJSON();\n    \n      \"query\": {\n        \"bool\": {\n          \"must\": {\n            \"match\": { \"last_name\": \"smith\" }\n          },\n          \"filter\": {\n            \"range\": { \"age\": { \"gt\": 30 } }\n          }\n        }\n      }\n    }\n    \n    // Multi Match Query\n    requestBody = queryBuilder.requestBodySearch().query(\n      queryBuilder.multiMatchQuery(['title', 'body'], 'Quick brown fox')\n        .type('best_fields')\n        .tieBreaker(0.3)\n        .minimumShouldMatch('30%')\n    );\n    \n    requestBody.toJSON();\n    {\n      \"multi_match\": {\n        \"query\": \"Quick brown fox\",\n        \"type\": \"best_fields\",\n        \"fields\": [\"title\", \"body\"],\n        \"tie_breaker\": 0.3,\n        \"minimum_should_match\": \"30%\"\n      }\n    }\n    \n    // Aggregation\n    requestBody = queryBuilder.requestBodySearch()\n      .size(0)\n      .agg(queryBuilder.termsAggregation('popular_colors', 'color'));\n    \n      \n    requestBody.toJSON();\n    {\n      \"size\": 0,\n      \"aggs\": {\n        \"popular_colors\": {\n          \"terms\": { \"field\": \"color\" }\n        }\n      }\n    }\n    \n    // Sort\n    requestBody = queryBuilder.requestBodySearch()\n      .query(queryBuilder.boolQuery().filter(queryBuilder.termQuery('message', 'test')))\n      .sort(queryBuilder.sort('timestamp', 'desc'))\n      .sorts([\n        queryBuilder.sort('channel', 'desc'),\n        queryBuilder.sort('categories', 'desc'),\n        // The order defaults to desc when sorting on the _score,\n        // and defaults to asc when sorting on anything else.\n        queryBuilder.sort('content'),\n        queryBuilder.sort('price').order('desc').mode('avg')\n      ]);\n    \n      \n    requestBody.toJSON();\n    {\n      \"query\": {\n        \"bool\": {\n          \"filter\": {\n            \"term\": { \"message\": \"test\" }\n          }\n        }\n      },\n      \"sort\": [\n        { \"timestamp\": { \"order\": \"desc\" } },\n        { \"channel\": { \"order\": \"desc\" } },\n        { \"categories\": { \"order\": \"desc\" } },\n        \"content\",\n        { \"price\": { \"order\": \"desc\", \"mode\": \"avg\" } }\n      ]\n    }\n    */\n\n\n  }\n\n  componentWillMount() {\n\n    fetch(txt)\n      .then((r) => r.text())\n      .then(text => {\n        let myarray = text.split('\\n');\n        let dataArray = myarray.map((element, i) => {\n\n\n          var array = element.split(' ');\n\n          if (array.length === 4) {\n\n            let name = array[0];\n            name = name.replace(/_/g, ' ');\n            let type = array[1];\n            let options = array[2];\n            options = options.replace(/\\)/g, '');\n            options = options.replace(/\\(/g, '');\n            let optionsArray = options.split(',');\n\n            var optionData = { \"options\": [] };\n            var data = {};\n            optionsArray.map((option, i) => {\n              optionData.options.push({ \"display\": option });\n            })\n\n            return {\n              \"id\": name,\n              \"label\": name,\n              \"description\": \"\",\n              \"type\": type,\n              \"value\": \"\",\n              \"required\": \"false\",\n              \"placeholder\": \"\",\n              \"definition\": optionData\n            };\n\n          }\n\n          else if (array.length === 3) {\n            let name = array[0];\n            name = name.replace(/_/g, ' ');\n            let type = array[1];\n\n            return {\n              \"id\": name,\n              \"label\": name,\n              \"description\": \"\",\n              \"type\": type,\n              \"value\": \"\",\n              \"required\": \"false\",\n              \"placeholder\": \"\"\n            };\n          }\n\n        })\n\n        this.setState({\n          form: {\n            fields: dataArray\n          }\n        });\n        console.log(dataArray);\n\n      })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n\n        <SplitterLayout>\n          <div>Build a Query !\n            <DynamicForm id=\"form\" config={this.state.form} onSubmit={(event) => this.submitHandler(event)}></DynamicForm>\n\n          </div>\n\n\n          <div>\n            <Panel id=\"resultPanel\"><JSONPretty json={this.state.response} theme={github} /></Panel>\n          </div>\n        </SplitterLayout>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}