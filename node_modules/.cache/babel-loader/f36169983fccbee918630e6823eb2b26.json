{"ast":null,"code":"'use strict';\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar isNil = require('lodash.isnil');\n\nvar _require = require('../../core'),\n    Query = _require.Query,\n    Script = _require.Script,\n    checkType = _require.util.checkType;\n/**\n * A query allowing to define scripts as queries.\n * They are typically used in a filter context.\n *\n * [Elasticsearch reference](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-script-query.html)\n *\n * @example\n * const scriptQry = esb.scriptQuery(esb.script()\n *  .lang('painless')\n *  .inline(\"doc['num1'].value > 1\"))\n *\n * // Use in filter context\n * const qry = esb.boolQuery().must(scriptQry);\n *\n * @param {Script=} script\n *\n * @extends Query\n */\n\n\nvar ScriptQuery = function (_Query) {\n  (0, _inherits3.default)(ScriptQuery, _Query); // eslint-disable-next-line require-jsdoc\n\n  function ScriptQuery(script) {\n    (0, _classCallCheck3.default)(this, ScriptQuery);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (ScriptQuery.__proto__ || Object.getPrototypeOf(ScriptQuery)).call(this, 'script'));\n\n    if (!isNil(script)) _this.script(script);\n    return _this;\n  }\n  /**\n   * Sets the `script` for query.\n   *\n   * @param {Script} script\n   * @returns {ScriptQuery} returns `this` so that calls can be chained.\n   */\n\n\n  (0, _createClass3.default)(ScriptQuery, [{\n    key: 'script',\n    value: function script(_script) {\n      checkType(_script, Script);\n      this._queryOpts.script = _script;\n      return this;\n    }\n  }]);\n  return ScriptQuery;\n}(Query);\n\nmodule.exports = ScriptQuery;","map":null,"metadata":{},"sourceType":"script"}