{"ast":null,"code":"'use strict';\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar isNil = require('lodash.isnil');\n\nvar _require = require('../../core'),\n    Query = _require.Query;\n/**\n * The `parent_id` query can be used to find child documents which belong to a particular parent.\n *\n * [Elasticsearch reference](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-parent-id-query.html)\n *\n * @example\n * const qry = esb.parentIdQuery('blog_tag', 1);\n *\n * @param {string=} type The **child** type. This must be a type with `_parent` field.\n * @param {string|number=} id The required parent id select documents must refer to.\n *\n * @extends Query\n */\n\n\nvar ParentIdQuery = function (_Query) {\n  (0, _inherits3.default)(ParentIdQuery, _Query); // eslint-disable-next-line require-jsdoc\n\n  function ParentIdQuery(type, id) {\n    (0, _classCallCheck3.default)(this, ParentIdQuery);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (ParentIdQuery.__proto__ || Object.getPrototypeOf(ParentIdQuery)).call(this, 'parent_id'));\n\n    if (!isNil(type)) _this._queryOpts.type = type;\n    if (!isNil(id)) _this._queryOpts.id = id;\n    return _this;\n  }\n  /**\n   * Sets the child type.\n   *\n   * @param {string} type The **child** type. This must be a type with `_parent` field.\n   * @returns {ParentIdQuery} returns `this` so that calls can be chained.\n   */\n\n\n  (0, _createClass3.default)(ParentIdQuery, [{\n    key: 'type',\n    value: function type(_type) {\n      this._queryOpts.type = _type;\n      return this;\n    }\n    /**\n     * Sets the id.\n     *\n     * @param {string|number} id The required parent id select documents must refer to.\n     * @returns {ParentIdQuery} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'id',\n    value: function id(_id) {\n      this._queryOpts.id = _id;\n      return this;\n    }\n    /**\n     * When set to `true` will ignore an unmapped `path` and will not match any\n     * documents for this query. When set to `false` (the default value) the query\n     * will throw an exception if the path is not mapped.\n     *\n     * @param {boolean} enable `true` or `false`, `false` by default.\n     * @returns {ParentIdQuery} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'ignoreUnmapped',\n    value: function ignoreUnmapped(enable) {\n      this._queryOpts.ignore_unmapped = enable;\n      return this;\n    }\n  }]);\n  return ParentIdQuery;\n}(Query);\n\nmodule.exports = ParentIdQuery;","map":null,"metadata":{},"sourceType":"script"}