{"ast":null,"code":"'use strict';\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar _require = require('../../core'),\n    Query = _require.Query,\n    Script = _require.Script,\n    checkType = _require.util.checkType;\n\nvar TermsAggregationBase = require('./terms-aggregation-base');\n/**\n * The `SignificantAggregationBase` provides support for common options used\n * in `SignificantTermsAggregation` and `SignificantTextAggregation`.\n *\n * **NOTE:** Instantiating this directly should not be required.\n * However, if you wish to add a custom implementation for whatever reason,\n * this class could be extended.\n *\n * @extends TermsAggregationBase\n */\n\n\nvar SignificantAggregationBase = function (_TermsAggregationBase) {\n  (0, _inherits3.default)(SignificantAggregationBase, _TermsAggregationBase);\n\n  function SignificantAggregationBase() {\n    (0, _classCallCheck3.default)(this, SignificantAggregationBase);\n    return (0, _possibleConstructorReturn3.default)(this, (SignificantAggregationBase.__proto__ || Object.getPrototypeOf(SignificantAggregationBase)).apply(this, arguments));\n  }\n\n  (0, _createClass3.default)(SignificantAggregationBase, [{\n    key: 'jlh',\n\n    /**\n     * Use JLH score as significance score.\n     *\n     * @returns {SignificantAggregationBase} returns `this` so that calls can be chained\n     */\n    value: function jlh() {\n      // I am guessing here\n      // Reference is not clear on usage\n      this._aggsDef.jlh = {};\n      return this;\n    }\n    /**\n     * Use `mutual_information` as significance score\n     *\n     * @param {boolean=} includeNegatives Default `true`. If set to `false`,\n     * filters out the terms that appear less often in the subset than in\n     * documents outside the subset\n     * @param {boolean=} backgroundIsSuperset `true`(default) if the documents in the bucket\n     * are also contained in the background. If instead you defined a custom background filter\n     * that represents a different set of documents that you want to compare to, pass `false`\n     * @returns {SignificantAggregationBase} returns `this` so that calls can be chained\n     */\n\n  }, {\n    key: 'mutualInformation',\n    value: function mutualInformation() {\n      var includeNegatives = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      var backgroundIsSuperset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      this._aggsDef.mutual_information = {\n        include_negatives: includeNegatives,\n        background_is_superset: backgroundIsSuperset\n      };\n      return this;\n    }\n    /**\n     * Use `chi_square` as significance score\n     *\n     * @param {boolean} includeNegatives Default `true`. If set to `false`,\n     * filters out the terms that appear less often in the subset than in\n     * documents outside the subset\n     * @param {boolean} backgroundIsSuperset `true`(default) if the documents in the bucket\n     * are also contained in the background. If instead you defined a custom background filter\n     * that represents a different set of documents that you want to compare to, pass `false`\n     * @returns {SignificantAggregationBase} returns `this` so that calls can be chained\n     */\n\n  }, {\n    key: 'chiSquare',\n    value: function chiSquare() {\n      var includeNegatives = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      var backgroundIsSuperset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      this._aggsDef.chi_square = {\n        include_negatives: includeNegatives,\n        background_is_superset: backgroundIsSuperset\n      };\n      return this;\n    }\n    /**\n     * Sets `gnd`, google normalized score to be used as significance score.\n     *\n     * @param {boolean} backgroundIsSuperset `true`(default) if the documents in the bucket\n     * are also contained in the background. If instead you defined a custom background filter\n     * that represents a different set of documents that you want to compare to, pass `false`\n     * @returns {SignificantAggregationBase} returns `this` so that calls can be chained\n     */\n\n  }, {\n    key: 'gnd',\n    value: function gnd() {\n      var backgroundIsSuperset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      this._aggsDef.gnd = {\n        background_is_superset: backgroundIsSuperset\n      };\n      return this;\n    }\n    /**\n     * Use a simple calculation of the number of documents in the foreground sample with a term\n     * divided by the number of documents in the background with the term. By default this\n     * produces a score greater than zero and less than one.\n     *\n     * @returns {SignificantAggregationBase} returns `this` so that calls can be chained\n     */\n\n  }, {\n    key: 'percentage',\n    value: function percentage() {\n      this._aggsDef.percentage = {};\n      return this;\n    }\n    /**\n     * Sets script for customized score calculation.\n     *\n     * @param {Script} script\n     * @returns {SignificantAggregationBase} returns `this` so that calls can be chained\n     */\n\n  }, {\n    key: 'scriptHeuristic',\n    value: function scriptHeuristic(script) {\n      checkType(script, Script);\n      this._aggsDef.script_heuristic = {\n        script: script\n      };\n      return this;\n    }\n    /**\n     * Sets the `background_filter` to narrow the scope of statistical information\n     * for background term frequencies instead of using the entire index.\n     *\n     * @example\n     * const reqBody = esb.requestBodySearch()\n     *     .query(esb.matchQuery('text', 'madrid'))\n     *     .agg(\n     *         esb.significantAggregationBase('tags', 'tag').backgroundFilter(\n     *             esb.termQuery('text', 'spain')\n     *         )\n     *     );\n     *\n     * @param {Query} filterQuery Filter query\n     * @returns {SignificantAggregationBase} returns `this` so that calls can be chained\n     */\n\n  }, {\n    key: 'backgroundFilter',\n    value: function backgroundFilter(filterQuery) {\n      checkType(filterQuery, Query);\n      this._aggsDef.background_filter = filterQuery;\n      return this;\n    }\n    /**\n     * @override\n     * @throws {Error} This method cannot be called on SignificantAggregationBase\n     */\n\n  }, {\n    key: 'script',\n    value: function script() {\n      console.log('Please refer ' + this._refUrl);\n      throw new Error('script is not supported in ' + this.constructor.name);\n    }\n  }]);\n  return SignificantAggregationBase;\n}(TermsAggregationBase);\n\nmodule.exports = SignificantAggregationBase;","map":null,"metadata":{},"sourceType":"script"}