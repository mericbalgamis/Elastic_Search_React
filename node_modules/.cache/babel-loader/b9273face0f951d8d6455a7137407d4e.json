{"ast":null,"code":"'use strict';\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar MatchPhraseQueryBase = require('./match-phrase-query-base');\n\nvar ES_REF_URL = 'https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-match-query-phrase-prefix.html';\n/**\n * [Elasticsearch reference](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-match-query-phrase-prefix.html)\n *\n * @example\n * const qry = esb.matchPhrasePrefixQuery('message', 'quick brown f');\n *\n * @param {string=} field The document field to query against\n * @param {string=} queryString The query string\n *\n * @extends MatchPhraseQueryBase\n */\n\nvar MatchPhrasePrefixQuery = function (_MatchPhraseQueryBase) {\n  (0, _inherits3.default)(MatchPhrasePrefixQuery, _MatchPhraseQueryBase); // eslint-disable-next-line require-jsdoc\n\n  function MatchPhrasePrefixQuery(field, queryString) {\n    (0, _classCallCheck3.default)(this, MatchPhrasePrefixQuery);\n    return (0, _possibleConstructorReturn3.default)(this, (MatchPhrasePrefixQuery.__proto__ || Object.getPrototypeOf(MatchPhrasePrefixQuery)).call(this, 'match_phrase_prefix', ES_REF_URL, field, queryString));\n  }\n  /**\n   * Control to how many prefixes the last term will be expanded.\n   *\n   * @example\n   * const qry = esb.matchPhrasePrefixQuery('message', 'quick brown f')\n   *     .maxExpansions(10);\n   *\n   * @param {number} limit Defaults to 50.\n   * @returns {MatchPhrasePrefixQuery} returns `this` so that calls can be chained.\n   */\n\n\n  (0, _createClass3.default)(MatchPhrasePrefixQuery, [{\n    key: 'maxExpansions',\n    value: function maxExpansions(limit) {\n      this._queryOpts.max_expansions = limit;\n      return this;\n    }\n  }]);\n  return MatchPhrasePrefixQuery;\n}(MatchPhraseQueryBase);\n\nmodule.exports = MatchPhrasePrefixQuery;","map":null,"metadata":{},"sourceType":"script"}