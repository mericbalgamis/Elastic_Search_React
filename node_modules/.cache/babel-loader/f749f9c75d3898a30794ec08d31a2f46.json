{"ast":null,"code":"'use strict';\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar _require = require('../../core'),\n    checkType = _require.util.checkType;\n\nvar SpanQueryBase = require('./span-query-base');\n/**\n * Matches the union of its span clauses. The span or query maps to Lucene `SpanOrQuery`.\n *\n * [Elasticsearch reference](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-span-or-query.html)\n *\n * @example\n * const spanQry = esb.spanOrQuery()\n *     .clauses([\n *         esb.spanTermQuery('field', 'value1'),\n *         esb.spanTermQuery('field', 'value2'),\n *         esb.spanTermQuery('field', 'value3')\n *     ]);\n *\n * @extends SpanQueryBase\n */\n\n\nvar SpanOrQuery = function (_SpanQueryBase) {\n  (0, _inherits3.default)(SpanOrQuery, _SpanQueryBase); // eslint-disable-next-line require-jsdoc\n\n  function SpanOrQuery() {\n    (0, _classCallCheck3.default)(this, SpanOrQuery);\n    return (0, _possibleConstructorReturn3.default)(this, (SpanOrQuery.__proto__ || Object.getPrototypeOf(SpanOrQuery)).call(this, 'span_or'));\n  }\n  /**\n   * Sets the clauses element which is a list of one or more other span type queries.\n   *\n   * @param {Array<SpanQueryBase>} clauses\n   * @returns {SpanOrQuery} returns `this` so that calls can be chained.\n   * @throws {TypeError} If parameter `clauses` is not an instance of Array or if\n   * any member of the array is not an instance of `SpanQueryBase`.\n   */\n\n\n  (0, _createClass3.default)(SpanOrQuery, [{\n    key: 'clauses',\n    value: function clauses(_clauses) {\n      checkType(_clauses, Array);\n\n      _clauses.forEach(function (clause) {\n        return checkType(clause, SpanQueryBase);\n      });\n\n      this._queryOpts.clauses = _clauses;\n      return this;\n    }\n  }]);\n  return SpanOrQuery;\n}(SpanQueryBase);\n\nmodule.exports = SpanOrQuery;","map":null,"metadata":{},"sourceType":"script"}