{"ast":null,"code":"'use strict';\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar _require = require('../../core'),\n    Query = _require.Query,\n    _require$util = _require.util,\n    checkType = _require$util.checkType,\n    setDefault = _require$util.setDefault;\n\nvar BucketAggregationBase = require('./bucket-aggregation-base');\n\nvar ES_REF_URL = 'https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-adjacency-matrix-aggregation.html';\n/**\n * A bucket aggregation returning a form of adjacency matrix.\n * The request provides a collection of named filter expressions,\n * similar to the `filters` aggregation request. Each bucket in the response\n * represents a non-empty cell in the matrix of intersecting filters.\n *\n * [Elasticsearch reference](https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-adjacency-matrix-aggregation.html)\n *\n * @example\n * const agg = esb.adjacencyMatrixAggregation('interactions').filters({\n *     grpA: esb.termsQuery('accounts', ['hillary', 'sidney']),\n *     grpB: esb.termsQuery('accounts', ['donald', 'mitt']),\n *     grpC: esb.termsQuery('accounts', ['vladimir', 'nigel'])\n * });\n *\n * @param {string} name The name which will be used to refer to this aggregation.\n *\n * @extends BucketAggregationBase\n */\n\nvar AdjacencyMatrixAggregation = function (_BucketAggregationBas) {\n  (0, _inherits3.default)(AdjacencyMatrixAggregation, _BucketAggregationBas); // eslint-disable-next-line require-jsdoc\n\n  function AdjacencyMatrixAggregation(name) {\n    (0, _classCallCheck3.default)(this, AdjacencyMatrixAggregation);\n    return (0, _possibleConstructorReturn3.default)(this, (AdjacencyMatrixAggregation.__proto__ || Object.getPrototypeOf(AdjacencyMatrixAggregation)).call(this, name, 'adjacency_matrix'));\n  }\n  /**\n   * @override\n   * @throws {Error} This method cannot be called on AdjacencyMatrixAggregation\n   */\n\n\n  (0, _createClass3.default)(AdjacencyMatrixAggregation, [{\n    key: 'field',\n    value: function field() {\n      console.log('Please refer ' + ES_REF_URL);\n      throw new Error('field is not supported in AdjacencyMatrixAggregation');\n    }\n    /**\n     * @override\n     * @throws {Error} This method cannot be called on AdjacencyMatrixAggregation\n     */\n\n  }, {\n    key: 'script',\n    value: function script() {\n      console.log('Please refer ' + ES_REF_URL);\n      throw new Error('script is not supported in AdjacencyMatrixAggregation');\n    }\n    /**\n     * Sets a named filter query.\n     *\n     * @param {string} filterName Name for the filter.\n     * @param {Query} filterQuery Query to filter on. Example - term query.\n     * @returns {AdjacencyMatrixAggregation} returns `this` so that calls can be chained\n     * @throws {TypeError} If `filterQuery` is not an instance of `Query`\n     */\n\n  }, {\n    key: 'filter',\n    value: function filter(filterName, filterQuery) {\n      checkType(filterQuery, Query);\n      setDefault(this._aggsDef, 'filters', {});\n      this._aggsDef.filters[filterName] = filterQuery;\n      return this;\n    }\n    /**\n     * Assigns filters to already added filters.\n     * Does not mix with anonymous filters.\n     * If anonymous filters are present, they will be overwritten.\n     *\n     * @param {Object} filterQueries Object with multiple key value pairs\n     * where filter name is the key and filter query is the value.\n     * @returns {AdjacencyMatrixAggregation} returns `this` so that calls can be chained\n     * @throws {TypeError} If `filterQueries` is not an instance of object\n     */\n\n  }, {\n    key: 'filters',\n    value: function filters(filterQueries) {\n      checkType(filterQueries, Object);\n      setDefault(this._aggsDef, 'filters', {});\n      Object.assign(this._aggsDef.filters, filterQueries);\n      return this;\n    }\n    /**\n     * Sets the `separator` parameter to use a separator string other than\n     * the default of the ampersand.\n     *\n     * @param {string} sep the string used to separate keys in intersections buckets\n     * e.g. & character for keyed filters A and B would return an\n     * intersection bucket named A&B\n     * @returns {AdjacencyMatrixAggregation} returns `this` so that calls can be chained\n     */\n\n  }, {\n    key: 'separator',\n    value: function separator(sep) {\n      this._aggsDef.separator = sep;\n      return this;\n    }\n  }]);\n  return AdjacencyMatrixAggregation;\n}(BucketAggregationBase);\n\nmodule.exports = AdjacencyMatrixAggregation;","map":null,"metadata":{},"sourceType":"script"}