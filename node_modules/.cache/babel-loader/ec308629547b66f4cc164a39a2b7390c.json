{"ast":null,"code":"'use strict';\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar MetricsAggregationBase = require('./metrics-aggregation-base');\n\nvar ES_REF_URL = 'https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-metrics-scripted-metric-aggregation.html';\n/**\n * A metric aggregation that executes using scripts to provide a metric output.\n *\n * [Elasticsearch reference](https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-metrics-scripted-metric-aggregation.html)\n *\n * Aggregation that keeps track and returns the minimum value among numeric\n * values extracted from the aggregated documents.\n *\n * @example\n * const agg = esb.scriptedMetricAggregation('profit')\n *     .initScript('params._agg.transactions = []')\n *     .mapScript(\n *         \"params._agg.transactions.add(doc.type.value == 'sale' ? doc.amount.value : -1 * doc.amount.value)\"\n *     )\n *     .combineScript(\n *         'double profit = 0; for (t in params._agg.transactions) { profit += t } return profit'\n *     )\n *     .reduceScript(\n *         'double profit = 0; for (a in params._aggs) { profit += a } return profit'\n *     );\n *\n * @example\n * // Specify using file scripts\n * const agg = esb.scriptedMetricAggregation('profit')\n *     .initScript(esb.script('file', 'my_init_script'))\n *     .mapScript(esb.script('file', 'my_map_script'))\n *     .combineScript(esb.script('file', 'my_combine_script'))\n *     // script parameters for `init`, `map` and `combine` scripts must be\n *     // specified in a global params object so that\n *     // it can be shared between the scripts\n *     .params({ field: 'amount', _agg: {} })\n *     .reduceScript(esb.script('file', 'my_reduce_script'));\n *\n * @param {string} name The name which will be used to refer to this aggregation.\n *\n * @extends MetricsAggregationBase\n */\n\nvar ScriptedMetricAggregation = function (_MetricsAggregationBa) {\n  (0, _inherits3.default)(ScriptedMetricAggregation, _MetricsAggregationBa); // eslint-disable-next-line require-jsdoc\n\n  function ScriptedMetricAggregation(name) {\n    (0, _classCallCheck3.default)(this, ScriptedMetricAggregation);\n    return (0, _possibleConstructorReturn3.default)(this, (ScriptedMetricAggregation.__proto__ || Object.getPrototypeOf(ScriptedMetricAggregation)).call(this, name, 'scripted_metric'));\n  }\n  /**\n   * @override\n   * @throws {Error} This method cannot be called on ScriptedMetricAggregation\n   */\n\n\n  (0, _createClass3.default)(ScriptedMetricAggregation, [{\n    key: 'field',\n    value: function field() {\n      console.log('Please refer ' + ES_REF_URL);\n      throw new Error('field is not supported in ScriptedMetricAggregation');\n    }\n    /**\n     * @override\n     * @throws {Error} This method cannot be called on ScriptedMetricAggregation\n     */\n\n  }, {\n    key: 'script',\n    value: function script() {\n      console.log('Please refer ' + ES_REF_URL);\n      throw new Error('script is not supported in ScriptedMetricAggregation');\n    }\n    /**\n     * @override\n     * @throws {Error} This method cannot be called on ScriptedMetricAggregation\n     */\n\n  }, {\n    key: 'missing',\n    value: function missing() {\n      console.log('Please refer ' + ES_REF_URL);\n      throw new Error('missing is not supported in ScriptedMetricAggregation');\n    }\n    /**\n     * Sets the initialization script.\n     *\n     * Executed prior to any collection of documents. Allows the aggregation to set up any initial state.\n     *\n     * @param {string|Script} initScript The initialization script. Can be a string or an Script instance\n     * @returns {ScriptedMetricAggregation} returns `this` so that calls can be chained\n     */\n\n  }, {\n    key: 'initScript',\n    value: function initScript(_initScript) {\n      this._aggsDef.init_script = _initScript;\n      return this;\n    }\n    /**\n     * Sets the map script. This is the only required script.\n     *\n     * Executed once per document collected.\n     * If no combine_script is specified, the resulting state needs to be stored in an object named _agg.\n     *\n     * @param {string|Script} mapScript The map script. Can be a string or an Script instance\n     * @returns {ScriptedMetricAggregation} returns `this` so that calls can be chained\n     */\n\n  }, {\n    key: 'mapScript',\n    value: function mapScript(_mapScript) {\n      this._aggsDef.map_script = _mapScript;\n      return this;\n    }\n    /**\n     * Sets the combine phase script.\n     *\n     * Executed once on each shard after document collection is complete.\n     * Allows the aggregation to consolidate the state returned from each shard.\n     * If a combine_script is not provided the combine phase will return the aggregation variable.\n     *\n     * @param {string|Script} combineScript The combine script. Can be a string or an Script instance\n     * @returns {ScriptedMetricAggregation} returns `this` so that calls can be chained\n     */\n\n  }, {\n    key: 'combineScript',\n    value: function combineScript(_combineScript) {\n      this._aggsDef.combine_script = _combineScript;\n      return this;\n    }\n    /**\n     * Sets the reduce phase script.\n     *\n     * Executed once on the coordinating node after all shards have returned their results.\n     * The script is provided with access to a variable _aggs\n     * which is an array of the result of the combine_script on each shard.\n     * If a reduce_script is not provided the reduce phase will return the _aggs variable.\n     *\n     * @param {string|Script} reduceScript The combine script. Can be a string or an Script instance\n     * @returns {ScriptedMetricAggregation} returns `this` so that calls can be chained\n     */\n\n  }, {\n    key: 'reduceScript',\n    value: function reduceScript(_reduceScript) {\n      this._aggsDef.reduce_script = _reduceScript;\n      return this;\n    }\n    /**\n     * Sets the params for scripts.\n     *\n     * Optional object whose contents will be passed as variables to\n     * the init_script, map_script and combine_script\n     *\n     * If you specify script parameters then you must specify `\"_agg\": {}`.\n     *\n     * @param {Object} params Object passed to init, map and combine script. Default value - `{ \"_agg\": {} }`\n     * @returns {ScriptedMetricAggregation} returns `this` so that calls can be chained\n     */\n\n  }, {\n    key: 'params',\n    value: function params(_params) {\n      // TODO: If sure, add validation to see that _agg: {} is present in params\n      this._aggsDef.params = _params;\n      return this;\n    }\n  }]);\n  return ScriptedMetricAggregation;\n}(MetricsAggregationBase);\n\nmodule.exports = ScriptedMetricAggregation;","map":null,"metadata":{},"sourceType":"script"}