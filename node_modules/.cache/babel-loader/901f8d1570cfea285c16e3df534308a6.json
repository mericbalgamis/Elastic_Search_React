{"ast":null,"code":"'use strict';\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar _require = require('../../core'),\n    checkType = _require.util.checkType;\n\nvar SpanQueryBase = require('./span-query-base');\n/**\n * Base class for span queries with `little`, `big` clauses.\n *\n * **NOTE:** Instantiating this directly should not be required.\n * However, if you wish to add a custom implementation for whatever reason,\n * this class could be extended.\n *\n * @extends SpanQueryBase\n */\n\n\nvar SpanLittleBigQueryBase = function (_SpanQueryBase) {\n  (0, _inherits3.default)(SpanLittleBigQueryBase, _SpanQueryBase);\n\n  function SpanLittleBigQueryBase() {\n    (0, _classCallCheck3.default)(this, SpanLittleBigQueryBase);\n    return (0, _possibleConstructorReturn3.default)(this, (SpanLittleBigQueryBase.__proto__ || Object.getPrototypeOf(SpanLittleBigQueryBase)).apply(this, arguments));\n  }\n\n  (0, _createClass3.default)(SpanLittleBigQueryBase, [{\n    key: 'little',\n\n    /**\n     * Sets the `little` clause.\n     *\n     * @param {SpanQueryBase} spanQry Any span type query\n     * @returns {SpanLittleBigQueryBase} returns `this` so that calls can be chained.\n     */\n    value: function little(spanQry) {\n      checkType(spanQry, SpanQueryBase);\n      this._queryOpts.little = spanQry;\n      return this;\n    }\n    /**\n     * Sets the `big` clause.\n     *\n     * @param {SpanQueryBase} spanQry Any span type query\n     * @returns {SpanLittleBigQueryBase} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'big',\n    value: function big(spanQry) {\n      checkType(spanQry, SpanQueryBase);\n      this._queryOpts.big = spanQry;\n      return this;\n    }\n  }]);\n  return SpanLittleBigQueryBase;\n}(SpanQueryBase);\n\nmodule.exports = SpanLittleBigQueryBase;","map":null,"metadata":{},"sourceType":"script"}