{"ast":null,"code":"'use strict';\n\nvar _defineProperty2 = require('babel-runtime/helpers/defineProperty');\n\nvar _defineProperty3 = _interopRequireDefault(_defineProperty2);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar has = require('lodash.has');\n\nvar isNil = require('lodash.isnil');\n\nvar _require = require('../../core'),\n    Query = _require.Query;\n/**\n * The `ValueTermQueryBase` provides support for common options used across\n * various term level query implementations.\n *\n * @param {string} queryType\n * @param {string=} field The document field to query against\n * @param {string=} value The query string\n *\n * @extends Query\n */\n\n\nvar ValueTermQueryBase = function (_Query) {\n  (0, _inherits3.default)(ValueTermQueryBase, _Query); // eslint-disable-next-line require-jsdoc\n\n  function ValueTermQueryBase(queryType, field, value) {\n    (0, _classCallCheck3.default)(this, ValueTermQueryBase);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (ValueTermQueryBase.__proto__ || Object.getPrototypeOf(ValueTermQueryBase)).call(this, queryType));\n\n    if (!isNil(field)) _this._field = field;\n    if (!isNil(value)) _this._queryOpts.value = value;\n    return _this;\n  }\n  /**\n   * Sets the field to search on.\n   *\n   * @param {string} field\n   * @returns {ValueTermQueryBase} returns `this` so that calls can be chained.\n   */\n\n\n  (0, _createClass3.default)(ValueTermQueryBase, [{\n    key: 'field',\n    value: function field(_field) {\n      this._field = _field;\n      return this;\n    }\n    /**\n     * Sets the query string.\n     *\n     * @param {string|number|boolean} queryVal\n     * @returns {ValueTermQueryBase} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'value',\n    value: function value(queryVal) {\n      this._queryOpts.value = queryVal;\n      return this;\n    }\n    /**\n     * Override default `toJSON` to return DSL representation of the term level query\n     * class instance.\n     *\n     * @override\n     * @returns {Object} returns an Object which maps to the elasticsearch query DSL\n     */\n\n  }, {\n    key: 'toJSON',\n    value: function toJSON() {\n      // recursiveToJSON doesn't seem to be required here.\n      // Revisit this.. Smells a little bit\n      if (!has(this._queryOpts, 'value')) {\n        throw new Error('Value is required for term level query!');\n      }\n\n      var qryOpts = Object.keys(this._queryOpts).length === 1 ? this._queryOpts.value : this._queryOpts;\n      return (0, _defineProperty3.default)({}, this.queryType, (0, _defineProperty3.default)({}, this._field, qryOpts));\n    }\n  }]);\n  return ValueTermQueryBase;\n}(Query);\n\nmodule.exports = ValueTermQueryBase;","map":null,"metadata":{},"sourceType":"script"}