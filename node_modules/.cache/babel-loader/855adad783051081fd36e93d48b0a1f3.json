{"ast":null,"code":"'use strict';\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar isNil = require('lodash.isnil');\n\nvar JoiningQueryBase = require('./joining-query-base');\n\nvar ES_REF_URL = 'https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-has-child-query.html';\n/**\n * The `has_child` filter accepts a query and the child type to run against, and\n * results in parent documents that have child docs matching the query.\n *\n * [Elasticsearch reference](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-has-child-query.html)\n *\n * @example\n * // Scoring support\n * const qry = esb.hasChildQuery(\n *     esb.termQuery('tag', 'something'),\n *     'blog_tag'\n * ).scoreMode('min');\n *\n * @example\n * // Sort by child documents' `click_count` field\n * const qry = esb.hasChildQuery()\n *     .query(\n *         esb.functionScoreQuery().function(\n *             esb.scriptScoreFunction(\"_score * doc['click_count'].value\")\n *         )\n *     )\n *     .type('blog_tag')\n *     .scoreMode('max');\n *\n * @param {Query=} qry A valid `Query` object\n * @param {string=} type The child type\n *\n * @extends JoiningQueryBase\n */\n\nvar HasChildQuery = function (_JoiningQueryBase) {\n  (0, _inherits3.default)(HasChildQuery, _JoiningQueryBase); // eslint-disable-next-line require-jsdoc\n\n  function HasChildQuery(qry, type) {\n    (0, _classCallCheck3.default)(this, HasChildQuery);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (HasChildQuery.__proto__ || Object.getPrototypeOf(HasChildQuery)).call(this, 'has_child', ES_REF_URL, qry));\n\n    if (!isNil(type)) _this._queryOpts.type = type;\n    return _this;\n  }\n  /**\n   * Sets the child document type to search against.\n   * Alias for method `childType`.\n   *\n   * @param {string} type A valid doc type name\n   * @returns {HasChildQuery} returns `this` so that calls can be chained.\n   */\n\n\n  (0, _createClass3.default)(HasChildQuery, [{\n    key: 'type',\n    value: function type(_type) {\n      this._queryOpts.type = _type;\n      return this;\n    }\n    /**\n     * Sets the child document type to search against\n     *\n     * @param {string} type A valid doc type name\n     * @returns {HasChildQuery} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'childType',\n    value: function childType(type) {\n      console.warn('[HasChildQuery] Field `child_type` is deprecated. Use `type` instead.');\n      return this.type(type);\n    }\n    /**\n     * Specify the minimum number of children are required to match\n     * for the parent doc to be considered a match\n     *\n     * @example\n     * const qry = esb.hasChildQuery(esb.termQuery('tag', 'something'), 'blog_tag')\n     *     .minChildren(2)\n     *     .maxChildren(10)\n     *     .scoreMode('min');\n     *\n     * @param {number} limit A positive `integer` value.\n     * @returns {HasChildQuery} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'minChildren',\n    value: function minChildren(limit) {\n      this._queryOpts.min_children = limit;\n      return this;\n    }\n    /**\n     * Specify the maximum number of children are required to match\n     * for the parent doc to be considered a match\n     *\n     * @example\n     * const qry = esb.hasChildQuery(esb.termQuery('tag', 'something'), 'blog_tag')\n     *     .minChildren(2)\n     *     .maxChildren(10)\n     *     .scoreMode('min');\n     *\n     * @param {number} limit A positive `integer` value.\n     * @returns {HasChildQuery} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'maxChildren',\n    value: function maxChildren(limit) {\n      this._queryOpts.max_children = limit;\n      return this;\n    }\n  }]);\n  return HasChildQuery;\n}(JoiningQueryBase);\n\nmodule.exports = HasChildQuery;","map":null,"metadata":{},"sourceType":"script"}