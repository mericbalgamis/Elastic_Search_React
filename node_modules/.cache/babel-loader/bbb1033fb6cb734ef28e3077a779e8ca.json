{"ast":null,"code":"'use strict';\n\nvar _defineProperty2 = require('babel-runtime/helpers/defineProperty');\n\nvar _defineProperty3 = _interopRequireDefault(_defineProperty2);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar isNil = require('lodash.isnil');\n\nvar _require = require('../../core'),\n    Query = _require.Query,\n    _require$util = _require.util,\n    invalidParam = _require$util.invalidParam,\n    recursiveToJSON = _require$util.recursiveToJSON;\n\nvar invalidValidationMethod = invalidParam('', 'validation_method', \"'IGNORE_MALFORMED', 'COERCE' or 'STRICT'\");\n/**\n * The `GeoQueryBase` provides support for common options used across\n * various geo query implementations.\n *\n * **NOTE:** Instantiating this directly should not be required.\n * However, if you wish to add a custom implementation for whatever reason,\n * this class could be extended.\n *\n * @param {string} queryType\n * @param {string=} field\n *\n * @extends Query\n */\n\nvar GeoQueryBase = function (_Query) {\n  (0, _inherits3.default)(GeoQueryBase, _Query); // eslint-disable-next-line require-jsdoc\n\n  function GeoQueryBase(queryType, field) {\n    (0, _classCallCheck3.default)(this, GeoQueryBase);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (GeoQueryBase.__proto__ || Object.getPrototypeOf(GeoQueryBase)).call(this, queryType));\n\n    _this._field = null;\n    _this._fieldOpts = {};\n    if (!isNil(field)) _this._field = field;\n    return _this;\n  }\n  /**\n   * Sets the field to run the geo query on.\n   *\n   * @param {string} field\n   * @returns {GeoQueryBase} returns `this` so that calls can be chained.\n   */\n\n\n  (0, _createClass3.default)(GeoQueryBase, [{\n    key: 'field',\n    value: function field(_field) {\n      this._field = _field;\n      return this;\n    }\n    /**\n     * Sets the `validation_method` parameter. Can be set to `IGNORE_MALFORMED` to accept\n     * geo points with invalid latitude or longitude, `COERCE` to try and infer correct latitude\n     * or longitude, or `STRICT` (default is `STRICT`).\n     *\n     * Note: The `ignore_malformed` and `coerce` parameters have been removed\n     * from `geo_bounding_box`, `geo_polygon`, and `geo_distance` queries in\n     * elasticsearch 6.0.\n     *\n     * @param {string} method One of `IGNORE_MALFORMED`, `COERCE` or `STRICT`(default)\n     * @returns {GeoQueryBase} returns `this` so that calls can be chained.\n     * @throws {Error} If `method` parameter is not one of `IGNORE_MALFORMED`, `COERCE` or `STRICT`\n     */\n\n  }, {\n    key: 'validationMethod',\n    value: function validationMethod(method) {\n      if (isNil(method)) invalidValidationMethod(method);\n      var methodUpper = method.toUpperCase();\n\n      if (methodUpper !== 'IGNORE_MALFORMED' && methodUpper !== 'COERCE' && methodUpper !== 'STRICT') {\n        invalidValidationMethod(method);\n      }\n\n      this._queryOpts.validation_method = methodUpper;\n      return this;\n    }\n    /**\n     * Override default `toJSON` to return DSL representation of the geo query\n     * class instance.\n     *\n     * @override\n     * @returns {Object} returns an Object which maps to the elasticsearch query DSL\n     */\n\n  }, {\n    key: 'toJSON',\n    value: function toJSON() {\n      return recursiveToJSON((0, _defineProperty3.default)({}, this.queryType, Object.assign((0, _defineProperty3.default)({}, this._field, this._fieldOpts), this._queryOpts)));\n    }\n  }]);\n  return GeoQueryBase;\n}(Query);\n\nmodule.exports = GeoQueryBase;","map":null,"metadata":{},"sourceType":"script"}