{"ast":null,"code":"'use strict';\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar MultiTermQueryBase = require('./multi-term-query-base');\n/**\n * The fuzzy query generates all possible matching terms that are within\n * the maximum edit distance specified in `fuzziness` and then checks\n * the term dictionary to find out which of those generated terms\n * actually exist in the index.\n *\n * The fuzzy query uses similarity based on Levenshtein edit distance.\n *\n * [Elasticsearch reference](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-fuzzy-query.html)\n *\n * @example\n * const qry = esb.fuzzyQuery('user', 'ki');\n *\n * @example\n * // More advanced settings\n * const qry = esb.fuzzyQuery('user', 'ki')\n *     .fuzziness(2)\n *     .prefixLength(0)\n *     .maxExpansions(100)\n *     .boost(1.0);\n *\n * @param {string=} field\n * @param {string|number=} value\n *\n * @extends MultiTermQueryBase\n */\n\n\nvar FuzzyQuery = function (_MultiTermQueryBase) {\n  (0, _inherits3.default)(FuzzyQuery, _MultiTermQueryBase); // eslint-disable-next-line require-jsdoc\n\n  function FuzzyQuery(field, value) {\n    (0, _classCallCheck3.default)(this, FuzzyQuery);\n    return (0, _possibleConstructorReturn3.default)(this, (FuzzyQuery.__proto__ || Object.getPrototypeOf(FuzzyQuery)).call(this, 'fuzzy', field, value));\n  }\n  /**\n   * Sets the `fuzziness` parameter which is interpreted as a Levenshtein Edit Distance —\n   * the number of one character changes that need to be made to one string to make it\n   * the same as another string.\n   *\n   * @param {number|string} factor Can be specified either as a number, or the maximum\n   * number of edits, or as `AUTO` which generates an edit distance based on the length\n   * of the term.\n   * @returns {FuzzyQuery} returns `this` so that calls can be chained.\n   */\n\n\n  (0, _createClass3.default)(FuzzyQuery, [{\n    key: 'fuzziness',\n    value: function fuzziness(factor) {\n      this._queryOpts.fuzziness = factor;\n      return this;\n    }\n    /**\n     * The number of initial characters which will not be “fuzzified”.\n     * This helps to reduce the number of terms which must be examined. Defaults to `0`.\n     *\n     * @param {number} len Characters to skip fuzzy for. Defaults to `0`.\n     * @returns {FuzzyQuery} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'prefixLength',\n    value: function prefixLength(len) {\n      this._queryOpts.prefix_length = len;\n      return this;\n    }\n    /**\n     * The maximum number of terms that the fuzzy query will expand to. Defaults to `50`.\n     *\n     * @param {number} limit Limit for fuzzy query expansion. Defaults to `50`.\n     * @returns {FuzzyQuery} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'maxExpansions',\n    value: function maxExpansions(limit) {\n      this._queryOpts.max_expansions = limit;\n      return this;\n    }\n    /**\n     * Transpositions (`ab` → `ba`) are allowed by default but can be disabled\n     * by setting `transpositions` to false.\n     *\n     * @param {boolean} enable\n     * @returns {FuzzyQuery} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'transpositions',\n    value: function transpositions(enable) {\n      this._queryOpts.transpositions = enable;\n      return this;\n    }\n  }]);\n  return FuzzyQuery;\n}(MultiTermQueryBase);\n\nmodule.exports = FuzzyQuery;","map":null,"metadata":{},"sourceType":"script"}