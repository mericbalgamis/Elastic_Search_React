{"ast":null,"code":"'use strict';\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar isNil = require('lodash.isnil');\n\nvar BucketAggregationBase = require('./bucket-aggregation-base');\n\nvar ES_REF_URL = 'https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-geohashgrid-aggregation.html';\n/**\n * A multi-bucket aggregation that works on geo_point fields and groups points\n * into buckets that represent cells in a grid. The resulting grid can be sparse\n * and only contains cells that have matching data. Each cell is labeled using a\n * geohash which is of user-definable precision.\n\n * [Elasticsearch reference](https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-geohashgrid-aggregation.html)\n *\n * @example\n * const agg = esb.geoHashGridAggregation('large-grid', 'location').precision(3);\n *\n * @param {string} name The name which will be used to refer to this aggregation.\n * @param {string=} field The field to aggregate on\n *\n * @extends BucketAggregationBase\n */\n\nvar GeoHashGridAggregation = function (_BucketAggregationBas) {\n  (0, _inherits3.default)(GeoHashGridAggregation, _BucketAggregationBas); // eslint-disable-next-line require-jsdoc\n\n  function GeoHashGridAggregation(name, field) {\n    (0, _classCallCheck3.default)(this, GeoHashGridAggregation);\n    return (0, _possibleConstructorReturn3.default)(this, (GeoHashGridAggregation.__proto__ || Object.getPrototypeOf(GeoHashGridAggregation)).call(this, name, 'geohash_grid', field));\n  }\n  /**\n   * @override\n   * @throws {Error} This method cannot be called on GeoHashGridAggregation\n   */\n\n\n  (0, _createClass3.default)(GeoHashGridAggregation, [{\n    key: 'format',\n    value: function format() {\n      console.log('Please refer ' + ES_REF_URL);\n      throw new Error('format is not supported in GeoHashGridAggregation');\n    }\n    /**\n     * @override\n     * @throws {Error} This method cannot be called on GeoHashGridAggregation\n     */\n\n  }, {\n    key: 'script',\n    value: function script() {\n      console.log('Please refer ' + ES_REF_URL);\n      throw new Error('script is not supported in GeoHashGridAggregation');\n    }\n    /**\n     * Sets the precision for the generated geohash.\n     *\n     * @param {number} precision Precision can be between 1 and 12\n     * @returns {GeoHashGridAggregation} returns `this` so that calls can be chained\n     * @throws {Error} If precision is not between 1 and 12.\n     */\n\n  }, {\n    key: 'precision',\n    value: function precision(_precision) {\n      if (isNil(_precision) || _precision < 1 || _precision > 12) {\n        throw new Error('`precision` can only be value from 1 to 12.');\n      }\n\n      this._aggsDef.precision = _precision;\n      return this;\n    }\n    /**\n     * Sets the maximum number of geohash buckets to return.\n     * When results are trimmed, buckets are prioritised\n     * based on the volumes of documents they contain.\n     *\n     * @param {number} size Optional. The maximum number of geohash\n     * buckets to return (defaults to 10,000).\n     * @returns {GeoHashGridAggregation} returns `this` so that calls can be chained\n     */\n\n  }, {\n    key: 'size',\n    value: function size(_size) {\n      this._aggsDef.size = _size;\n      return this;\n    }\n    /**\n     * Determines how many geohash_grid the coordinating node\n     * will request from each shard.\n     *\n     * @param {number} shardSize Optional.\n     * @returns {GeoHashGridAggregation} returns `this` so that calls can be chained\n     */\n\n  }, {\n    key: 'shardSize',\n    value: function shardSize(_shardSize) {\n      this._aggsDef.shard_size = _shardSize;\n      return this;\n    }\n  }]);\n  return GeoHashGridAggregation;\n}(BucketAggregationBase);\n\nmodule.exports = GeoHashGridAggregation;","map":null,"metadata":{},"sourceType":"script"}