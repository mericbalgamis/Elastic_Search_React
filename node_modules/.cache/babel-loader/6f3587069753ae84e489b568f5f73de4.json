{"ast":null,"code":"'use strict';\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar QueryStringQueryBase = require('./query-string-query-base');\n\nvar ES_REF_URL = 'https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-simple-query-string-query.html';\n/**\n * A query that uses the `SimpleQueryParser` to parse its context.\n * Unlike the regular `query_string` query, the `simple_query_string` query\n * will never throw an exception, and discards invalid parts of the query.\n *\n * [Elasticsearch reference](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-simple-query-string-query.html)\n *\n * @example\n * const qry = esb.simpleQueryStringQuery(\n *     '\"fried eggs\" +(eggplant | potato) -frittata'\n * )\n *     .analyzer('snowball')\n *     .fields(['body^5', '_all'])\n *     .defaultOperator();\n *\n * @param {string=} queryString The query string\n *\n * @extends QueryStringQueryBase\n */\n\nvar SimpleQueryStringQuery = function (_QueryStringQueryBase) {\n  (0, _inherits3.default)(SimpleQueryStringQuery, _QueryStringQueryBase); // eslint-disable-next-line require-jsdoc\n\n  function SimpleQueryStringQuery(queryString) {\n    (0, _classCallCheck3.default)(this, SimpleQueryStringQuery);\n    return (0, _possibleConstructorReturn3.default)(this, (SimpleQueryStringQuery.__proto__ || Object.getPrototypeOf(SimpleQueryStringQuery)).call(this, 'simple_query_string', ES_REF_URL, queryString));\n  }\n  /**\n   * `simple_query_string` support multiple flags to specify which parsing features\n   * should be enabled. It is specified as a `|`-delimited string.\n   *\n   * @example\n   * const qry = esb.simpleQueryStringQuery('foo | bar + baz*')\n   *     .flags('OR|AND|PREFIX');\n   *\n   * @param {string} flags `|` delimited string. The available flags are: `ALL`, `NONE`,\n   * `AND`, `OR`, `NOT`, `PREFIX`, `PHRASE`, `PRECEDENCE`, `ESCAPE`, `WHITESPACE`,\n   * `FUZZY`, `NEAR`, and `SLOP`.\n   * @returns {SimpleQueryStringQuery} returns `this` so that calls can be chained.\n   */\n\n\n  (0, _createClass3.default)(SimpleQueryStringQuery, [{\n    key: 'flags',\n    value: function flags(_flags) {\n      this._queryOpts.flags = _flags;\n      return this;\n    }\n  }]);\n  return SimpleQueryStringQuery;\n}(QueryStringQueryBase);\n\nmodule.exports = SimpleQueryStringQuery;","map":null,"metadata":{},"sourceType":"script"}