{"ast":null,"code":"'use strict';\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar isNil = require('lodash.isnil');\n\nvar JoiningQueryBase = require('./joining-query-base');\n\nvar ES_REF_URL = 'https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-has-parent-query.html';\n/**\n * The `has_parent` query accepts a query and a parent type. The query is\n * executed in the parent document space, which is specified by the parent\n * type. This query returns child documents which associated parents have\n * matched.\n *\n * [Elasticsearch reference](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-has-parent-query.html)\n *\n * @example\n * const qry = esb.hasParentQuery(esb.termQuery('tag', 'something'), 'blog');\n *\n * @example\n * // Sorting tags by parent documents' `view_count` field\n * const qry = esb.hasParentQuery()\n *     .parentType('blog')\n *     .score(true)\n *     .query(\n *         esb.functionScoreQuery().function(\n *             esb.scriptScoreFunction(\"_score * doc['view_count'].value\")\n *         )\n *     );\n *\n * @param {Query=} qry A valid `Query` object\n * @param {string=} type The parent type\n *\n * @extends JoiningQueryBase\n */\n\nvar HasParentQuery = function (_JoiningQueryBase) {\n  (0, _inherits3.default)(HasParentQuery, _JoiningQueryBase); // eslint-disable-next-line require-jsdoc\n\n  function HasParentQuery(qry, type) {\n    (0, _classCallCheck3.default)(this, HasParentQuery);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (HasParentQuery.__proto__ || Object.getPrototypeOf(HasParentQuery)).call(this, 'has_parent', ES_REF_URL, qry));\n\n    if (!isNil(type)) _this._queryOpts.parent_type = type;\n    return _this;\n  }\n  /**\n   * @throws {Error} `score_mode` is deprecated. Use `score` instead.\n   * @override\n   */\n\n\n  (0, _createClass3.default)(HasParentQuery, [{\n    key: 'scoreMode',\n    value: function scoreMode() {\n      console.log('`score_mode` is deprecated. Use `score` instead');\n      console.log('Please refer ' + ES_REF_URL);\n      throw new Error('scoreMode is not supported in HasParentQuery');\n    }\n    /**\n     * Sets the child document type to search against\n     * Alias for method `parentType`\n     *\n     * @param {string} type A valid doc type name\n     * @returns {HasParentQuery} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'type',\n    value: function type(_type) {\n      return this.parentType(_type);\n    }\n    /**\n     * Sets the child document type to search against\n     *\n     * @param {string} type A valid doc type name\n     * @returns {HasParentQuery} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'parentType',\n    value: function parentType(type) {\n      this._queryOpts.parent_type = type;\n      return this;\n    }\n    /**\n     * By default, scoring is `false` which ignores the score from the parent document.\n     * The score is in this case equal to the boost on the `has_parent` query (Defaults to 1).\n     * If the score is set to `true`, then the score of the matching parent document is\n     * aggregated into the child documents belonging to the matching parent document.\n     *\n     * @example\n     * const qry = esb.hasParentQuery(\n     *     esb.termQuery('tag', 'something'),\n     *     'blog'\n     * ).score(true);\n     *\n     * @param {boolean} enable `true` to enable scoring, `false` to disable.\n     * `false` by default.\n     * @returns {HasParentQuery} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'score',\n    value: function score(enable) {\n      this._queryOpts.score = enable;\n      return this;\n    }\n  }]);\n  return HasParentQuery;\n}(JoiningQueryBase);\n\nmodule.exports = HasParentQuery;","map":null,"metadata":{},"sourceType":"script"}