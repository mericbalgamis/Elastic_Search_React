{"ast":null,"code":"'use strict';\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar ValueTermQueryBase = require('./value-term-query-base');\n/**\n * The `term` query finds documents that contain the *exact* term specified\n * in the inverted index.\n *\n * [Elasticsearch reference](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-term-query.html)\n *\n * @example\n * const termQry = esb.termQuery('user', 'Kimchy');\n *\n * @param {string=} field\n * @param {string|number|boolean=} queryVal\n *\n * @extends ValueTermQueryBase\n */\n\n\nvar TermQuery = function (_ValueTermQueryBase) {\n  (0, _inherits3.default)(TermQuery, _ValueTermQueryBase); // eslint-disable-next-line require-jsdoc\n\n  function TermQuery(field, queryVal) {\n    (0, _classCallCheck3.default)(this, TermQuery);\n    return (0, _possibleConstructorReturn3.default)(this, (TermQuery.__proto__ || Object.getPrototypeOf(TermQuery)).call(this, 'term', field, queryVal));\n  }\n\n  return TermQuery;\n}(ValueTermQueryBase);\n\nmodule.exports = TermQuery;","map":null,"metadata":{},"sourceType":"script"}