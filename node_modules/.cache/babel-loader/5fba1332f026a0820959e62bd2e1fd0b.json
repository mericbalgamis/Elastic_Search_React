{"ast":null,"code":"'use strict';\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar isNil = require('lodash.isnil');\n\nvar _require = require('../../core'),\n    checkType = _require.util.checkType;\n\nvar SpanQueryBase = require('./span-query-base');\n/**\n * Wrapper to allow span queries to participate in composite single-field\n * span queries by lying about their search field. The span field masking\n * query maps to Lucene's `SpanFieldMaskingQuery`.\n *\n * This can be used to support queries like span-near or span-or across\n * different fields, which is not ordinarily permitted.\n *\n * Span field masking query is invaluable in conjunction with multi-fields\n * when same content is indexed with multiple analyzers. For instance we\n * could index a field with the standard analyzer which breaks text up into\n * words, and again with the english analyzer which stems words into their root form.\n *\n * [Elasticsearch reference](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-span-field-masking-query.html)\n *\n * @param {string=} field\n * @param {SpanQueryBase=} spanQry Any other span type query\n *\n * @example\n * const spanQry = esb.spanNearQuery()\n *     .clauses([\n *         esb.spanTermQuery('text', 'quick brown'),\n *         esb.spanFieldMaskingQuery()\n *             .field('text')\n *             .query(esb.spanTermQuery('text.stems', 'fox'))\n *     ])\n *     .slop(5)\n *     .inOrder(false);\n *\n * @extends SpanQueryBase\n */\n\n\nvar SpanFieldMaskingQuery = function (_SpanQueryBase) {\n  (0, _inherits3.default)(SpanFieldMaskingQuery, _SpanQueryBase); // eslint-disable-next-line require-jsdoc\n\n  function SpanFieldMaskingQuery(field, spanQry) {\n    (0, _classCallCheck3.default)(this, SpanFieldMaskingQuery);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (SpanFieldMaskingQuery.__proto__ || Object.getPrototypeOf(SpanFieldMaskingQuery)).call(this, 'field_masking_span'));\n\n    if (!isNil(field)) _this._queryOpts.field = field;\n    if (!isNil(spanQry)) _this.query(spanQry);\n    return _this;\n  }\n  /**\n   * Sets the span query.\n   *\n   * @param {SpanQueryBase} spanQry\n   * @returns {SpanFieldMaskingQuery} returns `this` so that calls can be chained.\n   */\n\n\n  (0, _createClass3.default)(SpanFieldMaskingQuery, [{\n    key: 'query',\n    value: function query(spanQry) {\n      checkType(spanQry, SpanQueryBase);\n      this._queryOpts.query = spanQry;\n      return this;\n    }\n    /**\n     * Sets the field to mask.\n     *\n     * @param {string} field\n     * @returns {SpanFieldMaskingQuery} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'field',\n    value: function field(_field) {\n      this._queryOpts.field = _field;\n      return this;\n    }\n  }]);\n  return SpanFieldMaskingQuery;\n}(SpanQueryBase);\n\nmodule.exports = SpanFieldMaskingQuery;","map":null,"metadata":{},"sourceType":"script"}