{"ast":null,"code":"'use strict';\n\nvar _typeof2 = require('babel-runtime/helpers/typeof');\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar _require = require('util'),\n    inspect = _require.inspect;\n\nvar isEmpty = require('lodash.isempty'),\n    isNil = require('lodash.isnil'),\n    isString = require('lodash.isstring'),\n    isObject = require('lodash.isobject'),\n    hasIn = require('lodash.hasin');\n\nvar has = require('lodash.has');\n/**\n * Check if the object is instance of class type\n *\n * @private\n * @param {Object} instance\n * @param {Class} type\n * @throws {TypeError} Object must be an instance of class type\n */\n\n\nexports.checkType = function checkType(instance, type) {\n  if (!(instance instanceof type)) {\n    if (isNil(instance)) {\n      console.warn('Was expecting instance of ' + type.name + ' but got ' + instance + '!');\n    } else console.warn(inspect(instance) + ' is of the type ' + (typeof instance === 'undefined' ? 'undefined' : (0, _typeof3.default)(instance)));\n\n    throw new TypeError('Argument must be an instance of ' + type.name);\n  }\n};\n/**\n * Wrapper for calling constructor with given parameters\n *\n * @private\n * @param {function(new:T, ...*)} Cls The class constructor.\n * @returns {function(...*): T} Wrapper of the class constructor which creates an instance of given Class\n * @template T\n */\n\n\nexports.constructorWrapper = function constructorWrapper(Cls) {\n  return function () {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return new (Function.prototype.bind.apply(Cls, [null].concat(args)))();\n  };\n};\n/**\n * Check if the number is in the given range.\n * Returns `true` is number is less than or equal to min, max.\n *\n * @private\n * @param {number} num\n * @param {number} min\n * @param {number} max\n * @returns {boolean} `true` if in range, `false` otherwise\n */\n\n\nfunction between(num, min, max) {\n  return num >= min && num <= max;\n}\n/**\n * Finds and returns the first position of first digit in string\n *\n * @private\n * @param {string} str\n * @returns {number} Index of first digit in string.\n * `-1` if digit is not found in string\n */\n\n\nexports.firstDigitPos = function firstDigitPos(str) {\n  if (isEmpty(str)) return -1;\n  var len = str.length;\n\n  for (var idx = 0; idx < len; idx++) {\n    // '0'.charCodeAt(0) => 48\n    // '9'.charCodeAt(0) => 57\n    if (between(str.charCodeAt(idx), 48, 57)) return idx;\n  }\n\n  return -1;\n};\n/**\n * Convert class object to JSON by recursively calling `toJSON` on the class members.\n *\n * @private\n * @param {*} obj\n * @returns {Object} JSON representation of class.\n */\n\n\nexports.recursiveToJSON = function recursiveToJSON(obj) {\n  // Strings, numbers, booleans\n  if (!isObject(obj)) return obj; // Each element in array needs to be recursively JSONified\n\n  if (Array.isArray(obj)) return obj.map(function (x) {\n    return recursiveToJSON(x);\n  }); // If it is a native object, we'll not get anything different by calling toJSON\n  // If it is a custom object, toJSON needs to be called\n  // Custom object toJSON might return any datatype\n  // So let us handle it recursively\n\n  if (hasIn(obj, 'toJSON') && obj.constructor !== Object) {\n    return recursiveToJSON(obj.toJSON());\n  } // Custom object toJSON or native object might have values which need to be JSONified\n\n\n  var json = {};\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = Object.keys(obj)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var key = _step.value;\n      json[key] = recursiveToJSON(obj[key]);\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return json;\n};\n/**\n * Helper function for creating function which will log warning and throw error\n * on receiving invalid parameter\n *\n * @private\n * @param {string} refUrl\n * @param {string} paramName\n * @param {*} validValues\n * @returns {function}\n */\n\n\nexports.invalidParam = function invalidParam(refUrl, paramName, validValues) {\n  return function (paramVal) {\n    var referenceUrl = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : refUrl;\n    referenceUrl && console.log('See ' + referenceUrl);\n    console.warn('Got \\'' + paramName + '\\' - \\'' + paramVal + '\\'');\n    var validValuesStr = isString(validValues) ? validValues : inspect(validValues);\n    throw new Error('The \\'' + paramName + '\\' parameter should be one of ' + validValuesStr);\n  };\n};\n/**\n * Set given default value on object if key is not present.\n *\n * @private\n * @param {Object} obj\n * @param {string} key\n * @param {*} value\n * @returns {boolean} `true` if the given object did not have `key` and `false` otherwise.\n */\n\n\nexports.setDefault = function setDefault(obj, key, value) {\n  var itHasNot = !has(obj, key);\n  if (itHasNot) obj[key] = value;\n  return itHasNot;\n};","map":null,"metadata":{},"sourceType":"script"}