{"ast":null,"code":"'use strict';\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar MonoFieldQueryBase = require('./mono-field-query-base');\n/**\n * The `MatchPhraseQueryBase` provides support for common options used across\n * various bucket match phrase query implementations.\n *\n * **NOTE:** Instantiating this directly should not be required.\n * However, if you wish to add a custom implementation for whatever reason,\n * this class could be extended.\n *\n * @param {string} queryType\n * @param {string} refUrl\n * @param {string=} field The document field to query against\n * @param {string=} queryString The query string\n *\n * @extends MonoFieldQueryBase\n */\n\n\nvar MatchPhraseQueryBase = function (_MonoFieldQueryBase) {\n  (0, _inherits3.default)(MatchPhraseQueryBase, _MonoFieldQueryBase); // eslint-disable-next-line require-jsdoc\n\n  function MatchPhraseQueryBase(queryType, refUrl, field, queryString) {\n    (0, _classCallCheck3.default)(this, MatchPhraseQueryBase);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (MatchPhraseQueryBase.__proto__ || Object.getPrototypeOf(MatchPhraseQueryBase)).call(this, queryType, field, queryString));\n\n    _this._refUrl = refUrl;\n    return _this;\n  }\n  /**\n   * @override\n   * @throws {Error} This method cannot be called on `MatchPhraseQueryBase`\n   */\n\n\n  (0, _createClass3.default)(MatchPhraseQueryBase, [{\n    key: 'minimumShouldMatch',\n    value: function minimumShouldMatch() {\n      console.log('Please refer ' + this._refUrl);\n      throw new Error('minimumShouldMatch is not supported in ' + this.constructor.name);\n    }\n    /**\n     * Configures the `slop`(default is 0) for matching terms in any order.\n     * Transposed terms have a slop of 2.\n     *\n     * @param {number} slop A positive integer value, defaults is 0.\n     * @returns {MatchPhraseQueryBase} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'slop',\n    value: function slop(_slop) {\n      this._queryOpts.slop = _slop;\n      return this;\n    }\n  }]);\n  return MatchPhraseQueryBase;\n}(MonoFieldQueryBase);\n\nmodule.exports = MatchPhraseQueryBase;","map":null,"metadata":{},"sourceType":"script"}