{"ast":null,"code":"'use strict';\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar _require = require('../../core'),\n    checkType = _require.util.checkType;\n\nvar GeoQueryBase = require('./geo-query-base');\n/**\n * A query allowing to include hits that only fall within a polygon of points.\n *\n * [Elasticsearch reference](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-geo-polygon-query.html)\n *\n * @example\n * const geoQry = esb.geoPolygonQuery('person.location')\n *     .points([\n *         {\"lat\" : 40, \"lon\" : -70},\n *         {\"lat\" : 30, \"lon\" : -80},\n *         {\"lat\" : 20, \"lon\" : -90}\n *     ]);\n *\n * @param {string=} field\n *\n * @extends GeoQueryBase\n */\n\n\nvar GeoPolygonQuery = function (_GeoQueryBase) {\n  (0, _inherits3.default)(GeoPolygonQuery, _GeoQueryBase); // eslint-disable-next-line require-jsdoc\n\n  function GeoPolygonQuery(field) {\n    (0, _classCallCheck3.default)(this, GeoPolygonQuery);\n    return (0, _possibleConstructorReturn3.default)(this, (GeoPolygonQuery.__proto__ || Object.getPrototypeOf(GeoPolygonQuery)).call(this, 'geo_polygon', field));\n  }\n  /**\n   * Sets the points which form the polygon.\n   * Points can be instances of `GeoPoint`, Object with `lat`, `lon` keys,\n   * `GeoJSON` array representation or string(`geohash`/`lat, lon`)\n   *\n   * @example\n   * // Format in `[lon, lat]`\n   * const qry = esb.geoPolygonQuery('person.location').points([\n   *     [-70, 40],\n   *     [-80, 30],\n   *     [-90, 20]\n   * ]);\n   *\n   * @example\n   * // Format in lat,lon\n   * const qry = esb.geoPolygonQuery('person.location').points([\n   *     '40, -70',\n   *     '30, -80',\n   *     '20, -90'\n   * ]);\n   *\n   * @example\n   * // Geohash\n   * const qry = esb.geoPolygonQuery('person.location').points([\n   *     'drn5x1g8cu2y',\n   *     '30, -80',\n   *     '20, -90'\n   * ]);\n   *\n   * @param {Array<*>} points\n   * @returns {GeoPolygonQuery} returns `this` so that calls can be chained\n   * @throws {TypeError} If `points` parameter is not an instance of `Array`.\n   */\n\n\n  (0, _createClass3.default)(GeoPolygonQuery, [{\n    key: 'points',\n    value: function points(_points) {\n      checkType(_points, Array);\n      this._fieldOpts.points = _points;\n      return this;\n    }\n  }]);\n  return GeoPolygonQuery;\n}(GeoQueryBase);\n\nmodule.exports = GeoPolygonQuery;","map":null,"metadata":{},"sourceType":"script"}