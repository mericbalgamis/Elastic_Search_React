{"ast":null,"code":"'use strict';\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar isNil = require('lodash.isnil');\n\nvar _require = require('../../core'),\n    Aggregation = _require.Aggregation,\n    Script = _require.Script,\n    checkType = _require.util.checkType;\n/**\n * The `BucketAggregationBase` provides support for common options used across\n * various bucket `Aggregation` implementations.\n *\n * **NOTE:** Instantiating this directly should not be required.\n * However, if you wish to add a custom implementation for whatever reason,\n * this class could be extended.\n *\n * @param {string} name a valid aggregation name\n * @param {string} aggType type of aggregation\n * @param {string=} field The field to aggregate on\n *\n * @extends Aggregation\n */\n\n\nvar BucketAggregationBase = function (_Aggregation) {\n  (0, _inherits3.default)(BucketAggregationBase, _Aggregation); // eslint-disable-next-line require-jsdoc\n\n  function BucketAggregationBase(name, aggType, field) {\n    (0, _classCallCheck3.default)(this, BucketAggregationBase);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (BucketAggregationBase.__proto__ || Object.getPrototypeOf(BucketAggregationBase)).call(this, name, aggType));\n\n    if (!isNil(field)) _this._aggsDef.field = field;\n    return _this;\n  }\n  /**\n   * Sets field to run aggregation on.\n   *\n   * @param {string} field a valid field name\n   * @returns {BucketAggregationBase} returns `this` so that calls can be chained\n   */\n\n\n  (0, _createClass3.default)(BucketAggregationBase, [{\n    key: 'field',\n    value: function field(_field) {\n      this._aggsDef.field = _field;\n      return this;\n    }\n    /**\n     * Sets script parameter for aggregation.\n     *\n     * @example\n     * // Generating the terms using a script\n     * const agg = esb.termsAggregation('genres').script(\n     *     esb.script('file', 'my_script').params({ field: 'genre' })\n     * );\n     *\n     * @example\n     * // Value script\n     * const agg = esb.termsAggregation('genres', 'genre').script(\n     *     esb.script('inline', \"'Genre: ' +_value\").lang('painless')\n     * );\n     *\n     * @param {Script} script\n     * @returns {BucketAggregationBase} returns `this` so that calls can be chained\n     * @throws {TypeError} If `script` is not an instance of `Script`\n     */\n\n  }, {\n    key: 'script',\n    value: function script(_script) {\n      checkType(_script, Script);\n      this._aggsDef.script = _script;\n      return this;\n    }\n  }]);\n  return BucketAggregationBase;\n}(Aggregation);\n\nmodule.exports = BucketAggregationBase;","map":null,"metadata":{},"sourceType":"script"}