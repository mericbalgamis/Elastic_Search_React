{"ast":null,"code":"/* eslint-disable max-lines */\n'use strict';\n\nvar _require = require('./core'),\n    RequestBodySearch = _require.RequestBodySearch,\n    Highlight = _require.Highlight,\n    Script = _require.Script,\n    GeoPoint = _require.GeoPoint,\n    GeoShape = _require.GeoShape,\n    IndexedShape = _require.IndexedShape,\n    Sort = _require.Sort,\n    Rescore = _require.Rescore,\n    InnerHits = _require.InnerHits,\n    SearchTemplate = _require.SearchTemplate,\n    constructorWrapper = _require.util.constructorWrapper;\n\nvar _require2 = require('./queries'),\n    MatchAllQuery = _require2.MatchAllQuery,\n    MatchNoneQuery = _require2.MatchNoneQuery,\n    _require2$fullTextQue = _require2.fullTextQueries,\n    MatchQuery = _require2$fullTextQue.MatchQuery,\n    MatchPhraseQuery = _require2$fullTextQue.MatchPhraseQuery,\n    MatchPhrasePrefixQuery = _require2$fullTextQue.MatchPhrasePrefixQuery,\n    MultiMatchQuery = _require2$fullTextQue.MultiMatchQuery,\n    CommonTermsQuery = _require2$fullTextQue.CommonTermsQuery,\n    QueryStringQuery = _require2$fullTextQue.QueryStringQuery,\n    SimpleQueryStringQuery = _require2$fullTextQue.SimpleQueryStringQuery,\n    _require2$termLevelQu = _require2.termLevelQueries,\n    TermQuery = _require2$termLevelQu.TermQuery,\n    TermsQuery = _require2$termLevelQu.TermsQuery,\n    TermsSetQuery = _require2$termLevelQu.TermsSetQuery,\n    RangeQuery = _require2$termLevelQu.RangeQuery,\n    ExistsQuery = _require2$termLevelQu.ExistsQuery,\n    PrefixQuery = _require2$termLevelQu.PrefixQuery,\n    WildcardQuery = _require2$termLevelQu.WildcardQuery,\n    RegexpQuery = _require2$termLevelQu.RegexpQuery,\n    FuzzyQuery = _require2$termLevelQu.FuzzyQuery,\n    TypeQuery = _require2$termLevelQu.TypeQuery,\n    IdsQuery = _require2$termLevelQu.IdsQuery,\n    _require2$compoundQue = _require2.compoundQueries,\n    ConstantScoreQuery = _require2$compoundQue.ConstantScoreQuery,\n    BoolQuery = _require2$compoundQue.BoolQuery,\n    DisMaxQuery = _require2$compoundQue.DisMaxQuery,\n    FunctionScoreQuery = _require2$compoundQue.FunctionScoreQuery,\n    BoostingQuery = _require2$compoundQue.BoostingQuery,\n    _require2$compoundQue2 = _require2$compoundQue.scoreFunctions,\n    ScriptScoreFunction = _require2$compoundQue2.ScriptScoreFunction,\n    WeightScoreFunction = _require2$compoundQue2.WeightScoreFunction,\n    RandomScoreFunction = _require2$compoundQue2.RandomScoreFunction,\n    FieldValueFactorFunction = _require2$compoundQue2.FieldValueFactorFunction,\n    DecayScoreFunction = _require2$compoundQue2.DecayScoreFunction,\n    _require2$joiningQuer = _require2.joiningQueries,\n    NestedQuery = _require2$joiningQuer.NestedQuery,\n    HasChildQuery = _require2$joiningQuer.HasChildQuery,\n    HasParentQuery = _require2$joiningQuer.HasParentQuery,\n    ParentIdQuery = _require2$joiningQuer.ParentIdQuery,\n    _require2$geoQueries = _require2.geoQueries,\n    GeoShapeQuery = _require2$geoQueries.GeoShapeQuery,\n    GeoBoundingBoxQuery = _require2$geoQueries.GeoBoundingBoxQuery,\n    GeoDistanceQuery = _require2$geoQueries.GeoDistanceQuery,\n    GeoPolygonQuery = _require2$geoQueries.GeoPolygonQuery,\n    _require2$specialized = _require2.specializedQueries,\n    MoreLikeThisQuery = _require2$specialized.MoreLikeThisQuery,\n    ScriptQuery = _require2$specialized.ScriptQuery,\n    PercolateQuery = _require2$specialized.PercolateQuery,\n    _require2$spanQueries = _require2.spanQueries,\n    SpanTermQuery = _require2$spanQueries.SpanTermQuery,\n    SpanMultiTermQuery = _require2$spanQueries.SpanMultiTermQuery,\n    SpanFirstQuery = _require2$spanQueries.SpanFirstQuery,\n    SpanNearQuery = _require2$spanQueries.SpanNearQuery,\n    SpanOrQuery = _require2$spanQueries.SpanOrQuery,\n    SpanNotQuery = _require2$spanQueries.SpanNotQuery,\n    SpanContainingQuery = _require2$spanQueries.SpanContainingQuery,\n    SpanWithinQuery = _require2$spanQueries.SpanWithinQuery,\n    SpanFieldMaskingQuery = _require2$spanQueries.SpanFieldMaskingQuery;\n\nvar _require3 = require('./aggregations'),\n    _require3$metricsAggr = _require3.metricsAggregations,\n    AvgAggregation = _require3$metricsAggr.AvgAggregation,\n    CardinalityAggregation = _require3$metricsAggr.CardinalityAggregation,\n    ExtendedStatsAggregation = _require3$metricsAggr.ExtendedStatsAggregation,\n    GeoBoundsAggregation = _require3$metricsAggr.GeoBoundsAggregation,\n    GeoCentroidAggregation = _require3$metricsAggr.GeoCentroidAggregation,\n    MaxAggregation = _require3$metricsAggr.MaxAggregation,\n    MinAggregation = _require3$metricsAggr.MinAggregation,\n    PercentilesAggregation = _require3$metricsAggr.PercentilesAggregation,\n    PercentileRanksAggregation = _require3$metricsAggr.PercentileRanksAggregation,\n    ScriptedMetricAggregation = _require3$metricsAggr.ScriptedMetricAggregation,\n    StatsAggregation = _require3$metricsAggr.StatsAggregation,\n    SumAggregation = _require3$metricsAggr.SumAggregation,\n    TopHitsAggregation = _require3$metricsAggr.TopHitsAggregation,\n    ValueCountAggregation = _require3$metricsAggr.ValueCountAggregation,\n    _require3$bucketAggre = _require3.bucketAggregations,\n    AdjacencyMatrixAggregation = _require3$bucketAggre.AdjacencyMatrixAggregation,\n    ChildrenAggregation = _require3$bucketAggre.ChildrenAggregation,\n    CompositeAggregation = _require3$bucketAggre.CompositeAggregation,\n    DateHistogramAggregation = _require3$bucketAggre.DateHistogramAggregation,\n    DateRangeAggregation = _require3$bucketAggre.DateRangeAggregation,\n    DiversifiedSamplerAggregation = _require3$bucketAggre.DiversifiedSamplerAggregation,\n    FilterAggregation = _require3$bucketAggre.FilterAggregation,\n    FiltersAggregation = _require3$bucketAggre.FiltersAggregation,\n    GeoDistanceAggregation = _require3$bucketAggre.GeoDistanceAggregation,\n    GeoHashGridAggregation = _require3$bucketAggre.GeoHashGridAggregation,\n    GlobalAggregation = _require3$bucketAggre.GlobalAggregation,\n    HistogramAggregation = _require3$bucketAggre.HistogramAggregation,\n    IpRangeAggregation = _require3$bucketAggre.IpRangeAggregation,\n    MissingAggregation = _require3$bucketAggre.MissingAggregation,\n    NestedAggregation = _require3$bucketAggre.NestedAggregation,\n    RangeAggregation = _require3$bucketAggre.RangeAggregation,\n    ReverseNestedAggregation = _require3$bucketAggre.ReverseNestedAggregation,\n    SamplerAggregation = _require3$bucketAggre.SamplerAggregation,\n    SignificantTermsAggregation = _require3$bucketAggre.SignificantTermsAggregation,\n    SignificantTextAggregation = _require3$bucketAggre.SignificantTextAggregation,\n    TermsAggregation = _require3$bucketAggre.TermsAggregation,\n    _require3$pipelineAgg = _require3.pipelineAggregations,\n    AvgBucketAggregation = _require3$pipelineAgg.AvgBucketAggregation,\n    DerivativeAggregation = _require3$pipelineAgg.DerivativeAggregation,\n    MaxBucketAggregation = _require3$pipelineAgg.MaxBucketAggregation,\n    MinBucketAggregation = _require3$pipelineAgg.MinBucketAggregation,\n    SumBucketAggregation = _require3$pipelineAgg.SumBucketAggregation,\n    StatsBucketAggregation = _require3$pipelineAgg.StatsBucketAggregation,\n    ExtendedStatsBucketAggregation = _require3$pipelineAgg.ExtendedStatsBucketAggregation,\n    PercentilesBucketAggregation = _require3$pipelineAgg.PercentilesBucketAggregation,\n    MovingAverageAggregation = _require3$pipelineAgg.MovingAverageAggregation,\n    CumulativeSumAggregation = _require3$pipelineAgg.CumulativeSumAggregation,\n    BucketScriptAggregation = _require3$pipelineAgg.BucketScriptAggregation,\n    BucketSelectorAggregation = _require3$pipelineAgg.BucketSelectorAggregation,\n    SerialDifferencingAggregation = _require3$pipelineAgg.SerialDifferencingAggregation,\n    BucketSortAggregation = _require3$pipelineAgg.BucketSortAggregation,\n    MatrixStatsAggregation = _require3.matrixAggregations.MatrixStatsAggregation;\n\nvar _require4 = require('./suggesters'),\n    TermSuggester = _require4.TermSuggester,\n    DirectGenerator = _require4.DirectGenerator,\n    PhraseSuggester = _require4.PhraseSuggester,\n    CompletionSuggester = _require4.CompletionSuggester;\n\nvar recipes = require('./recipes');\n\nexports.RequestBodySearch = RequestBodySearch;\nexports.requestBodySearch = constructorWrapper(RequestBodySearch);\n/* ============ ============ ============ */\n\n/* ============== Queries =============== */\n\n/* ============ ============ ============ */\n\nexports.MatchAllQuery = MatchAllQuery;\nexports.matchAllQuery = constructorWrapper(MatchAllQuery);\nexports.MatchNoneQuery = MatchNoneQuery;\nexports.matchNoneQuery = constructorWrapper(MatchNoneQuery);\n/* ============ ============ ============ */\n\n/* ========== Full Text Queries ========= */\n\n/* ============ ============ ============ */\n\nexports.MatchQuery = MatchQuery;\nexports.matchQuery = constructorWrapper(MatchQuery);\nexports.MatchPhraseQuery = MatchPhraseQuery;\nexports.matchPhraseQuery = constructorWrapper(MatchPhraseQuery);\nexports.MatchPhrasePrefixQuery = MatchPhrasePrefixQuery;\nexports.matchPhrasePrefixQuery = constructorWrapper(MatchPhrasePrefixQuery);\nexports.MultiMatchQuery = MultiMatchQuery;\nexports.multiMatchQuery = constructorWrapper(MultiMatchQuery);\nexports.CommonTermsQuery = CommonTermsQuery;\nexports.commonTermsQuery = constructorWrapper(CommonTermsQuery);\nexports.QueryStringQuery = QueryStringQuery;\nexports.queryStringQuery = constructorWrapper(QueryStringQuery);\nexports.SimpleQueryStringQuery = SimpleQueryStringQuery;\nexports.simpleQueryStringQuery = constructorWrapper(SimpleQueryStringQuery);\n/* ============ ============ ============ */\n\n/* ========= Term Level Queries ========= */\n\n/* ============ ============ ============ */\n\nexports.TermQuery = TermQuery;\nexports.termQuery = constructorWrapper(TermQuery);\nexports.TermsQuery = TermsQuery;\nexports.termsQuery = constructorWrapper(TermsQuery);\nexports.TermsSetQuery = TermsSetQuery;\nexports.termsSetQuery = constructorWrapper(TermsSetQuery);\nexports.RangeQuery = RangeQuery;\nexports.rangeQuery = constructorWrapper(RangeQuery);\nexports.ExistsQuery = ExistsQuery;\nexports.existsQuery = constructorWrapper(ExistsQuery);\nexports.PrefixQuery = PrefixQuery;\nexports.prefixQuery = constructorWrapper(PrefixQuery);\nexports.WildcardQuery = WildcardQuery;\nexports.wildcardQuery = constructorWrapper(WildcardQuery);\nexports.RegexpQuery = RegexpQuery;\nexports.regexpQuery = constructorWrapper(RegexpQuery);\nexports.FuzzyQuery = FuzzyQuery;\nexports.fuzzyQuery = constructorWrapper(FuzzyQuery);\nexports.TypeQuery = TypeQuery;\nexports.typeQuery = constructorWrapper(TypeQuery);\nexports.IdsQuery = IdsQuery;\nexports.idsQuery = constructorWrapper(IdsQuery);\n/* ============ ============ ============ */\n\n/* ========== Compound Queries ========== */\n\n/* ============ ============ ============ */\n\nexports.ConstantScoreQuery = ConstantScoreQuery;\nexports.constantScoreQuery = constructorWrapper(ConstantScoreQuery);\nexports.BoolQuery = BoolQuery;\nexports.boolQuery = constructorWrapper(BoolQuery);\nexports.DisMaxQuery = DisMaxQuery;\nexports.disMaxQuery = constructorWrapper(DisMaxQuery);\nexports.FunctionScoreQuery = FunctionScoreQuery;\nexports.functionScoreQuery = constructorWrapper(FunctionScoreQuery);\nexports.BoostingQuery = BoostingQuery;\nexports.boostingQuery = constructorWrapper(BoostingQuery);\n/* ============ ============ ============ */\n\n/* =========== Joining Queries ========== */\n\n/* ============ ============ ============ */\n\nexports.NestedQuery = NestedQuery;\nexports.nestedQuery = constructorWrapper(NestedQuery);\nexports.HasChildQuery = HasChildQuery;\nexports.hasChildQuery = constructorWrapper(HasChildQuery);\nexports.HasParentQuery = HasParentQuery;\nexports.hasParentQuery = constructorWrapper(HasParentQuery);\nexports.ParentIdQuery = ParentIdQuery;\nexports.parentIdQuery = constructorWrapper(ParentIdQuery);\n/* ============ ============ ============ */\n\n/* ============ Geo Queries ============= */\n\n/* ============ ============ ============ */\n\nexports.GeoShapeQuery = GeoShapeQuery;\nexports.geoShapeQuery = constructorWrapper(GeoShapeQuery);\nexports.GeoBoundingBoxQuery = GeoBoundingBoxQuery;\nexports.geoBoundingBoxQuery = constructorWrapper(GeoBoundingBoxQuery);\nexports.GeoDistanceQuery = GeoDistanceQuery;\nexports.geoDistanceQuery = constructorWrapper(GeoDistanceQuery);\nexports.GeoPolygonQuery = GeoPolygonQuery;\nexports.geoPolygonQuery = constructorWrapper(GeoPolygonQuery);\n/* ============ ============ ============ */\n\n/* ======== Specialized Queries ========= */\n\n/* ============ ============ ============ */\n\nexports.MoreLikeThisQuery = MoreLikeThisQuery;\nexports.moreLikeThisQuery = constructorWrapper(MoreLikeThisQuery);\nexports.ScriptQuery = ScriptQuery;\nexports.scriptQuery = constructorWrapper(ScriptQuery);\nexports.PercolateQuery = PercolateQuery;\nexports.percolateQuery = constructorWrapper(PercolateQuery);\n/* ============ ============ ============ */\n\n/* ============ Span Queries ============ */\n\n/* ============ ============ ============ */\n\nexports.SpanTermQuery = SpanTermQuery;\nexports.spanTermQuery = constructorWrapper(SpanTermQuery);\nexports.SpanMultiTermQuery = SpanMultiTermQuery;\nexports.spanMultiTermQuery = constructorWrapper(SpanMultiTermQuery);\nexports.SpanFirstQuery = SpanFirstQuery;\nexports.spanFirstQuery = constructorWrapper(SpanFirstQuery);\nexports.SpanNearQuery = SpanNearQuery;\nexports.spanNearQuery = constructorWrapper(SpanNearQuery);\nexports.SpanOrQuery = SpanOrQuery;\nexports.spanOrQuery = constructorWrapper(SpanOrQuery);\nexports.SpanNotQuery = SpanNotQuery;\nexports.spanNotQuery = constructorWrapper(SpanNotQuery);\nexports.SpanContainingQuery = SpanContainingQuery;\nexports.spanContainingQuery = constructorWrapper(SpanContainingQuery);\nexports.SpanWithinQuery = SpanWithinQuery;\nexports.spanWithinQuery = constructorWrapper(SpanWithinQuery);\nexports.SpanFieldMaskingQuery = SpanFieldMaskingQuery;\nexports.spanFieldMaskingQuery = constructorWrapper(SpanFieldMaskingQuery);\n/* ============ ============ ============ */\n\n/* ======== Metrics Aggregations ======== */\n\n/* ============ ============ ============ */\n\nexports.AvgAggregation = AvgAggregation;\nexports.avgAggregation = constructorWrapper(AvgAggregation);\nexports.CardinalityAggregation = CardinalityAggregation;\nexports.cardinalityAggregation = constructorWrapper(CardinalityAggregation);\nexports.ExtendedStatsAggregation = ExtendedStatsAggregation;\nexports.extendedStatsAggregation = constructorWrapper(ExtendedStatsAggregation);\nexports.GeoBoundsAggregation = GeoBoundsAggregation;\nexports.geoBoundsAggregation = constructorWrapper(GeoBoundsAggregation);\nexports.GeoCentroidAggregation = GeoCentroidAggregation;\nexports.geoCentroidAggregation = constructorWrapper(GeoCentroidAggregation);\nexports.MaxAggregation = MaxAggregation;\nexports.maxAggregation = constructorWrapper(MaxAggregation);\nexports.MinAggregation = MinAggregation;\nexports.minAggregation = constructorWrapper(MinAggregation);\nexports.PercentilesAggregation = PercentilesAggregation;\nexports.percentilesAggregation = constructorWrapper(PercentilesAggregation);\nexports.PercentileRanksAggregation = PercentileRanksAggregation;\nexports.percentileRanksAggregation = constructorWrapper(PercentileRanksAggregation);\nexports.ScriptedMetricAggregation = ScriptedMetricAggregation;\nexports.scriptedMetricAggregation = constructorWrapper(ScriptedMetricAggregation);\nexports.StatsAggregation = StatsAggregation;\nexports.statsAggregation = constructorWrapper(StatsAggregation);\nexports.SumAggregation = SumAggregation;\nexports.sumAggregation = constructorWrapper(SumAggregation);\nexports.TopHitsAggregation = TopHitsAggregation;\nexports.topHitsAggregation = constructorWrapper(TopHitsAggregation);\nexports.ValueCountAggregation = ValueCountAggregation;\nexports.valueCountAggregation = constructorWrapper(ValueCountAggregation);\n/* ============ ============ ============ */\n\n/* ========= Bucket Aggregations ======== */\n\n/* ============ ============ ============ */\n\nexports.AdjacencyMatrixAggregation = AdjacencyMatrixAggregation;\nexports.adjacencyMatrixAggregation = constructorWrapper(AdjacencyMatrixAggregation);\nexports.ChildrenAggregation = ChildrenAggregation;\nexports.childrenAggregation = constructorWrapper(ChildrenAggregation);\nexports.CompositeAggregation = CompositeAggregation;\nexports.compositeAggregation = constructorWrapper(CompositeAggregation);\nexports.DateHistogramAggregation = DateHistogramAggregation;\nexports.dateHistogramAggregation = constructorWrapper(DateHistogramAggregation);\nexports.DateRangeAggregation = DateRangeAggregation;\nexports.dateRangeAggregation = constructorWrapper(DateRangeAggregation);\nexports.DiversifiedSamplerAggregation = DiversifiedSamplerAggregation;\nexports.diversifiedSamplerAggregation = constructorWrapper(DiversifiedSamplerAggregation);\nexports.FilterAggregation = FilterAggregation;\nexports.filterAggregation = constructorWrapper(FilterAggregation);\nexports.FiltersAggregation = FiltersAggregation;\nexports.filtersAggregation = constructorWrapper(FiltersAggregation);\nexports.GeoDistanceAggregation = GeoDistanceAggregation;\nexports.geoDistanceAggregation = constructorWrapper(GeoDistanceAggregation);\nexports.GeoHashGridAggregation = GeoHashGridAggregation;\nexports.geoHashGridAggregation = constructorWrapper(GeoHashGridAggregation);\nexports.GlobalAggregation = GlobalAggregation;\nexports.globalAggregation = constructorWrapper(GlobalAggregation);\nexports.HistogramAggregation = HistogramAggregation;\nexports.histogramAggregation = constructorWrapper(HistogramAggregation);\nexports.IpRangeAggregation = IpRangeAggregation;\nexports.ipRangeAggregation = constructorWrapper(IpRangeAggregation);\nexports.MissingAggregation = MissingAggregation;\nexports.missingAggregation = constructorWrapper(MissingAggregation);\nexports.NestedAggregation = NestedAggregation;\nexports.nestedAggregation = constructorWrapper(NestedAggregation);\nexports.RangeAggregation = RangeAggregation;\nexports.rangeAggregation = constructorWrapper(RangeAggregation);\nexports.ReverseNestedAggregation = ReverseNestedAggregation;\nexports.reverseNestedAggregation = constructorWrapper(ReverseNestedAggregation);\nexports.SamplerAggregation = SamplerAggregation;\nexports.samplerAggregation = constructorWrapper(SamplerAggregation);\nexports.SignificantTermsAggregation = SignificantTermsAggregation;\nexports.significantTermsAggregation = constructorWrapper(SignificantTermsAggregation);\nexports.SignificantTextAggregation = SignificantTextAggregation;\nexports.significantTextAggregation = constructorWrapper(SignificantTextAggregation);\nexports.TermsAggregation = TermsAggregation;\nexports.termsAggregation = constructorWrapper(TermsAggregation);\n/* ============ ============ ============ */\n\n/* ======== Pipeline Aggregations ======= */\n\n/* ============ ============ ============ */\n\nexports.AvgBucketAggregation = AvgBucketAggregation;\nexports.avgBucketAggregation = constructorWrapper(AvgBucketAggregation);\nexports.DerivativeAggregation = DerivativeAggregation;\nexports.derivativeAggregation = constructorWrapper(DerivativeAggregation);\nexports.MaxBucketAggregation = MaxBucketAggregation;\nexports.maxBucketAggregation = constructorWrapper(MaxBucketAggregation);\nexports.MinBucketAggregation = MinBucketAggregation;\nexports.minBucketAggregation = constructorWrapper(MinBucketAggregation);\nexports.BucketSortAggregation = BucketSortAggregation;\nexports.bucketSortAggregation = constructorWrapper(BucketSortAggregation);\nexports.SumBucketAggregation = SumBucketAggregation;\nexports.sumBucketAggregation = constructorWrapper(SumBucketAggregation);\nexports.StatsBucketAggregation = StatsBucketAggregation;\nexports.statsBucketAggregation = constructorWrapper(StatsBucketAggregation);\nexports.ExtendedStatsBucketAggregation = ExtendedStatsBucketAggregation;\nexports.extendedStatsBucketAggregation = constructorWrapper(ExtendedStatsBucketAggregation);\nexports.PercentilesBucketAggregation = PercentilesBucketAggregation;\nexports.percentilesBucketAggregation = constructorWrapper(PercentilesBucketAggregation);\nexports.MovingAverageAggregation = MovingAverageAggregation;\nexports.movingAverageAggregation = constructorWrapper(MovingAverageAggregation);\nexports.CumulativeSumAggregation = CumulativeSumAggregation;\nexports.cumulativeSumAggregation = constructorWrapper(CumulativeSumAggregation);\nexports.BucketScriptAggregation = BucketScriptAggregation;\nexports.bucketScriptAggregation = constructorWrapper(BucketScriptAggregation);\nexports.BucketSelectorAggregation = BucketSelectorAggregation;\nexports.bucketSelectorAggregation = constructorWrapper(BucketSelectorAggregation);\nexports.SerialDifferencingAggregation = SerialDifferencingAggregation;\nexports.serialDifferencingAggregation = constructorWrapper(SerialDifferencingAggregation);\n/* ============ ============ ============ */\n\n/* ========= Matrix Aggregations ======== */\n\n/* ============ ============ ============ */\n\nexports.MatrixStatsAggregation = MatrixStatsAggregation;\nexports.matrixStatsAggregation = constructorWrapper(MatrixStatsAggregation);\n/* ============ ============ ============ */\n\n/* ========== Score Functions =========== */\n\n/* ============ ============ ============ */\n\nexports.ScriptScoreFunction = ScriptScoreFunction;\nexports.scriptScoreFunction = constructorWrapper(ScriptScoreFunction);\nexports.WeightScoreFunction = WeightScoreFunction;\nexports.weightScoreFunction = constructorWrapper(WeightScoreFunction);\nexports.RandomScoreFunction = RandomScoreFunction;\nexports.randomScoreFunction = constructorWrapper(RandomScoreFunction);\nexports.FieldValueFactorFunction = FieldValueFactorFunction;\nexports.fieldValueFactorFunction = constructorWrapper(FieldValueFactorFunction);\nexports.DecayScoreFunction = DecayScoreFunction;\nexports.decayScoreFunction = constructorWrapper(DecayScoreFunction);\n/* ============ ============ ============ */\n\n/* ============= Suggesters ============= */\n\n/* ============ ============ ============ */\n\nexports.TermSuggester = TermSuggester;\nexports.termSuggester = constructorWrapper(TermSuggester);\nexports.DirectGenerator = DirectGenerator;\nexports.directGenerator = constructorWrapper(DirectGenerator);\nexports.PhraseSuggester = PhraseSuggester;\nexports.phraseSuggester = constructorWrapper(PhraseSuggester);\nexports.CompletionSuggester = CompletionSuggester;\nexports.completionSuggester = constructorWrapper(CompletionSuggester);\n/* ============ ============ ============ */\n\n/* ============== Recipes =============== */\n\n/* ============ ============ ============ */\n\n/**\n * Helper recipes for common query use cases.\n *\n * If you have any recipes, please do share or better yet, create a [pull request](https://help.github.com/articles/creating-a-pull-request-from-a-fork/).\n *\n * Recipes:\n * - [`missingQuery`](/#missingquery)\n * - [`randomSortQuery`](/#randomsortquery)\n * - [`filterQuery`](/#filterquery)\n *\n * These can be accessed under the `recipes` namespace or\n * using the `cook[Recipe Name]` alias for ease of use.\n *\n * @example\n * // `recipes` namespace\n * const qry = esb.recipes.missingQuery('user');\n *\n * @example\n * // `cookMissingQuery` alias\n * const qry = esb.cookMissingQuery('user');\n */\n\nexports.recipes = recipes;\nexports.cookMissingQuery = recipes.missingQuery;\nexports.cookRandomSortQuery = recipes.randomSortQuery;\nexports.cookFilterQuery = recipes.filterQuery;\n/* ============ ============ ============ */\n\n/* ============ Miscellaneous =========== */\n\n/* ============ ============ ============ */\n\nexports.Highlight = Highlight;\nexports.highlight = constructorWrapper(Highlight);\nexports.Script = Script;\nexports.script = constructorWrapper(Script);\nexports.GeoPoint = GeoPoint;\nexports.geoPoint = constructorWrapper(GeoPoint);\nexports.GeoShape = GeoShape;\nexports.geoShape = constructorWrapper(GeoShape);\nexports.IndexedShape = IndexedShape;\nexports.indexedShape = constructorWrapper(IndexedShape);\nexports.Sort = Sort;\nexports.sort = constructorWrapper(Sort);\nexports.Rescore = Rescore;\nexports.rescore = constructorWrapper(Rescore);\nexports.InnerHits = InnerHits;\nexports.innerHits = constructorWrapper(InnerHits);\nexports.SearchTemplate = SearchTemplate;\nexports.searchTemplate = constructorWrapper(SearchTemplate);\n\nexports.prettyPrint = function prettyPrint(obj) {\n  console.log(JSON.stringify(obj, null, 2));\n};\n/* eslint-enable */","map":null,"metadata":{},"sourceType":"script"}