{"ast":null,"code":"'use strict';\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar isNil = require('lodash.isnil');\n\nvar _require = require('../../core'),\n    invalidParam = _require.util.invalidParam,\n    EXECUTION_HINT_SET = _require.consts.EXECUTION_HINT_SET;\n\nvar BucketAggregationBase = require('./bucket-aggregation-base');\n\nvar ES_REF_URL = 'https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-diversified-sampler-aggregation.html';\nvar invalidExecutionHintParam = invalidParam(ES_REF_URL, 'execution_hint', EXECUTION_HINT_SET);\n/**\n * A filtering aggregation used to limit any sub aggregations' processing\n * to a sample of the top-scoring documents. Diversity settings\n * are used to limit the number of matches that share a common value such as an \"author\".\n *\n * [Elasticsearch reference](https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-diversified-sampler-aggregation.html)\n *\n * @example\n * const reqBody = esb.requestBodySearch()\n *     .query(esb.queryStringQuery('tags:elasticsearch'))\n *     .agg(\n *         esb.diversifiedSamplerAggregation('my_unbiased_sample', 'author')\n *             .shardSize(200)\n *             .agg(\n *                 esb.significantTermsAggregation(\n *                     'keywords',\n *                     'tags'\n *                 ).exclude(['elasticsearch'])\n *             )\n *     );\n *\n * @example\n * // Use a script to produce a hash of the multiple values in a tags field\n * // to ensure we don't have a sample that consists of the same repeated\n * // combinations of tags\n * const reqBody = esb.requestBodySearch()\n *     .query(esb.queryStringQuery('tags:kibana'))\n *     .agg(\n *         esb.diversifiedSamplerAggregation('my_unbiased_sample')\n *             .shardSize(200)\n *             .maxDocsPerValue(3)\n *             .script(esb.script('inline', \"doc['tags'].values.hashCode()\"))\n *             .agg(\n *                 esb.significantTermsAggregation(\n *                     'keywords',\n *                     'tags'\n *                 ).exclude(['kibana'])\n *             )\n *     );\n *\n * @param {string} name The name which will be used to refer to this aggregation.\n * @param {string=} field The field to aggregate on\n *\n * @extends BucketAggregationBase\n */\n\nvar DiversifiedSamplerAggregation = function (_BucketAggregationBas) {\n  (0, _inherits3.default)(DiversifiedSamplerAggregation, _BucketAggregationBas); // eslint-disable-next-line require-jsdoc\n\n  function DiversifiedSamplerAggregation(name, field) {\n    (0, _classCallCheck3.default)(this, DiversifiedSamplerAggregation);\n    return (0, _possibleConstructorReturn3.default)(this, (DiversifiedSamplerAggregation.__proto__ || Object.getPrototypeOf(DiversifiedSamplerAggregation)).call(this, name, 'diversified_sampler', field));\n  }\n  /**\n   * The shard_size parameter limits how many top-scoring documents\n   * are collected in the sample processed on each shard. The default value is 100.\n   *\n   * @param {number} size Maximum number of documents to return from each shard(Integer)\n   * @returns {DiversifiedSamplerAggregation} returns `this` so that calls can be chained\n   */\n\n\n  (0, _createClass3.default)(DiversifiedSamplerAggregation, [{\n    key: 'shardSize',\n    value: function shardSize(size) {\n      this._aggsDef.shard_size = size;\n      return this;\n    }\n    /**\n     * Used to control the maximum number of documents collected\n     * on any one shard which share a common value.\n     * Applies on a per-shard basis only for the purposes of shard-local sampling.\n     *\n     * @param {number} maxDocsPerValue Default 1.(Integer)\n     * @returns {DiversifiedSamplerAggregation} returns `this` so that calls can be chained\n     */\n\n  }, {\n    key: 'maxDocsPerValue',\n    value: function maxDocsPerValue(_maxDocsPerValue) {\n      this._aggsDef.max_docs_per_value = _maxDocsPerValue;\n      return this;\n    }\n    /**\n     * This setting can influence the management of the values used\n     * for de-duplication. Each option will hold up to shard_size\n     * values in memory while performing de-duplication but\n     * the type of value held can be controlled\n     *\n     * @param {string} hint the possible values are `map`, `global_ordinals`,\n     * `global_ordinals_hash` and `global_ordinals_low_cardinality`\n     * @returns {DiversifiedSamplerAggregation} returns `this` so that calls can be chained\n     * @throws {Error} If Execution Hint is outside the accepted set.\n     */\n\n  }, {\n    key: 'executionHint',\n    value: function executionHint(hint) {\n      if (isNil(hint)) invalidExecutionHintParam(hint);\n      var hintLower = hint.toLowerCase();\n\n      if (!EXECUTION_HINT_SET.has(hintLower)) {\n        invalidExecutionHintParam(hint);\n      }\n\n      this._aggsDef.execution_hint = hintLower;\n      return this;\n    }\n  }]);\n  return DiversifiedSamplerAggregation;\n}(BucketAggregationBase);\n\nmodule.exports = DiversifiedSamplerAggregation;","map":null,"metadata":{},"sourceType":"script"}