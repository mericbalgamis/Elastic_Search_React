{"ast":null,"code":"'use strict';\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar _require = require('../../core'),\n    checkType = _require.util.checkType;\n\nvar SpanQueryBase = require('./span-query-base');\n/**\n * Removes matches which overlap with another span query. The span not query\n * maps to Lucene `SpanNotQuery`.\n *\n * [Elasticsearch reference](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-span-not-query.html)\n *\n * @example\n * const spanQry = esb.spanNotQuery()\n *     .include(esb.spanTermQuery('field1', 'hoya'))\n *     .exclude(esb.spanNearQuery()\n *         .clauses([\n *             esb.spanTermQuery('field1', 'la'),\n *             esb.spanTermQuery('field1', 'hoya')\n *         ])\n *         .slop(0)\n *         .inOrder(true));\n *\n * @extends SpanQueryBase\n */\n\n\nvar SpanNotQuery = function (_SpanQueryBase) {\n  (0, _inherits3.default)(SpanNotQuery, _SpanQueryBase); // eslint-disable-next-line require-jsdoc\n\n  function SpanNotQuery() {\n    (0, _classCallCheck3.default)(this, SpanNotQuery);\n    return (0, _possibleConstructorReturn3.default)(this, (SpanNotQuery.__proto__ || Object.getPrototypeOf(SpanNotQuery)).call(this, 'span_not'));\n  }\n  /**\n   * Sets the `include` clause which is the span query whose matches are filtered\n   *\n   * @param {SpanQueryBase} spanQry\n   * @returns {SpanNotQuery} returns `this` so that calls can be chained.\n   */\n\n\n  (0, _createClass3.default)(SpanNotQuery, [{\n    key: 'include',\n    value: function include(spanQry) {\n      checkType(spanQry, SpanQueryBase);\n      this._queryOpts.include = spanQry;\n      return this;\n    }\n    /**\n     * Sets the `exclude` clause which is the span query whose matches must\n     * not overlap those returned.\n     *\n     * @param {SpanQueryBase} spanQry\n     * @returns {SpanNotQuery} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'exclude',\n    value: function exclude(spanQry) {\n      checkType(spanQry, SpanQueryBase);\n      this._queryOpts.exclude = spanQry;\n      return this;\n    }\n    /**\n     * If set the amount of tokens before the include span can't have overlap with\n     * the exclude span.\n     *\n     * @param {number} pre\n     * @returns {SpanNotQuery} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'pre',\n    value: function pre(_pre) {\n      this._queryOpts.pre = _pre;\n      return this;\n    }\n    /**\n     * If set the amount of tokens after the include span can't have overlap with the exclude span.\n     *\n     * @param {number} post\n     * @returns {SpanNotQuery} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'post',\n    value: function post(_post) {\n      this._queryOpts.post = _post;\n      return this;\n    }\n    /**\n     * If set the amount of tokens from within the include span can't have overlap\n     * with the exclude span. Equivalent of setting both `pre` and `post`.\n     *\n     * @param {number} dist\n     * @returns {SpanNotQuery} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'dist',\n    value: function dist(_dist) {\n      this._queryOpts.dist = _dist;\n      return this;\n    }\n  }]);\n  return SpanNotQuery;\n}(SpanQueryBase);\n\nmodule.exports = SpanNotQuery;","map":null,"metadata":{},"sourceType":"script"}