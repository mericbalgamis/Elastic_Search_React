{"ast":null,"code":"'use strict';\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar isNil = require('lodash.isnil');\n\nvar _require = require('../core'),\n    _require$consts = _require.consts,\n    SUGGEST_MODE_SET = _require$consts.SUGGEST_MODE_SET,\n    STRING_DISTANCE_SET = _require$consts.STRING_DISTANCE_SET,\n    invalidParam = _require.util.invalidParam;\n\nvar AnalyzedSuggesterBase = require('./analyzed-suggester-base');\n\nvar ES_REF_URL = 'https://www.elastic.co/guide/en/elasticsearch/reference/current/search-suggesters-term.html';\nvar invalidSortParam = invalidParam(ES_REF_URL, 'sort', \"'score' or 'frequency'\");\nvar invalidSuggestModeParam = invalidParam(ES_REF_URL, 'suggest_mode', SUGGEST_MODE_SET);\nvar invalidStringDistanceParam = invalidParam(ES_REF_URL, 'string_distance', STRING_DISTANCE_SET);\n/**\n * The term suggester suggests terms based on edit distance.\n * The provided suggest text is analyzed before terms are suggested.\n * The suggested terms are provided per analyzed suggest text token.\n * The term suggester doesnâ€™t take the query into account that is part of request.\n *\n * [Elasticsearch reference](https://www.elastic.co/guide/en/elasticsearch/reference/current/search-suggesters-term.html)\n *\n * @example\n * const suggest = esb.termSuggester(\n *     'my-suggestion',\n *     'message',\n *     'tring out Elasticsearch'\n * );\n *\n * @param {string} name The name of the Suggester, an arbitrary identifier\n * @param {string=} field The field to fetch the candidate suggestions from.\n * @param {string=} txt A string to get suggestions for.\n *\n * @throws {Error} if `name` is empty\n *\n * @extends AnalyzedSuggesterBase\n */\n\nvar TermSuggester = function (_AnalyzedSuggesterBas) {\n  (0, _inherits3.default)(TermSuggester, _AnalyzedSuggesterBas); // eslint-disable-next-line require-jsdoc\n\n  function TermSuggester(name, field, txt) {\n    (0, _classCallCheck3.default)(this, TermSuggester);\n    return (0, _possibleConstructorReturn3.default)(this, (TermSuggester.__proto__ || Object.getPrototypeOf(TermSuggester)).call(this, 'term', name, field, txt));\n  }\n  /**\n   * Sets the sort to control how suggestions should be sorted per\n   * suggest text term.\n   *\n   * Two possible values:\n   *   - `score`: Sort by score first, then document frequency and\n   *     then the term itself.\n   *   - `frequency`: Sort by document frequency first, then similarity\n   *     score and then the term itself.\n   *\n   * @param {string} sort Can be `score` or `frequency`\n   * @returns {TermSuggester} returns `this` so that calls can be chained.\n   * @throws {Error} If `sort` is neither `score` nor `frequency`.\n   */\n\n\n  (0, _createClass3.default)(TermSuggester, [{\n    key: 'sort',\n    value: function sort(_sort) {\n      if (isNil(_sort)) invalidSortParam(_sort);\n\n      var sortLower = _sort.toLowerCase();\n\n      if (sortLower !== 'score' && sortLower !== 'frequency') {\n        invalidSortParam(_sort);\n      }\n\n      this._suggestOpts.sort = sortLower;\n      return this;\n    }\n    /**\n     * Sets the suggest mode which controls what suggestions are included\n     * or controls for what suggest text terms, suggestions should be suggested.\n     *\n     * Three possible values can be specified:\n     *   - `missing`: Only provide suggestions for suggest text terms that\n     *     are not in the index. This is the default.\n     *   - `popular`:  Only suggest suggestions that occur in more docs\n     *     than the original suggest text term.\n     *   - `always`: Suggest any matching suggestions based on terms in the suggest text.\n     *\n     * @param {string} mode Can be `missing`, `popular` or `always`\n     * @returns {TermSuggester} returns `this` so that calls can be chained.\n     * @throws {Error} If `mode` is not one of `missing`, `popular` or `always`.\n     */\n\n  }, {\n    key: 'suggestMode',\n    value: function suggestMode(mode) {\n      if (isNil(mode)) invalidSuggestModeParam(mode);\n      var modeLower = mode.toLowerCase();\n\n      if (!SUGGEST_MODE_SET.has(modeLower)) {\n        invalidSuggestModeParam(mode);\n      }\n\n      this._suggestOpts.suggest_mode = modeLower;\n      return this;\n    }\n    /**\n     * Sets the maximum edit distance candidate suggestions can have\n     * in order to be considered as a suggestion. Can only be a value\n     * between 1 and 2. Any other value result in an bad request\n     * error being thrown. Defaults to 2.\n     *\n     * @param {number} maxEdits Value between 1 and 2. Defaults to 2.\n     * @returns {TermSuggester} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'maxEdits',\n    value: function maxEdits(_maxEdits) {\n      this._suggestOpts.max_edits = _maxEdits;\n      return this;\n    }\n    /**\n     * Sets the number of minimal prefix characters that must match in order\n     * to be a candidate suggestions. Defaults to 1.\n     *\n     * Increasing this number improves spellcheck performance.\n     * Usually misspellings don't occur in the beginning of terms.\n     *\n     * @param {number} len The number of minimal prefix characters that must match in order\n     * to be a candidate suggestions. Defaults to 1.\n     * @returns {TermSuggester} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'prefixLength',\n    value: function prefixLength(len) {\n      this._suggestOpts.prefix_length = len;\n      return this;\n    }\n    /**\n     * Sets the minimum length a suggest text term must have in order to be included.\n     * Defaults to 4.\n     *\n     * @param {number} len The minimum length a suggest text term must have in order\n     * to be included. Defaults to 4.\n     * @returns {TermSuggester} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'minWordLength',\n    value: function minWordLength(len) {\n      this._suggestOpts.min_word_length = len;\n      return this;\n    }\n    /**\n     * Sets factor that is used to multiply with the `shards_size` in order to inspect\n     * more candidate spell corrections on the shard level.\n     * Can improve accuracy at the cost of performance. Defaults to 5.\n     *\n     * @param {number} maxInspections Factor used to multiple with `shards_size` in\n     * order to inspect more candidate spell corrections on the shard level.\n     * Defaults to 5\n     * @returns {TermSuggester} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'maxInspections',\n    value: function maxInspections(_maxInspections) {\n      this._suggestOpts.max_inspections = _maxInspections;\n      return this;\n    }\n    /**\n     * Sets the minimal threshold in number of documents a suggestion should appear in.\n     * This can be specified as an absolute number or as a relative percentage of\n     * number of documents. This can improve quality by only suggesting high\n     * frequency terms. Defaults to 0f and is not enabled. If a value higher than 1\n     * is specified then the number cannot be fractional. The shard level document\n     * frequencies are used for this option.\n     *\n     * @param {number} limit Threshold in number of documents a suggestion\n     * should appear in. Defaults to 0f and is not enabled.\n     * @returns {TermSuggester} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'minDocFreq',\n    value: function minDocFreq(limit) {\n      this._suggestOpts.min_doc_freq = limit;\n      return this;\n    }\n    /**\n     * Sets the maximum threshold in number of documents a suggest text token can\n     * exist in order to be included. Can be a relative percentage number (e.g 0.4)\n     * or an absolute number to represent document frequencies. If an value higher\n     * than 1 is specified then fractional can not be specified. Defaults to 0.01f.\n     * This can be used to exclude high frequency terms from being spellchecked.\n     * High frequency terms are usually spelled correctly on top of this also\n     * improves the spellcheck performance. The shard level document frequencies are\n     * used for this option.\n     *\n     * @param {number} limit Maximum threshold in number of documents a suggest text\n     * token can exist in order to be included. Defaults to 0.01f.\n     * @returns {TermSuggester} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'maxTermFreq',\n    value: function maxTermFreq(limit) {\n      this._suggestOpts.max_term_freq = limit;\n      return this;\n    }\n    /**\n     * Sets the string distance implementation to use for comparing how similar\n     * suggested terms are.\n     *\n     * Five possible values can be specified:\n     *   - `internal`: The default based on `damerau_levenshtein` but highly optimized for\n     *     comparing string distance for terms inside the index.\n     *   - `damerau_levenshtein`: String distance algorithm based on Damerau-Levenshtein\n     *     algorithm.\n     *   - `levenstein`: String distance algorithm based on Levenstein edit distance\n     *     algorithm.\n     *   - `jarowinkler`: String distance algorithm based on Jaro-Winkler algorithm.\n     *   - `ngram`: String distance algorithm based on character n-grams.\n     *\n     * @param {string} implMethod One of `internal`, `damerau_levenshtein`, `levenstein`,\n     * `jarowinkler`, `ngram`\n     * @returns {TermSuggester} returns `this` so that calls can be chained.\n     * @throws {Error} If `implMethod` is not one of `internal`, `damerau_levenshtein`,\n     * `levenstein`, `jarowinkler` or ngram`.\n     */\n\n  }, {\n    key: 'stringDistance',\n    value: function stringDistance(implMethod) {\n      if (isNil(implMethod)) invalidStringDistanceParam(implMethod);\n      var implMethodLower = implMethod.toLowerCase();\n\n      if (!STRING_DISTANCE_SET.has(implMethodLower)) {\n        invalidStringDistanceParam(implMethod);\n      }\n\n      this._suggestOpts.string_distance = implMethodLower;\n      return this;\n    }\n  }]);\n  return TermSuggester;\n}(AnalyzedSuggesterBase);\n\nmodule.exports = TermSuggester;","map":null,"metadata":{},"sourceType":"script"}