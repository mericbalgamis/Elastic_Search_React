{"ast":null,"code":"'use strict';\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar isNil = require('lodash.isnil');\n\nvar _require = require('../../core'),\n    Query = _require.Query,\n    _require$util = _require.util,\n    checkType = _require$util.checkType,\n    invalidParam = _require$util.invalidParam,\n    _require$consts = _require.consts,\n    SCORE_MODE_SET = _require$consts.SCORE_MODE_SET,\n    BOOST_MODE_SET = _require$consts.BOOST_MODE_SET;\n\nvar _require2 = require('./score-functions'),\n    ScoreFunction = _require2.ScoreFunction;\n\nvar ES_REF_URL = 'https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-function-score-query.html';\nvar invalidScoreModeParam = invalidParam(ES_REF_URL, 'score_mode', SCORE_MODE_SET);\nvar invalidBoostModeParam = invalidParam(ES_REF_URL, 'boost_mode', BOOST_MODE_SET);\n/**\n * The `function_score` allows you to modify the score of documents that are\n * retrieved by a query. This can be useful if, for example, a score function\n * is computationally expensive and it is sufficient to compute the score on\n * a filtered set of documents.\n *\n * [Elasticsearch reference](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-function-score-query.html)\n *\n * @example\n * // `function_score` with only one function\n * const qry = esb.functionScoreQuery()\n *     .query(esb.matchAllQuery())\n *     .function(esb.randomScoreFunction())\n *     .boostMode('multiply')\n *     .boost('5');\n *\n * @example\n * // Several functions combined\n * const qry = esb.functionScoreQuery()\n *     .query(esb.matchAllQuery())\n *     .functions([\n *         esb.randomScoreFunction()\n *             .filter(esb.matchQuery('test', 'bar'))\n *             .weight(23),\n *         esb.weightScoreFunction()\n *             .filter(esb.matchQuery('test', 'cat'))\n *             .weight(42)\n *     ])\n *     .maxBoost(42)\n *     .scoreMode('max')\n *     .boostMode('multiply')\n *     .minScore(42)\n *     .boost('5');\n *\n * @example\n * // Combine decay functions\n * const qry = esb.functionScoreQuery()\n *     .functions([\n *         esb.decayScoreFunction('gauss', 'price').origin('0').scale('20'),\n *         esb.decayScoreFunction('gauss', 'location')\n *             .origin('11, 12')\n *             .scale('2km')\n *     ])\n *     .query(esb.matchQuery('properties', 'balcony'))\n *     .scoreMode('multiply');\n *\n * @extends Query\n */\n\nvar FunctionScoreQuery = function (_Query) {\n  (0, _inherits3.default)(FunctionScoreQuery, _Query); // eslint-disable-next-line require-jsdoc\n\n  function FunctionScoreQuery() {\n    (0, _classCallCheck3.default)(this, FunctionScoreQuery);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (FunctionScoreQuery.__proto__ || Object.getPrototypeOf(FunctionScoreQuery)).call(this, 'function_score'));\n\n    _this._queryOpts.functions = [];\n    return _this;\n  }\n  /**\n   * Sets the source query.\n   *\n   * @param {Query} query A valid `Query` object\n   * @returns {FunctionScoreQuery} returns `this` so that calls can be chained.\n   */\n\n\n  (0, _createClass3.default)(FunctionScoreQuery, [{\n    key: 'query',\n    value: function query(_query) {\n      checkType(_query, Query);\n      this._queryOpts.query = _query;\n      return this;\n    }\n    /**\n     * Controls the way the scores are combined.\n     *\n     * @param {string} mode Can be one of `multiply`, `sum`, `first`, `min`, `max`, `avg`.\n     * Defaults to `multiply`.\n     * @returns {FunctionScoreQuery} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'scoreMode',\n    value: function scoreMode(mode) {\n      if (isNil(mode)) invalidScoreModeParam(mode);\n      var modeLower = mode.toLowerCase();\n\n      if (!SCORE_MODE_SET.has(modeLower)) {\n        invalidScoreModeParam(mode);\n      }\n\n      this._queryOpts.score_mode = mode;\n      return this;\n    }\n    /**\n     * Controls the way the query and function scores are combined.\n     *\n     * @param {string} mode Can be one of `multiply`, `replace`, `sum`, `avg`, `max`, `min`.\n     * Defaults to `multiply`.\n     * @returns {FunctionScoreQuery} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'boostMode',\n    value: function boostMode(mode) {\n      if (isNil(mode)) invalidBoostModeParam(mode);\n      var modeLower = mode.toLowerCase();\n\n      if (!BOOST_MODE_SET.has(modeLower)) {\n        invalidBoostModeParam(mode);\n      }\n\n      this._queryOpts.boost_mode = modeLower;\n      return this;\n    }\n    /**\n     * Restricts new score to not exceed given limit. The default for `max_boost` is `FLT_MAX`.\n     *\n     * @param {number} limit\n     * @returns {FunctionScoreQuery} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'maxBoost',\n    value: function maxBoost(limit) {\n      this._queryOpts.max_boost = limit;\n      return this;\n    }\n    /**\n     * Sets the minimum score limit for documents to be included in search result.\n     *\n     * @param {number} limit Minimum score threshold\n     * @returns {FunctionScoreQuery} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'minScore',\n    value: function minScore(limit) {\n      this._queryOpts.min_score = limit;\n      return this;\n    }\n    /**\n     * Add a single score function to the list of existing functions.\n     *\n     * @param {ScoreFunction} func A valid `ScoreFunction` object.\n     * @returns {FunctionScoreQuery} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'function',\n    value: function _function(func) {\n      checkType(func, ScoreFunction);\n\n      this._queryOpts.functions.push(func);\n\n      return this;\n    }\n    /**\n     * Adds array of score functions to the list of existing functions.\n     *\n     * @param {Array<ScoreFunction>} funcs An array of valid `ScoreFunction` objects\n     * @returns {FunctionScoreQuery} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'functions',\n    value: function functions(funcs) {\n      var _this2 = this;\n\n      checkType(funcs, Array);\n      funcs.forEach(function (func) {\n        return _this2.function(func);\n      });\n      return this;\n    }\n  }]);\n  return FunctionScoreQuery;\n}(Query);\n\nmodule.exports = FunctionScoreQuery;","map":null,"metadata":{},"sourceType":"script"}