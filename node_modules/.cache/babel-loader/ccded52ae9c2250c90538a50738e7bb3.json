{"ast":null,"code":"'use strict';\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar isNil = require('lodash.isnil');\n\nvar has = require('lodash.has');\n\nvar _require = require('./util'),\n    checkType = _require.checkType,\n    invalidParam = _require.invalidParam;\n\nvar _require2 = require('./consts'),\n    GEO_SHAPE_TYPES = _require2.GEO_SHAPE_TYPES;\n\nvar ES_REF_URL = 'https://www.elastic.co/guide/en/elasticsearch/reference/current/geo-shape.html';\nvar invalidTypeParam = invalidParam(ES_REF_URL, 'type', GEO_SHAPE_TYPES);\n/**\n * Shape object that can be used in queries and filters that\n * take a Shape. Shape uses the GeoJSON format.\n *\n * [Elasticsearch reference](https://www.elastic.co/guide/en/elasticsearch/reference/current/geo-shape.html)\n *\n * @example\n * // Pass options using method\n * const shape = esb.geoShape()\n *     .type('linestring')\n *     .coordinates([[-77.03653, 38.897676], [-77.009051, 38.889939]]);\n *\n * @example\n * // Pass parameters using contructor\n * const shape = esb.geoShape('multipoint', [[102.0, 2.0], [103.0, 2.0]])\n *\n * @param {string=} type A valid shape type.\n * Can be one of `point`, `linestring`, `polygon`, `multipoint`, `multilinestring`,\n * `multipolygon`, `geometrycollection`, `envelope` and `circle`\n * @param {Array=} coords A valid coordinat definition for the given shape.\n */\n\nvar GeoShape = function () {\n  // eslint-disable-next-line require-jsdoc\n  function GeoShape(type, coords) {\n    (0, _classCallCheck3.default)(this, GeoShape);\n    this._body = {};\n    if (!isNil(type)) this.type(type);\n    if (!isNil(coords)) this.coordinates(coords);\n  }\n  /**\n   * Sets the GeoJSON format type used to represent shape.\n   *\n   * @example\n   * const shape = esb.geoShape()\n   *     .type('envelope')\n   *     .coordinates([[-45.0, 45.0], [45.0, -45.0]])\n   *\n   * @param {string} type A valid shape type.\n   * Can be one of `point`, `linestring`, `polygon`, `multipoint`, `multilinestring`,\n   * `multipolygon`, `geometrycollection`, `envelope`, `circle`\n   * @returns {GeoShape} returns `this` so that calls can be chained.\n   */\n\n\n  (0, _createClass3.default)(GeoShape, [{\n    key: 'type',\n    value: function type(_type) {\n      if (isNil(_type)) invalidTypeParam(_type);\n\n      var typeLower = _type.toLowerCase();\n\n      if (!GEO_SHAPE_TYPES.has(typeLower)) invalidTypeParam(_type);\n      this._body.type = typeLower;\n      return this;\n    }\n    /**\n     * Sets the coordinates for the shape definition. Note, the coordinates\n     * are not validated in this api. Please see [GeoJSON](http://geojson.org/geojson-spec.html#geometry-objects)\n     * and [ElasticSearch documentation](https://www.elastic.co/guide/en/elasticsearch/reference/current/geo-shape.html#input-structure) for correct coordinate definitions.\n     *\n     * @example\n     * const shape = esb.geoShape()\n     *     .type('point')\n     *     .coordinates([-77.03653, 38.897676])\n     *\n     * @param {Array<Array<number>>|Array<number>} coords\n     * @returns {GeoShape} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'coordinates',\n    value: function coordinates(coords) {\n      checkType(coords, Array);\n      this._body.coordinates = coords;\n      return this;\n    }\n    /**\n     * Sets the radius for parsing a circle `GeoShape`.\n     *\n     * @example\n     * const shape = esb.geoShape()\n     *     .type('circle')\n     *     .coordinates([-45.0, 45.0])\n     *     .radius('100m')\n     *\n     * @param {string|number} radius The radius for shape circle.\n     * @returns {GeoShape} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'radius',\n    value: function radius(_radius) {\n      // Should this have a validation for circle shape type?\n      this._body.radius = _radius;\n      return this;\n    }\n    /**\n     * Override default `toJSON` to return DSL representation of the geo shape\n     * class instance.\n     *\n     * @override\n     * @returns {Object} returns an Object which maps to the elasticsearch query DSL\n     */\n\n  }, {\n    key: 'toJSON',\n    value: function toJSON() {\n      if (!has(this._body, 'type') || !has(this._body, 'coordinates')) {\n        throw new Error('For all types, both the inner `type` and `coordinates` fields are required.');\n      }\n\n      return this._body;\n    }\n  }]);\n  return GeoShape;\n}();\n\nmodule.exports = GeoShape;","map":null,"metadata":{},"sourceType":"script"}