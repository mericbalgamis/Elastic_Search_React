{"ast":null,"code":"'use strict';\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar ValuesSourceBase = require('./values-source-base');\n\nvar REF_URL = 'https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-composite-aggregation.html#_terms';\n/**\n * `TermsValuesSource` is a source for the `CompositeAggregation` that handles\n * terms. It works very similar to a terms aggregation with a slightly different\n * syntax.\n *\n * [Elasticsearch reference](https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-composite-aggregation.html#_terms)\n *\n * @example\n * const valueSrc = esb.CompositeAggregation.termsValuesSource('product').script({\n *   source: \"doc['product'].value\",\n *   lang: 'painless'\n * });\n *\n * @param {string} name\n * @param {string=} field The field to aggregate on\n *\n * @extends ValuesSourceBase\n */\n\nvar TermsValuesSource = function (_ValuesSourceBase) {\n  (0, _inherits3.default)(TermsValuesSource, _ValuesSourceBase); // eslint-disable-next-line require-jsdoc\n\n  function TermsValuesSource(name, field) {\n    (0, _classCallCheck3.default)(this, TermsValuesSource);\n    return (0, _possibleConstructorReturn3.default)(this, (TermsValuesSource.__proto__ || Object.getPrototypeOf(TermsValuesSource)).call(this, 'terms', REF_URL, name, field));\n  }\n\n  return TermsValuesSource;\n}(ValuesSourceBase);\n\nmodule.exports = TermsValuesSource;","map":null,"metadata":{},"sourceType":"script"}