{"ast":null,"code":"'use strict';\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar MetricsAggregationBase = require('./metrics-aggregation-base');\n/**\n * A single-value metrics aggregation that sums up numeric values that are\n * extracted from the aggregated documents. These values can be extracted either\n * from specific numeric fields in the documents, or be generated by a\n * provided script.\n *\n * [Elasticsearch reference](https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-metrics-stats-aggregation.html)\n *\n * Aggregation that sums up numeric values that are extracted from the\n * aggregated documents.\n *\n * @example\n * const reqBody = esb.requestBodySearch()\n *     .query(esb.constantScoreQuery(esb.matchQuery('type', 'hat')))\n *     .agg(esb.sumAggregation('hat_prices', 'price'));\n *\n * @example\n * // Script to fetch the sales price\n * const reqBody = esb.requestBodySearch()\n *     .query(esb.constantScoreQuery(esb.matchQuery('type', 'hat')))\n *     .agg(\n *         esb.sumAggregation('hat_prices').script(\n *             esb.script('inline', 'doc.price.value')\n *         )\n *     );\n *\n * @example\n * // Access the field value from the script using `_value`\n * const reqBody = esb.requestBodySearch()\n *     .query(esb.constantScoreQuery(esb.matchQuery('type', 'hat')))\n *     .agg(\n *         esb.sumAggregation('square_hats', 'price').script(\n *             esb.script('inline', '_value * _value')\n *         )\n *     );\n *\n * @example\n * // Treat documents missing price as if they had a value\n * const reqBody = esb.requestBodySearch()\n *     .query(esb.constantScoreQuery(esb.matchQuery('type', 'hat')))\n *     .agg(esb.sumAggregation('hat_prices', 'price').missing(100));\n *\n * @param {string} name The name which will be used to refer to this aggregation.\n * @param {string=} field The field to aggregate on\n *\n * @extends MetricsAggregationBase\n */\n\n\nvar SumAggregation = function (_MetricsAggregationBa) {\n  (0, _inherits3.default)(SumAggregation, _MetricsAggregationBa);\n  /**\n   * Creates an instance of `SumAggregation`\n   *\n   * @param {string} name The name which will be used to refer to this aggregation.\n   * @param {string=} field The field to aggregate on\n   */\n\n  function SumAggregation(name, field) {\n    (0, _classCallCheck3.default)(this, SumAggregation);\n    return (0, _possibleConstructorReturn3.default)(this, (SumAggregation.__proto__ || Object.getPrototypeOf(SumAggregation)).call(this, name, 'sum', field));\n  }\n\n  return SumAggregation;\n}(MetricsAggregationBase);\n\nmodule.exports = SumAggregation;","map":null,"metadata":{},"sourceType":"script"}