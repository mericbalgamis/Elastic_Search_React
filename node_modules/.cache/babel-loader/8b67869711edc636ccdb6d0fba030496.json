{"ast":null,"code":"'use strict';\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar ValueTermQueryBase = require('./value-term-query-base');\n/**\n * Interface-like class used to group and identify various implementations of\n * multi term queries:\n *\n * - Wildcard Query\n * - Fuzzy Query\n * - Prefix Query\n * - Range Query\n * - Regexp Query\n *\n * **NOTE:** Instantiating this directly should not be required.\n * However, if you wish to add a custom implementation for whatever reason,\n * this class could be extended.\n *\n * @extends ValueTermQueryBase\n */\n\n\nvar MultiTermQueryBase = function (_ValueTermQueryBase) {\n  (0, _inherits3.default)(MultiTermQueryBase, _ValueTermQueryBase);\n\n  function MultiTermQueryBase() {\n    (0, _classCallCheck3.default)(this, MultiTermQueryBase);\n    return (0, _possibleConstructorReturn3.default)(this, (MultiTermQueryBase.__proto__ || Object.getPrototypeOf(MultiTermQueryBase)).apply(this, arguments));\n  }\n\n  return MultiTermQueryBase;\n}(ValueTermQueryBase);\n\nmodule.exports = MultiTermQueryBase;","map":null,"metadata":{},"sourceType":"script"}