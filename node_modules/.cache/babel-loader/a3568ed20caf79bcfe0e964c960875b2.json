{"ast":null,"code":"'use strict';\n\nvar _defineProperty2 = require('babel-runtime/helpers/defineProperty');\n\nvar _defineProperty3 = _interopRequireDefault(_defineProperty2);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar isNil = require('lodash.isnil');\n\nvar _require = require('../../core'),\n    invalidParam = _require.util.invalidParam,\n    GEO_RELATION_SET = _require.consts.GEO_RELATION_SET;\n\nvar MultiTermQueryBase = require('./multi-term-query-base');\n\nvar ES_REF_URL = 'https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-range-query.html';\nvar invalidRelationParam = invalidParam(ES_REF_URL, 'relation', GEO_RELATION_SET);\n/**\n * Matches documents with fields that have terms within a certain range.\n *\n * [Elasticsearch reference](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-range-query.html)\n *\n * @param {string=} field\n *\n * @example\n * const qry = esb.rangeQuery('age')\n *     .gte(10)\n *     .lte(20)\n *     .boost(2.0);\n *\n * @example\n * const qry = esb.rangeQuery('date').gte('now-1d/d').lt('now/d');\n *\n * @extends MultiTermQueryBase\n */\n\nvar RangeQuery = function (_MultiTermQueryBase) {\n  (0, _inherits3.default)(RangeQuery, _MultiTermQueryBase); // eslint-disable-next-line require-jsdoc\n\n  function RangeQuery(field) {\n    (0, _classCallCheck3.default)(this, RangeQuery);\n    return (0, _possibleConstructorReturn3.default)(this, (RangeQuery.__proto__ || Object.getPrototypeOf(RangeQuery)).call(this, 'range', field));\n  }\n  /**\n   * @override\n   * @throws {Error} This method cannot be called on RangeQuery\n   */\n\n\n  (0, _createClass3.default)(RangeQuery, [{\n    key: 'value',\n    value: function value() {\n      console.log('Please refer ' + ES_REF_URL);\n      throw new Error('value is not supported in RangeQuery');\n    }\n    /**\n     * Greater-than or equal to\n     *\n     * @param {string|number} val\n     * @returns {RangeQuery} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'gte',\n    value: function gte(val) {\n      this._queryOpts.gte = val;\n      return this;\n    }\n    /**\n     * Less-than or equal to\n     *\n     * @param {string|number} val\n     * @returns {RangeQuery} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'lte',\n    value: function lte(val) {\n      this._queryOpts.lte = val;\n      return this;\n    }\n    /**\n     * Greater-than\n     *\n     * @param {string|number} val\n     * @returns {RangeQuery} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'gt',\n    value: function gt(val) {\n      this._queryOpts.gt = val;\n      return this;\n    }\n    /**\n     * Less-than\n     *\n     * @param {string|number} val\n     * @returns {RangeQuery} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'lt',\n    value: function lt(val) {\n      this._queryOpts.lt = val;\n      return this;\n    }\n    /**\n     * The lower bound. Defaults to start from the first.\n     *\n     * @param {string|number} val The lower bound value, type depends on field type\n     * @returns {RangeQuery} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'from',\n    value: function from(val) {\n      this._queryOpts.from = val;\n      return this;\n    }\n    /**\n     * The upper bound. Defaults to unbounded.\n     *\n     * @param {string|number} val The upper bound value, type depends on field type\n     * @returns {RangeQuery} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'to',\n    value: function to(val) {\n      this._queryOpts.to = val;\n      return this;\n    }\n    /**\n     * Should the first from (if set) be inclusive or not. Defaults to `true`\n     *\n     * @param {boolean} enable `true` to include, `false` to exclude\n     * @returns {RangeQuery} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'includeLower',\n    value: function includeLower(enable) {\n      this._queryOpts.include_lower = enable;\n      return this;\n    }\n    /**\n     * Should the last to (if set) be inclusive or not. Defaults to `true`.\n     *\n     * @param {boolean} enable `true` to include, `false` to exclude\n     * @returns {RangeQuery} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'includeUpper',\n    value: function includeUpper(enable) {\n      this._queryOpts.include_upper = enable;\n      return this;\n    }\n    /**\n     * Time Zone to be applied to any range query related to dates.\n     *\n     * @param {string} zone\n     * @returns {RangeQuery} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'timeZone',\n    value: function timeZone(zone) {\n      this._queryOpts.time_zone = zone;\n      return this;\n    }\n    /**\n     * Sets the format expression for parsing the upper and lower bounds.\n     * If no format is specified, then it will use the first format specified in the field mapping.\n     *\n     * @example\n     * const qry = esb.rangeQuery('born')\n     *     .gte('01/01/2012')\n     *     .lte('2013')\n     *     .format('dd/MM/yyyy||yyyy');\n     *\n     * @param {string} fmt Format for parsing upper and lower bounds.\n     * @returns {RangeQuery} returns `this` so that calls can be chained\n     */\n\n  }, {\n    key: 'format',\n    value: function format(fmt) {\n      this._queryOpts.format = fmt;\n      return this;\n    }\n    /**\n     * Sets the relationship between Query and indexed data\n     * that will be used to determine if a Document should be matched or not.\n     *\n     * @param {string} relation Can be one of `WITHIN`, `CONTAINS`, `DISJOINT`\n     * or `INTERSECTS`(default)\n     * @returns {RangeQuery} returns `this` so that calls can be chained\n     */\n\n  }, {\n    key: 'relation',\n    value: function relation(_relation) {\n      if (isNil(_relation)) invalidRelationParam(_relation);\n\n      var relationUpper = _relation.toUpperCase();\n\n      if (!GEO_RELATION_SET.has(relationUpper)) {\n        invalidRelationParam(_relation);\n      }\n\n      this._queryOpts.relation = relationUpper;\n      return this;\n    }\n    /**\n     * Override default `toJSON` to return DSL representation of the `range` query\n     * class instance.\n     *\n     * @override\n     * @returns {Object} returns an Object which maps to the elasticsearch query DSL\n     */\n\n  }, {\n    key: 'toJSON',\n    value: function toJSON() {\n      // recursiveToJSON doesn't seem to be required here.\n      return (0, _defineProperty3.default)({}, this.queryType, (0, _defineProperty3.default)({}, this._field, this._queryOpts));\n    }\n  }]);\n  return RangeQuery;\n}(MultiTermQueryBase);\n\nmodule.exports = RangeQuery;","map":null,"metadata":{},"sourceType":"script"}