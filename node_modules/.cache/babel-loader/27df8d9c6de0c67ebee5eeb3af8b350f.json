{"ast":null,"code":"'use strict';\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar _require = require('../../core'),\n    checkType = _require.util.checkType;\n\nvar SpanQueryBase = require('./span-query-base');\n/**\n * Matches spans which are near one another. One can specify `slop`, the maximum\n * number of intervening unmatched positions, as well as whether matches are\n * required to be in-order. The span near query maps to Lucene `SpanNearQuery`.\n *\n * [Elasticsearch reference](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-span-near-query.html)\n *\n * @example\n * const spanQry = esb.spanNearQuery()\n *     .clauses([\n *         esb.spanTermQuery('field', 'value1'),\n *         esb.spanTermQuery('field', 'value2'),\n *         esb.spanTermQuery('field', 'value3')\n *     ])\n *     .slop(12)\n *     .inOrder(false);\n *\n * @extends SpanQueryBase\n */\n\n\nvar SpanNearQuery = function (_SpanQueryBase) {\n  (0, _inherits3.default)(SpanNearQuery, _SpanQueryBase); // eslint-disable-next-line require-jsdoc\n\n  function SpanNearQuery() {\n    (0, _classCallCheck3.default)(this, SpanNearQuery);\n    return (0, _possibleConstructorReturn3.default)(this, (SpanNearQuery.__proto__ || Object.getPrototypeOf(SpanNearQuery)).call(this, 'span_near'));\n  }\n  /**\n   * Sets the clauses element which is a list of one or more other span type queries.\n   *\n   * @param {Array<SpanQueryBase>} clauses\n   * @returns {SpanNearQuery} returns `this` so that calls can be chained.\n   * @throws {TypeError} If parameter `clauses` is not an instance of Array or if\n   * any member of the array is not an instance of `SpanQueryBase`.\n   */\n\n\n  (0, _createClass3.default)(SpanNearQuery, [{\n    key: 'clauses',\n    value: function clauses(_clauses) {\n      checkType(_clauses, Array);\n\n      _clauses.forEach(function (clause) {\n        return checkType(clause, SpanQueryBase);\n      });\n\n      this._queryOpts.clauses = _clauses;\n      return this;\n    }\n    /**\n     * Configures the `slop`(default is 0), the maximum number of intervening\n     * unmatched positions permitted.\n     *\n     * @param {number} slop A positive integer value, defaults is 0.\n     * @returns {SpanNearQuery} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'slop',\n    value: function slop(_slop) {\n      this._queryOpts.slop = _slop;\n      return this;\n    } // TODO: Add documentation for inOrder\n\n    /**\n     *\n     * @param {boolean} enable\n     * @returns {SpanNearQuery} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'inOrder',\n    value: function inOrder(enable) {\n      this._queryOpts.in_order = enable;\n      return this;\n    }\n  }]);\n  return SpanNearQuery;\n}(SpanQueryBase);\n\nmodule.exports = SpanNearQuery;","map":null,"metadata":{},"sourceType":"script"}