{"ast":null,"code":"'use strict';\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar BucketAggregationBase = require('./bucket-aggregation-base');\n\nvar ES_REF_URL = 'https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-sampler-aggregation.html';\n/**\n * A filtering aggregation used to limit any sub aggregations'\n * processing to a sample of the top-scoring documents.\n *\n * [Elasticsearch reference](https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-sampler-aggregation.html)\n *\n * @example\n * const reqBody = esb.requestBodySearch()\n *     .query(esb.queryStringQuery('tags:kibana OR tags:javascript'))\n *     .agg(\n *         esb.samplerAggregation('sample')\n *             .shardSize(200)\n *             .agg(\n *                 esb.significantTermsAggregation(\n *                     'keywords',\n *                     'tags'\n *                 ).exclude(['kibana', 'javascript'])\n *             )\n *     );\n *\n * @param {string} name The name which will be used to refer to this aggregation.\n * @param {string=} field The field to aggregate on\n *\n * @extends BucketAggregationBase\n */\n\nvar SamplerAggregation = function (_BucketAggregationBas) {\n  (0, _inherits3.default)(SamplerAggregation, _BucketAggregationBas); // eslint-disable-next-line require-jsdoc\n\n  function SamplerAggregation(name) {\n    (0, _classCallCheck3.default)(this, SamplerAggregation);\n    return (0, _possibleConstructorReturn3.default)(this, (SamplerAggregation.__proto__ || Object.getPrototypeOf(SamplerAggregation)).call(this, name, 'sampler'));\n  }\n  /**\n   * @override\n   * @throws {Error} This method cannot be called on SamplerAggregation\n   */\n\n\n  (0, _createClass3.default)(SamplerAggregation, [{\n    key: 'field',\n    value: function field() {\n      console.log('Please refer ' + ES_REF_URL);\n      throw new Error('field is not supported in SamplerAggregation');\n    }\n    /**\n     * @override\n     * @throws {Error} This method cannot be called on SamplerAggregation\n     */\n\n  }, {\n    key: 'script',\n    value: function script() {\n      console.log('Please refer ' + ES_REF_URL);\n      throw new Error('script is not supported in SamplerAggregation');\n    }\n    /**\n     * The shard_size parameter limits how many top-scoring documents\n     * are collected in the sample processed on each shard. The default value is 100.\n     *\n     * @param {number} size Maximum number of documents to return from each shard(Integer)\n     * @returns {SamplerAggregation} returns `this` so that calls can be chained\n     */\n\n  }, {\n    key: 'shardSize',\n    value: function shardSize(size) {\n      this._aggsDef.shard_size = size;\n      return this;\n    }\n  }]);\n  return SamplerAggregation;\n}(BucketAggregationBase);\n\nmodule.exports = SamplerAggregation;","map":null,"metadata":{},"sourceType":"script"}