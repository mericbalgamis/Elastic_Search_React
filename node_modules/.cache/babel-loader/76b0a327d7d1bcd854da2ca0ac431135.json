{"ast":null,"code":"'use strict';\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar _require = require('../../core'),\n    Query = _require.Query,\n    _require$util = _require.util,\n    checkType = _require$util.checkType,\n    setDefault = _require$util.setDefault;\n/**\n * A query that generates the union of documents produced by its subqueries,\n * and that scores each document with the maximum score for that document\n * as produced by any subquery, plus a tie breaking increment for\n * any additional matching subqueries.\n *\n * [Elasticsearch reference](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-dis-max-query.html)\n *\n * @example\n * const qry = esb.disMaxQuery()\n *     .queries([esb.termQuery('age', 34), esb.termQuery('age', 35)])\n *     .tieBreaker(0.7)\n *     .boost(1.2);\n *\n * @example\n * const qry = esb.disMaxQuery()\n *     .queries([\n *         esb.matchQuery('subject', 'brown fox'),\n *         esb.matchQuery('message', 'brown fox')\n *     ])\n *     .tieBreaker(0.3);\n *\n * @extends Query\n */\n\n\nvar DisMaxQuery = function (_Query) {\n  (0, _inherits3.default)(DisMaxQuery, _Query); // eslint-disable-next-line require-jsdoc\n\n  function DisMaxQuery() {\n    (0, _classCallCheck3.default)(this, DisMaxQuery);\n    return (0, _possibleConstructorReturn3.default)(this, (DisMaxQuery.__proto__ || Object.getPrototypeOf(DisMaxQuery)).call(this, 'dis_max'));\n  }\n  /**\n   * Add given query to list of queries under given clause.\n   *\n   * @private\n   * @param {Query} query\n   * @throws {TypeError} If query is not an instance of `Query`\n   */\n\n\n  (0, _createClass3.default)(DisMaxQuery, [{\n    key: '_addQuery',\n    value: function _addQuery(query) {\n      checkType(query, Query);\n\n      this._queryOpts.queries.push(query);\n    }\n    /**\n     * The tie breaker value. The tie breaker capability allows results\n     * that include the same term in multiple fields to be judged better than\n     * results that include this term in only the best of those multiple\n     * fields, without confusing this with the better case of two different\n     * terms in the multiple fields. Default: `0.0`.\n     *\n     * @param {number} factor\n     * @returns {DisMaxQuery} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'tieBreaker',\n    value: function tieBreaker(factor) {\n      this._queryOpts.tie_breaker = factor;\n      return this;\n    }\n    /**\n     * Add given query array or query to list of queries\n     *\n     * @param {Array<Query>|Query} queries Array of valid `Query` objects or a `Query` object\n     * @returns {DisMaxQuery} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'queries',\n    value: function queries(_queries) {\n      var _this2 = this;\n\n      setDefault(this._queryOpts, 'queries', []);\n      if (Array.isArray(_queries)) _queries.forEach(function (qry) {\n        return _this2._addQuery(qry);\n      });else this._addQuery(_queries);\n      return this;\n    }\n  }]);\n  return DisMaxQuery;\n}(Query);\n\nmodule.exports = DisMaxQuery;","map":null,"metadata":{},"sourceType":"script"}