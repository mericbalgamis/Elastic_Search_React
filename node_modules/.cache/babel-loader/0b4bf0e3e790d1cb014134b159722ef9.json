{"ast":null,"code":"'use strict';\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar _require = require('../../core'),\n    Aggregation = _require.Aggregation,\n    _require$util = _require.util,\n    checkType = _require$util.checkType,\n    constructorWrapper = _require$util.constructorWrapper;\n\nvar _require2 = require('./composite-agg-values-sources'),\n    ValuesSourceBase = _require2.ValuesSourceBase,\n    TermsValuesSource = _require2.TermsValuesSource,\n    HistogramValuesSource = _require2.HistogramValuesSource,\n    DateHistogramValuesSource = _require2.DateHistogramValuesSource;\n/**\n * CompositeAggregation is a multi-bucket values source based aggregation that\n * can be used to calculate unique composite values from source documents.\n *\n * Unlike the other multi-bucket aggregation the composite aggregation can be\n * used to paginate **all** buckets from a multi-level aggregation efficiently.\n * This aggregation provides a way to stream **all** buckets of a specific\n * aggregation similarly to what scroll does for documents.\n *\n * [Elasticsearch reference](https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-composite-aggregation.html)\n *\n * @example\n * const reqBody = esb.requestBodySearch()\n *   .agg(\n *     esb.compositeAggregation('my_buckets')\n *       .sources(\n *         esb.CompositeAggregation.termsValuesSource('product', 'product')\n *       )\n *   )\n *\n * NOTE: This query was added in elasticsearch v6.1.\n *\n * @param {string} name a valid aggregation name\n *\n * @extends Aggregation\n */\n\n\nvar CompositeAggregation = function (_Aggregation) {\n  (0, _inherits3.default)(CompositeAggregation, _Aggregation); // eslint-disable-next-line require-jsdoc\n\n  function CompositeAggregation(name) {\n    (0, _classCallCheck3.default)(this, CompositeAggregation);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (CompositeAggregation.__proto__ || Object.getPrototypeOf(CompositeAggregation)).call(this, name, 'composite'));\n\n    _this._aggsDef.sources = [];\n    return _this;\n  }\n  /**\n   * Specifies the Composite Aggregation values sources to use in the\n   * aggregation.\n   *\n   * @example\n   * const { CompositeAggregation } = esb;\n   * const reqBody = esb.requestBodySearch()\n   *   .agg(\n   *     esb.compositeAggregation('my_buckets')\n   *       .sources(\n   *         CompositeAggregation.dateHistogramValuesSource(\n   *           'date',\n   *           'timestamp',\n   *           '1d'\n   *         ),\n   *         CompositeAggregation.termsValuesSource('product', 'product')\n   *       )\n   *   );\n   *\n   * @param {...ValuesSourceBase} sources\n   * @returns {CompositeAggregation} returns `this` so that calls can be chained\n   * @throws {TypeError} If any of the rest parameters `sources` is not an\n   * instance of `ValuesSourceBase`\n   */\n\n\n  (0, _createClass3.default)(CompositeAggregation, [{\n    key: 'sources',\n    value: function sources() {\n      for (var _len = arguments.length, _sources = Array(_len), _key = 0; _key < _len; _key++) {\n        _sources[_key] = arguments[_key];\n      }\n\n      _sources.forEach(function (valueSrc) {\n        return checkType(valueSrc, ValuesSourceBase);\n      });\n\n      this._aggsDef.sources = this._aggsDef.sources.concat(_sources);\n      return this;\n    }\n    /**\n     * Defines how many composite buckets should be returned. Each composite\n     * bucket is considered as a single bucket so setting a size of 10 will\n     * return the first 10 composite buckets created from the values source. The\n     * response contains the values for each composite bucket in an array\n     * containing the values extracted from each value source.\n     *\n     * @param {number} size\n     * @returns {CompositeAggregation} returns `this` so that calls can be chained\n     */\n\n  }, {\n    key: 'size',\n    value: function size(_size) {\n      this._aggsDef.size = _size;\n      return this;\n    }\n    /**\n     * The `after` parameter can be used to retrieve the composite buckets that\n     * are after the last composite buckets returned in a previous round.\n     *\n     * @example\n     * const { CompositeAggregation } = esb;\n     * const reqBody = esb.requestBodySearch().agg(\n     *   esb.compositeAggregation('my_buckets')\n     *     .size(2)\n     *     .sources(\n     *       CompositeAggregation.dateHistogramValuesSource(\n     *         'date',\n     *         'timestamp',\n     *         '1d'\n     *       ).order('desc'),\n     *       CompositeAggregation.termsValuesSource('product', 'product').order('asc')\n     *     )\n     *     .after({ date: 1494288000000, product: 'mad max' })\n     * );\n     *\n     * @param {Object} afterKey\n     * @returns {CompositeAggregation} returns `this` so that calls can be chained\n     */\n\n  }, {\n    key: 'after',\n    value: function after(afterKey) {\n      this._aggsDef.after = afterKey;\n      return this;\n    }\n  }]);\n  return CompositeAggregation;\n}(Aggregation);\n\nCompositeAggregation.TermsValuesSource = TermsValuesSource;\nCompositeAggregation.termsValuesSource = constructorWrapper(TermsValuesSource);\nCompositeAggregation.HistogramValuesSource = HistogramValuesSource;\nCompositeAggregation.histogramValuesSource = constructorWrapper(HistogramValuesSource);\nCompositeAggregation.DateHistogramValuesSource = DateHistogramValuesSource;\nCompositeAggregation.dateHistogramValuesSource = constructorWrapper(DateHistogramValuesSource);\nmodule.exports = CompositeAggregation;","map":null,"metadata":{},"sourceType":"script"}