{"ast":null,"code":"'use strict';\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar isNil = require('lodash.isnil');\n\nvar _require = require('../../core'),\n    GeoPoint = _require.GeoPoint,\n    _require$util = _require.util,\n    checkType = _require$util.checkType,\n    invalidParam = _require$util.invalidParam;\n\nvar GeoQueryBase = require('./geo-query-base');\n\nvar ES_REF_URL = 'https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-geo-distance-query.html';\nvar invalidDistanceTypeParam = invalidParam(ES_REF_URL, 'distance_type', \"'plane' or 'arc'\");\n/**\n * Filters documents that include only hits that exists within a specific distance from a geo point.\n *\n * [Elasticsearch reference](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-geo-distance-query.html)\n *\n * @example\n * const qry = esb.geoDistanceQuery('pin.location', esb.geoPoint().lat(40).lon(-70))\n *     .distance('12km');\n *\n * const qry = esb.geoDistanceQuery()\n *     .field('pin.location')\n *     .distance('200km')\n *     .geoPoint(esb.geoPoint().lat(40).lon(-70));\n *\n * @param {string=} field\n * @param {GeoPoint=} point Geo point used to measure and filter documents based on distance from it.\n *\n * @extends GeoQueryBase\n */\n\nvar GeoDistanceQuery = function (_GeoQueryBase) {\n  (0, _inherits3.default)(GeoDistanceQuery, _GeoQueryBase); // eslint-disable-next-line require-jsdoc\n\n  function GeoDistanceQuery(field, point) {\n    (0, _classCallCheck3.default)(this, GeoDistanceQuery);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (GeoDistanceQuery.__proto__ || Object.getPrototypeOf(GeoDistanceQuery)).call(this, 'geo_distance', field));\n\n    if (!isNil(point)) _this.geoPoint(point);\n    return _this;\n  }\n  /**\n   * Sets the radius of the circle centred on the specified location. Points which\n   * fall into this circle are considered to be matches. The distance can be specified\n   * in various units.\n   *\n   * @param {string|number} distance Radius of circle centred on specified location.\n   * @returns {GeoDistanceQuery} returns `this` so that calls can be chained.\n   */\n\n\n  (0, _createClass3.default)(GeoDistanceQuery, [{\n    key: 'distance',\n    value: function distance(_distance) {\n      this._queryOpts.distance = _distance;\n      return this;\n    }\n    /**\n     * Sets the distance calculation mode, `arc` or `plane`.\n     * The `arc` calculation is the more accurate.\n     * The `plane` is the faster but least accurate.\n     *\n     * @param {string} type\n     * @returns {GeoDistanceQuery} returns `this` so that calls can be chained\n     * @throws {Error} If `type` is neither `plane` nor `arc`.\n     */\n\n  }, {\n    key: 'distanceType',\n    value: function distanceType(type) {\n      if (isNil(type)) invalidDistanceTypeParam(type);\n      var typeLower = type.toLowerCase();\n      if (typeLower !== 'plane' && typeLower !== 'arc') invalidDistanceTypeParam(type);\n      this._queryOpts.distance_type = typeLower;\n      return this;\n    }\n    /**\n     * Sets the point to filter documents based on the distance from it.\n     *\n     * @param {GeoPoint} point Geo point used to measure and filter documents based on distance from it.\n     * @returns {GeoDistanceQuery} returns `this` so that calls can be chained\n     * @throws {TypeError} If parameter `point` is not an instance of `GeoPoint`\n     */\n\n  }, {\n    key: 'geoPoint',\n    value: function geoPoint(point) {\n      checkType(point, GeoPoint);\n      this._fieldOpts = point;\n      return this;\n    }\n  }]);\n  return GeoDistanceQuery;\n}(GeoQueryBase);\n\nmodule.exports = GeoDistanceQuery;","map":null,"metadata":{},"sourceType":"script"}