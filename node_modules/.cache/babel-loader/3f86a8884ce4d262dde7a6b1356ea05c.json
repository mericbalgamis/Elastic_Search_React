{"ast":null,"code":"'use strict';\n\nvar _defineProperty2 = require('babel-runtime/helpers/defineProperty');\n\nvar _defineProperty3 = _interopRequireDefault(_defineProperty2);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar _require = require('../../../core'),\n    Query = _require.Query,\n    _require$util = _require.util,\n    checkType = _require$util.checkType,\n    recursiveToJSON = _require$util.recursiveToJSON;\n/**\n * `ScoreFunction` provides support for common options used across\n * various `ScoreFunction` implementations.\n *\n * [Elasticsearch reference](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-function-score-query.html#score-functions)\n *\n * **NOTE:** Instantiating this directly should not be required.\n * However, if you wish to add a custom implementation for whatever reason,\n * this class could be extended.\n *\n * @param {string} name\n */\n\n\nvar ScoreFunction = function () {\n  // eslint-disable-next-line require-jsdoc\n  function ScoreFunction(name) {\n    (0, _classCallCheck3.default)(this, ScoreFunction);\n    this._name = name; // Filter, weight go here\n\n    this._body = {}; // Score Function specific options go here\n\n    this._opts = {};\n  }\n  /**\n   * Adds a filter query whose matching documents will have the score function applied.\n   *\n   * @param {Query} filterQry A valid `Query` object.\n   * @returns {ScoreFunction} returns `this` so that calls can be chained.\n   */\n\n\n  (0, _createClass3.default)(ScoreFunction, [{\n    key: 'filter',\n    value: function filter(filterQry) {\n      checkType(filterQry, Query);\n      this._body.filter = filterQry;\n      return this;\n    }\n    /**\n     * Sets the weight of the score function\n     *\n     * @param {number} weight The weight of this score function.\n     * @returns {ScoreFunction} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'weight',\n    value: function weight(_weight) {\n      this._body.weight = _weight;\n      return this;\n    }\n    /**\n     * Overrides default `toJSON` to return DSL representation of the score function\n     * class instance.\n     *\n     * @override\n     * @returns {Object} returns an Object which maps to the elasticsearch query DSL\n     */\n\n  }, {\n    key: 'toJSON',\n    value: function toJSON() {\n      var repr = Object.assign((0, _defineProperty3.default)({}, this._name, this._opts), this._body);\n      return recursiveToJSON(repr);\n    }\n  }]);\n  return ScoreFunction;\n}();\n\nmodule.exports = ScoreFunction;","map":null,"metadata":{},"sourceType":"script"}