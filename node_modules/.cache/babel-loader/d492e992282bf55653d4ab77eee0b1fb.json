{"ast":null,"code":"'use strict';\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar isNil = require('lodash.isnil');\n\nvar ValuesSourceBase = require('./values-source-base');\n\nvar REF_URL = 'https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-composite-aggregation.html#_date_histogram';\n/**\n * `DateHistogramValuesSource` is a source for the `CompositeAggregation` that\n * handles date histograms. It works very similar to a histogram aggregation\n * with a slightly different syntax.\n *\n * [Elasticsearch reference](https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-composite-aggregation.html#_date_histogram)\n *\n * @example\n * const valueSrc = esb.CompositeAggregation.dateHistogramValuesSource(\n *   'date', // name\n *   'timestamp', // field\n *   '1d' // interval\n * );\n *\n * @param {string} name\n * @param {string=} field The field to aggregate on\n * @param {string|number=} interval Interval to generate histogram over.\n *\n * @extends ValuesSourceBase\n */\n\nvar DateHistogramValuesSource = function (_ValuesSourceBase) {\n  (0, _inherits3.default)(DateHistogramValuesSource, _ValuesSourceBase); // eslint-disable-next-line require-jsdoc\n\n  function DateHistogramValuesSource(name, field, interval) {\n    (0, _classCallCheck3.default)(this, DateHistogramValuesSource);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (DateHistogramValuesSource.__proto__ || Object.getPrototypeOf(DateHistogramValuesSource)).call(this, 'date_histogram', REF_URL, name, field));\n\n    if (!isNil(interval)) _this._opts.interval = interval;\n    return _this;\n  }\n  /**\n   * Sets the histogram interval. Buckets are generated based on this interval value.\n   *\n   * @param {string|number} interval Interval to generate histogram over.\n   * @returns {DateHistogramValuesSource} returns `this` so that calls can be chained\n   */\n\n\n  (0, _createClass3.default)(DateHistogramValuesSource, [{\n    key: 'interval',\n    value: function interval(_interval) {\n      this._opts.interval = _interval;\n      return this;\n    }\n    /**\n     * Sets the date time zone\n     *\n     * Date-times are stored in Elasticsearch in UTC. By default, all bucketing\n     * and rounding is also done in UTC. The `time_zone` parameter can be used\n     * to indicate that bucketing should use a different time zone.\n     *\n     * @param {string} tz Time zone. Time zones may either be specified\n     * as an ISO 8601 UTC offset (e.g. +01:00 or -08:00) or as a timezone id,\n     * an identifier used in the TZ database like America/Los_Angeles.\n     * @returns {DateHistogramValuesSource} returns `this` so that calls can be chained\n     */\n\n  }, {\n    key: 'timeZone',\n    value: function timeZone(tz) {\n      this._opts.time_zone = tz;\n      return this;\n    }\n    /**\n     * Sets the format expression for `key_as_string` in response buckets.\n     * If no format is specified, then it will use the first format specified\n     * in the field mapping.\n     *\n     * @example\n     * const valueSrc = esb.CompositeAggregation.valuesSource\n     *   .dateHistogram('date', 'timestamp', '1d')\n     *   .format('yyyy-MM-dd');\n     *\n     * @param {string} fmt Format mask to apply on aggregation response.\n     * For Date Histograms, supports expressive [date format pattern](https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-daterange-aggregation.html#date-format-pattern)\n     * @returns {DateHistogramValuesSource} returns `this` so that calls can be chained\n     */\n\n  }, {\n    key: 'format',\n    value: function format(fmt) {\n      this._opts.format = fmt;\n      return this;\n    }\n  }]);\n  return DateHistogramValuesSource;\n}(ValuesSourceBase);\n\nmodule.exports = DateHistogramValuesSource;","map":null,"metadata":{},"sourceType":"script"}