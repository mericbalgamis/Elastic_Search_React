{"ast":null,"code":"var _jsxFileName = \"/home/meric/elastic/src/App.js\";\nimport React, { Component } from \"react\";\nimport './App.css';\nimport SplitterLayout from 'react-splitter-layout';\nimport CsvDownload from 'react-json-to-csv';\nimport 'react-splitter-layout/lib/index.css';\nimport Panel from 'muicss/lib/react/panel';\nimport DynamicForm from './components/dynamicForm/dynamicForm';\nimport myJson from './datatypes.json';\nimport txt from './datatypes.txt';\nimport txt_output from './datatypes_output.txt';\nimport json from './config/simple.json';\nimport axios from 'axios';\nimport JSONPretty from 'react-json-pretty';\nimport { github } from 'react-json-pretty/themes/monikai.css';\nimport queryBuilder, { filtersAggregation } from 'elastic-builder';\n\nvar fileDownload = require('react-file-download');\n\nvar formJson = {\n  \"name\": \"ABCz Form\",\n  \"fields\": []\n};\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.submitHandler = event => {\n      let json = JSON.stringify(event, null, 4);\n      this.generateQuery(json); //console.log(json);\n    };\n\n    this.handleDownload = () => {\n      fileDownload(this.state.response, 'response.json');\n    };\n\n    this.handleCSV = () => {\n      fileDownload(this.state.response, 'response.json');\n    };\n\n    this.removeEmptyFields = (requestBody, name, field) => {\n      if (field == \"filter\") {\n        for (var i = 0; i < requestBody._body.query._body.bool.filter.length; i++) {\n          if (requestBody._body.query._body.bool.filter[i]._field.includes(name.replace(/ /g, '_'))) {\n            requestBody._body.query._body.bool.filter.splice(i, 1);\n          }\n        }\n      } else if (field == \"must\") {\n        for (var i = 0; i < requestBody._body.query._body.bool.must.length; i++) {\n          if (requestBody._body.query._body.bool.must[i]._field.includes(name.replace(/ /g, '_'))) {\n            requestBody._body.query._body.bool.must.splice(i, 1);\n          }\n        }\n\n        return requestBody;\n      }\n    };\n\n    this.generateQuery = formResults => {\n      var form = JSON.parse(formResults);\n      let requestBodyUpdated; // Bool query\n\n      const requestBody = queryBuilder.requestBodySearch().query(queryBuilder.boolQuery().must(queryBuilder.matchQuery(\"studies.DCMs.\" + form.data[0].name.replace(/ /g, '_') + \".Value\", form.data[0].value)).filter(queryBuilder.rangeQuery(\"studies.DCMs.\" + form.data[1].name.replace(/ /g, '_') + \".Value\").gt(form.data[1].value).lte(form.data[2].value)).filter(queryBuilder.rangeQuery(\"studies.DCMs.\" + form.data[3].name.replace(/ /g, '_') + \".Value\").gt(form.data[3].value).lte(form.data[4].value)).must(queryBuilder.matchQuery(\"studies.DCMs.\" + form.data[5].name.replace(/ /g, '_') + \".Value\", form.data[5].value)).must(queryBuilder.matchQuery(\"studies.DCMs.\" + form.data[6].name.replace(/ /g, '_') + \".Value\", form.data[6].value)).filter(queryBuilder.rangeQuery(\"studies.DCMs.\" + form.data[7].name.replace(/ /g, '_') + \".Value\").gt(form.data[7].value).lte(form.data[8].value)).filter(queryBuilder.rangeQuery(\"studies.DCMs.\" + form.data[9].name.replace(/ /g, '_') + \".Value\").gt(form.data[9].value).lte(form.data[10].value)).filter(queryBuilder.rangeQuery(\"studies.DCMs.\" + form.data[11].name.replace(/ /g, '_') + \".Value\").gt(form.data[11].value).lte(form.data[12].value)).filter(queryBuilder.rangeQuery(\"studies.DCMs.\" + form.data[13].name.replace(/ /g, '_') + \".Value\").gt(form.data[13].value).lte(form.data[14].value)).must(queryBuilder.matchQuery(\"studies.DCMs.\" + form.data[15].name.replace(/ /g, '_') + \".Value\", form.data[15].value)));\n\n      for (var i = 0; i <= form.data.length - 1; i++) {\n        if (i != form.data.length - 1 && form.data[i].name == form.data[i + 1].name) {\n          if (form.data[i].value == \"\") {\n            requestBodyUpdated = this.removeEmptyFields(requestBody, form.data[i].name, \"filter\");\n          }\n\n          i++;\n        } else if (i == form.data.length) {\n          if (form.data[i].value == \"\") {\n            requestBodyUpdated = this.removeEmptyFields(requestBody, form.data[i].name, \"must\");\n          }\n        } else {\n          if (form.data[i].value == \"\") {\n            requestBodyUpdated = this.removeEmptyFields(requestBody, form.data[i].name, \"must\");\n          }\n        }\n      }\n\n      console.log(requestBodyUpdated);\n      this.sendRequest(JSON.stringify(requestBodyUpdated));\n      /*\n      // Bool query\n      const requestBody = queryBuilder.requestBodySearch().query(\n      queryBuilder.boolQuery()\n        .must(queryBuilder.matchQuery(\"DCMs.\"+form.data[0].name.replace(/ /g, '_')+\".Value\", form.data[0].value))\n        .must(queryBuilder.matchQuery(\"DCMs.\"+form.data[1].name.replace(/ /g, '_')+\".Value\", form.data[1].value))\n        .must(queryBuilder.matchQuery(\"DCMs.\"+form.data[2].name.replace(/ /g, '_')+\".Value\", form.data[2].value))\n        .must(queryBuilder.matchQuery(\"DCMs.\"+form.data[3].name.replace(/ /g, '_')+\".Value\", form.data[3].value))\n        .must(queryBuilder.matchQuery(\"DCMs.\"+form.data[4].name.replace(/ /g, '_')+\".Value\", form.data[4].value))\n      );\n      console.log(requestBody.toJSON())\n      for (var i = form.data.length - 1; i >= 0; i--) {\n        if (form.data[i].value == \"\" ) {\n          requestBody._body.query._body.bool.must.splice(i, 1);\n        }\n      }*/\n\n      console.log(requestBody);\n      this.sendRequest(JSON.stringify(requestBody));\n    };\n\n    this.state = {\n      form: formJson,\n      response: 'jghf'\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n    axios.get().then(res => {\n      this.setState({\n        todo: res.data\n      });\n    });\n  }\n\n  sendRequest(requestBody) {\n    //console.log(\"handleclick\")\n    var panel = document.getElementById(\"resultPanel\");\n    console.log(\"requestBody: \" + requestBody);\n    fetch('http://127.0.0.1:5000/query', {\n      method: \"POST\",\n      //Request Type \n      body: requestBody,\n      //post body \n      headers: {\n        //Header Defination \n        'Content-Type': 'application/json'\n      }\n    }).then(response => response.json()) //If response is in json then in success\n    .then(responseJson => {\n      //alert(JSON.stringify(responseJson));\n      console.log(responseJson);\n      const json = JSON.stringify(responseJson, null, 4);\n      this.setState({\n        response: json\n      });\n    }) //If response is not in json then in error \n    .catch(error => {\n      alert(JSON.stringify(error)); //console.error(error);\n    });\n  }\n\n  componentWillMount() {\n    fetch(txt_output).then(r => r.text()).then(text => {\n      let myarray = text.split('\\n');\n      let dataArray = myarray.map((element, i) => {\n        var array = element.split(' ');\n\n        if (array.length === 4) {\n          let name = array[0];\n          name = name.replace(/_/g, ' ');\n          let type = array[1];\n          let options = array[2];\n          options = options.replace(/\\)/g, '');\n          options = options.replace(/\\(/g, '');\n          let optionsArray = options.split(',');\n          var optionData = {\n            \"options\": []\n          };\n          var data = {};\n          optionsArray.map((option, i) => {\n            optionData.options.push({\n              \"display\": option\n            });\n          });\n          return {\n            \"id\": name,\n            \"label\": name,\n            \"description\": \"\",\n            \"type\": type,\n            \"value\": \"\",\n            \"required\": \"false\",\n            \"placeholder\": \"\",\n            \"definition\": optionData\n          };\n        } else if (array.length === 3) {\n          let name = array[0];\n          name = name.replace(/_/g, ' ');\n          let type = array[1];\n          return {\n            \"id\": name,\n            \"label\": name,\n            \"description\": \"\",\n            \"type\": type,\n            \"value\": \"\",\n            \"required\": \"false\",\n            \"placeholder\": \"\"\n          };\n        }\n      });\n      this.setState({\n        form: {\n          fields: dataArray\n        }\n      });\n      console.log(dataArray);\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258\n      },\n      __self: this\n    }, React.createElement(SplitterLayout, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"Form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    }, React.createElement(DynamicForm, {\n      id: \"form\",\n      config: this.state.form,\n      onSubmit: event => this.submitHandler(event),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"PanelRight\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      id: \"download\",\n      onClick: () => this.handleDownload(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269\n      },\n      __self: this\n    }, \"Download\"), React.createElement(CsvDownload, {\n      data: this.state.response,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270\n      },\n      __self: this\n    }, \"Download as CSV\"), React.createElement(JSONPretty, {\n      id: \"resultPanel\",\n      json: this.state.response,\n      theme: github,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/meric/elastic/src/App.js"],"names":["React","Component","SplitterLayout","CsvDownload","Panel","DynamicForm","myJson","txt","txt_output","json","axios","JSONPretty","github","queryBuilder","filtersAggregation","fileDownload","require","formJson","App","constructor","props","submitHandler","event","JSON","stringify","generateQuery","handleDownload","state","response","handleCSV","removeEmptyFields","requestBody","name","field","i","_body","query","bool","filter","length","_field","includes","replace","splice","must","formResults","form","parse","requestBodyUpdated","requestBodySearch","boolQuery","matchQuery","data","value","rangeQuery","gt","lte","console","log","sendRequest","handleClick","bind","get","then","res","setState","todo","panel","document","getElementById","fetch","method","body","headers","responseJson","catch","error","alert","componentWillMount","r","text","myarray","split","dataArray","map","element","array","type","options","optionsArray","optionData","option","push","fields","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport './App.css';\nimport SplitterLayout from 'react-splitter-layout';\nimport CsvDownload from 'react-json-to-csv'\nimport 'react-splitter-layout/lib/index.css';\nimport Panel from 'muicss/lib/react/panel';\nimport DynamicForm from './components/dynamicForm/dynamicForm';\nimport myJson from './datatypes.json';\nimport txt from './datatypes.txt';\nimport txt_output from './datatypes_output.txt';\nimport json from './config/simple.json';\nimport axios from 'axios';\nimport JSONPretty from 'react-json-pretty';\nimport { github } from 'react-json-pretty/themes/monikai.css';\n\nimport queryBuilder, { filtersAggregation } from 'elastic-builder';\n\nvar fileDownload = require('react-file-download');\n\nvar formJson = {\n  \"name\": \"ABCz Form\",\n  \"fields\": []\n};\n\nclass App extends Component {\n\n  constructor(props) {\n\n    super(props);\n    this.state = {\n\n      form: formJson,\n      response: 'jghf'\n    }\n    this.handleClick = this.handleClick.bind(this)\n  }\n\n  handleClick() {\n    axios.get()\n      .then(res => {\n        this.setState({\n          todo: res.data\n        })\n      })\n  }\n\n  sendRequest(requestBody) {\n    //console.log(\"handleclick\")\n    var panel = document.getElementById(\"resultPanel\");\n    console.log(\"requestBody: \" + requestBody)\n    fetch('http://127.0.0.1:5000/query', {\n      method: \"POST\",//Request Type \n      body: requestBody,//post body \n      headers: {//Header Defination \n        'Content-Type': 'application/json',\n      },\n    })\n      .then((response) => response.json())\n      //If response is in json then in success\n      .then((responseJson) => {\n        //alert(JSON.stringify(responseJson));\n        console.log(responseJson);\n        const json=JSON.stringify(responseJson, null, 4)\n\n        \n        this.setState({\n\n            response: json\n          \n        });\n      })\n      //If response is not in json then in error \n      .catch((error) => {\n        alert(JSON.stringify(error));\n        //console.error(error);\n      });\n\n\n  }\n\n  submitHandler = (event) => {\n    let json = JSON.stringify(event, null, 4);\n    this.generateQuery(json);\n    //console.log(json);\n  }\n\n\n  handleDownload = () => {\n    fileDownload(this.state.response, 'response.json');\n  }\n\n  handleCSV = () => {\n    fileDownload(this.state.response, 'response.json');\n  }\n\n  removeEmptyFields = (requestBody, name, field) => {\n    if (field == \"filter\") {\n      for (var i = 0; i < requestBody._body.query._body.bool.filter.length; i++) {\n        \n        if(requestBody._body.query._body.bool.filter[i]._field.includes(name.replace(/ /g, '_'))){\n          requestBody._body.query._body.bool.filter.splice(i,1)\n\n        }\n      }\n     \n\n    }\n    else if (field == \"must\") {\n      for (var i = 0; i < requestBody._body.query._body.bool.must.length; i++) {\n        if(requestBody._body.query._body.bool.must[i]._field.includes(name.replace(/ /g, '_'))){\n          requestBody._body.query._body.bool.must.splice(i,1)\n\n        }\n      }\n      return requestBody;\n\n    }\n\n  }\n\n  generateQuery = (formResults) => {\n\n    var form = JSON.parse(formResults);\n    let requestBodyUpdated;\n\n    \n    // Bool query\n    const requestBody = queryBuilder.requestBodySearch().query(\n      queryBuilder.boolQuery()\n        .must(queryBuilder.matchQuery(\"studies.DCMs.\" + form.data[0].name.replace(/ /g, '_') + \".Value\", form.data[0].value))\n        .filter(queryBuilder.rangeQuery(\"studies.DCMs.\" + form.data[1].name.replace(/ /g, '_') + \".Value\").gt(form.data[1].value).lte(form.data[2].value))\n        .filter(queryBuilder.rangeQuery(\"studies.DCMs.\" + form.data[3].name.replace(/ /g, '_') + \".Value\").gt(form.data[3].value).lte(form.data[4].value))\n        .must(queryBuilder.matchQuery(\"studies.DCMs.\" + form.data[5].name.replace(/ /g, '_') + \".Value\", form.data[5].value))\n        .must(queryBuilder.matchQuery(\"studies.DCMs.\" + form.data[6].name.replace(/ /g, '_') + \".Value\", form.data[6].value))\n        .filter(queryBuilder.rangeQuery(\"studies.DCMs.\" + form.data[7].name.replace(/ /g, '_') + \".Value\").gt(form.data[7].value).lte(form.data[8].value))\n        .filter(queryBuilder.rangeQuery(\"studies.DCMs.\" + form.data[9].name.replace(/ /g, '_') + \".Value\").gt(form.data[9].value).lte(form.data[10].value))\n        .filter(queryBuilder.rangeQuery(\"studies.DCMs.\" + form.data[11].name.replace(/ /g, '_') + \".Value\").gt(form.data[11].value).lte(form.data[12].value))\n        .filter(queryBuilder.rangeQuery(\"studies.DCMs.\" + form.data[13].name.replace(/ /g, '_') + \".Value\").gt(form.data[13].value).lte(form.data[14].value))\n        .must(queryBuilder.matchQuery(\"studies.DCMs.\" + form.data[15].name.replace(/ /g, '_') + \".Value\", form.data[15].value))\n    );\n\n    for (var i = 0; i <= form.data.length - 1; i++) {\n\n      if (i != form.data.length - 1 && form.data[i].name == form.data[i + 1].name) {\n        if (form.data[i].value == \"\") {\n          requestBodyUpdated=this.removeEmptyFields(requestBody, form.data[i].name, \"filter\")\n        }\n        i++;\n      }\n      else if (i == form.data.length) {\n        if (form.data[i].value == \"\"){\n          requestBodyUpdated=this.removeEmptyFields(requestBody, form.data[i].name, \"must\")\n        }\n      }\n      else {\n        if (form.data[i].value == \"\"){\n          requestBodyUpdated=this.removeEmptyFields(requestBody, form.data[i].name, \"must\")\n\n        }\n      }\n    }\n\n    console.log(requestBodyUpdated)\n    this.sendRequest(JSON.stringify(requestBodyUpdated));\n    \n    /*\n  // Bool query\n  const requestBody = queryBuilder.requestBodySearch().query(\n    queryBuilder.boolQuery()\n      .must(queryBuilder.matchQuery(\"DCMs.\"+form.data[0].name.replace(/ /g, '_')+\".Value\", form.data[0].value))\n      .must(queryBuilder.matchQuery(\"DCMs.\"+form.data[1].name.replace(/ /g, '_')+\".Value\", form.data[1].value))\n      .must(queryBuilder.matchQuery(\"DCMs.\"+form.data[2].name.replace(/ /g, '_')+\".Value\", form.data[2].value))\n      .must(queryBuilder.matchQuery(\"DCMs.\"+form.data[3].name.replace(/ /g, '_')+\".Value\", form.data[3].value))\n      .must(queryBuilder.matchQuery(\"DCMs.\"+form.data[4].name.replace(/ /g, '_')+\".Value\", form.data[4].value))\n  );\n    console.log(requestBody.toJSON())\n    for (var i = form.data.length - 1; i >= 0; i--) {\n      if (form.data[i].value == \"\" ) {\n        requestBody._body.query._body.bool.must.splice(i, 1);\n      }\n    }*/\n\n    console.log(requestBody)\n    this.sendRequest(JSON.stringify(requestBody));\n\n  }\n\n  componentWillMount() {\n\n    fetch(txt_output)\n      .then((r) => r.text())\n      .then(text => {\n        let myarray = text.split('\\n');\n        let dataArray = myarray.map((element, i) => {\n\n\n          var array = element.split(' ');\n\n          if (array.length === 4) {\n\n            let name = array[0];\n            name = name.replace(/_/g, ' ');\n            let type = array[1];\n            let options = array[2];\n            options = options.replace(/\\)/g, '');\n            options = options.replace(/\\(/g, '');\n            let optionsArray = options.split(',');\n\n            var optionData = { \"options\": [] };\n            var data = {};\n            optionsArray.map((option, i) => {\n              optionData.options.push({ \"display\": option });\n            })\n\n            return {\n              \"id\": name,\n              \"label\": name,\n              \"description\": \"\",\n              \"type\": type,\n              \"value\": \"\",\n              \"required\": \"false\",\n              \"placeholder\": \"\",\n              \"definition\": optionData\n            };\n\n          }\n\n          else if (array.length === 3) {\n            let name = array[0];\n            name = name.replace(/_/g, ' ');\n            let type = array[1];\n\n            return {\n              \"id\": name,\n              \"label\": name,\n              \"description\": \"\",\n              \"type\": type,\n              \"value\": \"\",\n              \"required\": \"false\",\n              \"placeholder\": \"\"\n            };\n          }\n\n        })\n\n        this.setState({\n          form: {\n            fields: dataArray\n          }\n        });\n        console.log(dataArray);\n\n      })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n\n        <SplitterLayout>\n          <div className=\"Form\">\n\n            <DynamicForm id=\"form\" config={this.state.form} onSubmit={(event) => this.submitHandler(event)}></DynamicForm>\n\n          </div>\n\n\n          <div className = \"PanelRight\">\n          <button id=\"download\" onClick={() => this.handleDownload()}>Download</button>\n          <CsvDownload data={this.state.response}>Download as CSV</CsvDownload>\n            <JSONPretty id=\"resultPanel\" json={this.state.response} theme={github} />\n          </div>\n        </SplitterLayout>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}