{"ast":null,"code":"'use strict';\n\nvar _defineProperty2 = require('babel-runtime/helpers/defineProperty');\n\nvar _defineProperty3 = _interopRequireDefault(_defineProperty2);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar has = require('lodash.has');\n\nvar isNil = require('lodash.isnil');\n\nvar FullTextQueryBase = require('./full-text-query-base');\n/**\n * The `MonoFieldQueryBase` provides support for common options used across\n * various full text query implementations with single search field.\n *\n * **NOTE:** Instantiating this directly should not be required.\n * However, if you wish to add a custom implementation for whatever reason,\n * this class could be extended.\n *\n * @param {string} queryType\n * @param {string=} field The document field to query against\n * @param {string=} queryString The query string\n *\n * @extends FullTextQueryBase\n */\n\n\nvar MonoFieldQueryBase = function (_FullTextQueryBase) {\n  (0, _inherits3.default)(MonoFieldQueryBase, _FullTextQueryBase); // eslint-disable-next-line require-jsdoc\n\n  function MonoFieldQueryBase(queryType, field, queryString) {\n    (0, _classCallCheck3.default)(this, MonoFieldQueryBase);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (MonoFieldQueryBase.__proto__ || Object.getPrototypeOf(MonoFieldQueryBase)).call(this, queryType, queryString));\n\n    if (!isNil(field)) _this._field = field;\n    return _this;\n  }\n  /**\n   * Sets the field to search on.\n   *\n   * @param {string} field\n   * @returns {MonoFieldQueryBase} returns `this` so that calls can be chained.\n   */\n\n\n  (0, _createClass3.default)(MonoFieldQueryBase, [{\n    key: 'field',\n    value: function field(_field) {\n      this._field = _field;\n      return this;\n    }\n    /**\n     * Override default `toJSON` to return DSL representation of the Full text query\n     * class instance.\n     *\n     * @override\n     * @returns {Object} returns an Object which maps to the elasticsearch query DSL\n     */\n\n  }, {\n    key: 'toJSON',\n    value: function toJSON() {\n      // recursiveToJSON doesn't seem to be required here.\n      // Revisit this.. Smells a little bit\n      if (!has(this._queryOpts, 'query')) {\n        throw new Error('Query string is required for full text query!');\n      }\n\n      var queryOptKeys = Object.keys(this._queryOpts);\n      var qryOpts = queryOptKeys.length === 1 ? this._queryOpts.query : this._queryOpts;\n      var repr = (0, _defineProperty3.default)({}, this.queryType, (0, _defineProperty3.default)({}, this._field, qryOpts));\n      return repr;\n    }\n  }]);\n  return MonoFieldQueryBase;\n}(FullTextQueryBase);\n\nmodule.exports = MonoFieldQueryBase;","map":null,"metadata":{},"sourceType":"script"}