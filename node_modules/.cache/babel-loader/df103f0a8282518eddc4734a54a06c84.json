{"ast":null,"code":"'use strict';\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar isNil = require('lodash.isnil');\n\nvar ScoreFunction = require('./score-function');\n/**\n * The `script_score` function allows you to wrap another query and customize\n * the scoring of it optionally with a computation derived from other numeric\n * field values in the doc using a script expression.\n *\n * [Elasticsearch reference](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-function-score-query.html#function-script-score)\n *\n * @example\n * const scoreFunc = esb.scriptScoreFunction(\n *     esb.script('inline', \"_score * doc['my_numeric_field'].value\")\n *         .lang('painless')\n * );\n *\n * @example\n * // Script with parameters\n * const scoreFunc = esb.scriptScoreFunction(\n *     esb.script(\n *         'inline',\n *         \"_score * doc['my_numeric_field'].value / Math.pow(params.param1, params.param2)\"\n *     )\n *         .lang('painless')\n *         .params({ param1: 'value1', param2: 'value2' })\n * );\n *\n * @param {Script|string} script\n *\n * @extends ScoreFunction\n */\n\n\nvar ScriptScoreFunction = function (_ScoreFunction) {\n  (0, _inherits3.default)(ScriptScoreFunction, _ScoreFunction); // eslint-disable-next-line require-jsdoc\n\n  function ScriptScoreFunction(script) {\n    (0, _classCallCheck3.default)(this, ScriptScoreFunction);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (ScriptScoreFunction.__proto__ || Object.getPrototypeOf(ScriptScoreFunction)).call(this, 'script_score'));\n\n    if (!isNil(script)) _this._opts.script = script;\n    return _this;\n  }\n  /**\n   *\n   * @param {Script|string} script\n   * @returns {ScriptScoreFunction} returns `this` so that calls can be chained.\n   */\n\n\n  (0, _createClass3.default)(ScriptScoreFunction, [{\n    key: 'script',\n    value: function script(_script) {\n      this._opts.script = _script;\n      return this;\n    }\n  }]);\n  return ScriptScoreFunction;\n}(ScoreFunction);\n\nmodule.exports = ScriptScoreFunction;","map":null,"metadata":{},"sourceType":"script"}