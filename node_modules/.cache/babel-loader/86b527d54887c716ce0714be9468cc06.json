{"ast":null,"code":"'use strict';\n\nvar _defineProperty2 = require('babel-runtime/helpers/defineProperty');\n\nvar _defineProperty3 = _interopRequireDefault(_defineProperty2);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar isEmpty = require('lodash.isempty');\n\nvar isNil = require('lodash.isnil');\n\nvar _require = require('../../../core'),\n    _require$util = _require.util,\n    invalidParam = _require$util.invalidParam,\n    recursiveToJSON = _require$util.recursiveToJSON;\n\nvar invalidOrderParam = invalidParam('', 'order', \"'asc' or 'desc'\");\n/**\n * Base class implementation for all Composite Aggregation values sources.\n *\n * **NOTE:** Instantiating this directly should not be required.\n *\n * @param {string} valueSrcType Type of value source\n * @param {string} refUrl Elasticsearch reference URL\n * @param {string} name\n * @param {string=} field The field to aggregate on\n *\n * @throws {Error} if `name` is empty\n * @throws {Error} if `valueSrcType` is empty\n */\n\nvar ValuesSourceBase = function () {\n  // eslint-disable-next-line require-jsdoc\n  function ValuesSourceBase(valueSrcType, refUrl, name, field) {\n    (0, _classCallCheck3.default)(this, ValuesSourceBase);\n    if (isEmpty(valueSrcType)) throw new Error('ValuesSourceBase `valueSrcType` cannot be empty');\n    this._name = name;\n    this._valueSrcType = valueSrcType;\n    this._refUrl = refUrl;\n    this._body = {};\n    this._opts = this._body[valueSrcType] = {};\n    if (!isNil(field)) this._opts.field = field;\n  }\n  /**\n   * Field to use for this source.\n   *\n   * @param {string} field a valid field name\n   * @returns {ValuesSourceBase} returns `this` so that calls can be chained\n   */\n\n\n  (0, _createClass3.default)(ValuesSourceBase, [{\n    key: 'field',\n    value: function field(_field) {\n      this._opts.field = _field;\n      return this;\n    }\n    /**\n     * Script to use for this source.\n     *\n     * @param {Script|Object|string} script\n     * @returns {ValuesSourceBase} returns `this` so that calls can be chained\n     * @throws {TypeError} If `script` is not an instance of `Script`\n     */\n\n  }, {\n    key: 'script',\n    value: function script(_script) {\n      this._opts.script = _script;\n      return this;\n    }\n    /**\n     * Specifies the type of values produced by this source, e.g. `string` or\n     * `date`.\n     *\n     * @param {string} valueType\n     * @returns {ValuesSourceBase} returns `this` so that calls can be chained\n     */\n\n  }, {\n    key: 'valueType',\n    value: function valueType(_valueType) {\n      this._opts.value_type = _valueType;\n      return this;\n    }\n    /**\n     * Order specifies the order in the values produced by this source. It can\n     * be either `asc` or `desc`.\n     *\n     * @param {string} order The `order` option can have the following values.\n     * `asc`, `desc` to sort in ascending, descending order respectively.\n     * @returns {ValuesSourceBase} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'order',\n    value: function order(_order) {\n      if (isNil(_order)) invalidOrderParam(_order, this._refUrl);\n\n      var orderLower = _order.toLowerCase();\n\n      if (orderLower !== 'asc' && orderLower !== 'desc') {\n        invalidOrderParam(_order, this._refUrl);\n      }\n\n      this._opts.order = orderLower;\n      return this;\n    }\n    /**\n     * Missing specifies the value to use when the source finds a missing value\n     * in a document.\n     *\n     * @param {string} value\n     * @returns {ValuesSourceBase} returns `this` so that calls can be chained\n     */\n\n  }, {\n    key: 'missing',\n    value: function missing(value) {\n      this._opts.missing = value;\n      return this;\n    }\n    /**\n     * Override default `toJSON` to return DSL representation for the Composite\n     * Aggregation values source.\n     *\n     * @override\n     * @returns {Object} returns an Object which maps to the elasticsearch query DSL\n     */\n\n  }, {\n    key: 'toJSON',\n    value: function toJSON() {\n      return (0, _defineProperty3.default)({}, this._name, recursiveToJSON(this._body));\n    }\n  }]);\n  return ValuesSourceBase;\n}();\n\nmodule.exports = ValuesSourceBase;","map":null,"metadata":{},"sourceType":"script"}