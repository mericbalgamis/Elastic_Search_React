{"ast":null,"code":"'use strict';\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar isNil = require('lodash.isnil');\n\nvar _require = require('../../core'),\n    GeoPoint = _require.GeoPoint,\n    _require$util = _require.util,\n    checkType = _require$util.checkType,\n    invalidParam = _require$util.invalidParam;\n\nvar GeoQueryBase = require('./geo-query-base');\n\nvar ES_REF_URL = 'https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-geo-bounding-box-query.html';\nvar invalidTypeParam = invalidParam(ES_REF_URL, 'type', \"'memory' or 'indexed'\");\n/**\n * A query allowing to filter hits based on a point location using a bounding box.\n *\n * [Elasticsearch reference](https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-geo-bounding-box-query.html)\n *\n * @example\n * // Format of point in Geohash\n * const qry = esb.geoBoundingBoxQuery('pin.location')\n *     .topLeft(esb.geoPoint().string('dr5r9ydj2y73'))\n *     .bottomRight(esb.geoPoint().string('drj7teegpus6'));\n *\n * @example\n * // Format of point with lat lon as properties\n * const qry = esb.geoBoundingBoxQuery()\n *     .field('pin.location')\n *     .topLeft(esb.geoPoint()\n *         .lat(40.73)\n *         .lon(-74.1))\n *     .bottomRight(esb.geoPoint()\n *         .lat(40.10)\n *         .lon(-71.12));\n *\n * @example\n * // Set bounding box values separately\n * const qry = esb.geoBoundingBoxQuery('pin.location')\n *     .top(40.73)\n *     .left(-74.1)\n *     .bottom(40.01)\n *     .right(-71.12);\n *\n * @param {string=} field\n *\n * @extends GeoQueryBase\n */\n\nvar GeoBoundingBoxQuery = function (_GeoQueryBase) {\n  (0, _inherits3.default)(GeoBoundingBoxQuery, _GeoQueryBase); // eslint-disable-next-line require-jsdoc\n\n  function GeoBoundingBoxQuery(field) {\n    (0, _classCallCheck3.default)(this, GeoBoundingBoxQuery);\n    return (0, _possibleConstructorReturn3.default)(this, (GeoBoundingBoxQuery.__proto__ || Object.getPrototypeOf(GeoBoundingBoxQuery)).call(this, 'geo_bounding_box', field));\n  }\n  /**\n   * Sets the top left coordinate for the Geo bounding box filter for\n   * querying documents\n   *\n   * @param {GeoPoint} point A valid `GeoPoint`\n   * @returns {GeoBoundingBoxQuery} returns `this` so that calls can be chained.\n   */\n\n\n  (0, _createClass3.default)(GeoBoundingBoxQuery, [{\n    key: 'topLeft',\n    value: function topLeft(point) {\n      checkType(point, GeoPoint);\n      this._fieldOpts.top_left = point;\n      return this;\n    }\n    /**\n     * Sets the bottom right coordinate for the Geo bounding box filter for\n     * querying documents\n     *\n     * @param {GeoPoint} point A valid `GeoPoint`\n     * @returns {GeoBoundingBoxQuery} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'bottomRight',\n    value: function bottomRight(point) {\n      checkType(point, GeoPoint);\n      this._fieldOpts.bottom_right = point;\n      return this;\n    }\n    /**\n     * Sets the top right coordinate for the Geo bounding box filter for\n     * querying documents\n     *\n     * @param {GeoPoint} point A valid `GeoPoint`\n     * @returns {GeoBoundingBoxQuery} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'topRight',\n    value: function topRight(point) {\n      checkType(point, GeoPoint);\n      this._fieldOpts.top_right = point;\n      return this;\n    }\n    /**\n     * Sets the bottom left coordinate for the Geo bounding box filter for\n     * querying documents\n     *\n     * @param {GeoPoint} point A valid `GeoPoint`\n     * @returns {GeoBoundingBoxQuery} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'bottomLeft',\n    value: function bottomLeft(point) {\n      checkType(point, GeoPoint);\n      this._fieldOpts.bottom_left = point;\n      return this;\n    }\n    /**\n     * Sets value for top of the bounding box.\n     *\n     * @param {number} val\n     * @returns {GeoBoundingBoxQuery} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'top',\n    value: function top(val) {\n      this._fieldOpts.top = val;\n      return this;\n    }\n    /**\n     * Sets value for left of the bounding box.\n     *\n     * @param {number} val\n     * @returns {GeoBoundingBoxQuery} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'left',\n    value: function left(val) {\n      this._fieldOpts.left = val;\n      return this;\n    }\n    /**\n     * Sets value for bottom of the bounding box.\n     *\n     * @param {number} val\n     * @returns {GeoBoundingBoxQuery} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'bottom',\n    value: function bottom(val) {\n      this._fieldOpts.bottom = val;\n      return this;\n    }\n    /**\n     * Sets value for right of the bounding box.\n     *\n     * @param {number} val\n     * @returns {GeoBoundingBoxQuery} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'right',\n    value: function right(val) {\n      this._fieldOpts.right = val;\n      return this;\n    }\n    /**\n     * Sets the type of execution for the bounding box query.\n     * The type of the bounding box execution by default is set to memory,\n     * which means in memory checks if the doc falls within the bounding\n     * box range. In some cases, an indexed option will perform faster\n     * (but note that the geo_point type must have lat and lon indexed in this case)\n     *\n     * @example\n     *\n     * const geoQry = esb.geoBoundingBoxQuery()\n     *     .field('pin.location')\n     *     .topLeft(esb.geoPoint()\n     *         .lat(40.73)\n     *         .lon(-74.1))\n     *     .bottomRight(esb.geoPoint()\n     *         .lat(40.10)\n     *         .lon(-71.12))\n     *     .type('indexed');\n     *\n     * @param {string} type Can either `memory` or `indexed`\n     * @returns {GeoBoundingBoxQuery} returns `this` so that calls can be chained.\n     */\n\n  }, {\n    key: 'type',\n    value: function type(_type) {\n      if (isNil(_type)) invalidTypeParam(_type);\n\n      var typeLower = _type.toLowerCase();\n\n      if (typeLower !== 'memory' && typeLower !== 'indexed') {\n        invalidTypeParam(_type);\n      }\n\n      this._queryOpts.type = typeLower;\n      return this;\n    }\n  }]);\n  return GeoBoundingBoxQuery;\n}(GeoQueryBase);\n\nmodule.exports = GeoBoundingBoxQuery;","map":null,"metadata":{},"sourceType":"script"}